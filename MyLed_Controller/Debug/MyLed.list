
MyLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a978  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae80  0800ae80  00020160  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae80  0800ae80  00020160  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae80  0800ae80  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae80  0800ae80  0001ae80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae84  0800ae84  0001ae84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800ae88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035c0  20000160  0800afe8  00020160  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003720  0800afe8  00023720  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012400  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003602  00000000  00000000  00032589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00035b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00036e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000423e  00000000  00000000  00037f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016645  00000000  00000000  0003c1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009288b  00000000  00000000  000527f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e507e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c94  00000000  00000000  000e50d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000160 	.word	0x20000160
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa70 	.word	0x0800aa70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000164 	.word	0x20000164
 800014c:	0800aa70 	.word	0x0800aa70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <__aeabi_f2uiz>:
 80010cc:	0042      	lsls	r2, r0, #1
 80010ce:	d20e      	bcs.n	80010ee <__aeabi_f2uiz+0x22>
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30b      	bcc.n	80010ee <__aeabi_f2uiz+0x22>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d409      	bmi.n	80010f4 <__aeabi_f2uiz+0x28>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2uiz+0x32>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d102      	bne.n	8001104 <__aeabi_f2uiz+0x38>
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001102:	4770      	bx	lr
 8001104:	f04f 0000 	mov.w	r0, #0
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <ESP_AT_Init>:
int esp_message_WIFI_DISCONNECT = 0;
char esp_message_CONNECT[CONNECT_BUFF_LENGTH];
char esp_message_CLOSE[CLOSE_BUFF_LENGTH];
char esp_message_IDP[IDP_BUFF_LENGTH];

void ESP_AT_Init(){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	AT__RST_Execute();
 8001110:	f000 f836 	bl	8001180 <AT__RST_Execute>
	while(HAL_UARTEx_ReceiveToIdle_IT(H_UART_ESP, (uint8_t*)rx_buff, RX_BUFF_LENGTH) != HAL_OK);
 8001114:	bf00      	nop
 8001116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <ESP_AT_Init+0x24>)
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <ESP_AT_Init+0x28>)
 800111e:	f007 fbcd 	bl	80088bc <HAL_UARTEx_ReceiveToIdle_IT>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f6      	bne.n	8001116 <ESP_AT_Init+0xa>
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000017c 	.word	0x2000017c
 8001134:	20003570 	.word	0x20003570

08001138 <AT_Execute>:

ESP_Response AT_Execute(){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	sprintf(tx_buff, "%s", AT);
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <AT_Execute+0x18>)
 800113e:	4905      	ldr	r1, [pc, #20]	; (8001154 <AT_Execute+0x1c>)
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <AT_Execute+0x20>)
 8001142:	f008 f9cb 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 8001146:	f000 f931 	bl	80013ac <ESP_SendCommand>
 800114a:	4603      	mov	r3, r0
}
 800114c:	4618      	mov	r0, r3
 800114e:	bd80      	pop	{r7, pc}
 8001150:	0800aa88 	.word	0x0800aa88
 8001154:	0800aa90 	.word	0x0800aa90
 8001158:	2000027c 	.word	0x2000027c

0800115c <ATE0_Execute>:

ESP_Response ATE0_Execute(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	sprintf(tx_buff, "%s", ATE0);
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <ATE0_Execute+0x18>)
 8001162:	4905      	ldr	r1, [pc, #20]	; (8001178 <ATE0_Execute+0x1c>)
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <ATE0_Execute+0x20>)
 8001166:	f008 f9b9 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 800116a:	f000 f91f 	bl	80013ac <ESP_SendCommand>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0800aa94 	.word	0x0800aa94
 8001178:	0800aa90 	.word	0x0800aa90
 800117c:	2000027c 	.word	0x2000027c

08001180 <AT__RST_Execute>:

ESP_Response AT__RST_Execute(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	sprintf(tx_buff, "%s", AT__RST);
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <AT__RST_Execute+0x30>)
 8001186:	490b      	ldr	r1, [pc, #44]	; (80011b4 <AT__RST_Execute+0x34>)
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <AT__RST_Execute+0x38>)
 800118a:	f008 f9a7 	bl	80094dc <siprintf>
	HAL_UART_Transmit(H_UART_ESP, (uint8_t*)tx_buff, strlen(tx_buff), 100);
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <AT__RST_Execute+0x38>)
 8001190:	f7fe ffde 	bl	8000150 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	b29a      	uxth	r2, r3
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	4907      	ldr	r1, [pc, #28]	; (80011b8 <AT__RST_Execute+0x38>)
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <AT__RST_Execute+0x3c>)
 800119e:	f007 fafb 	bl	8008798 <HAL_UART_Transmit>
	HAL_Delay(500);
 80011a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a6:	f004 f989 	bl	80054bc <HAL_Delay>
	return AT_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	0800aa9c 	.word	0x0800aa9c
 80011b4:	0800aa90 	.word	0x0800aa90
 80011b8:	2000027c 	.word	0x2000027c
 80011bc:	20003570 	.word	0x20003570

080011c0 <AT__CWMODE_CUR_Set>:

ESP_Response AT__CWMODE_CUR_Set(uint8_t mode){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b092      	sub	sp, #72	; 0x48
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	char tmpstr[64];
	sprintf(tmpstr, "=%d", mode);
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <AT__CWMODE_CUR_Set+0x34>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f008 f982 	bl	80094dc <siprintf>
	sprintf(tx_buff, AT__CWMODE_CUR, tmpstr);
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	461a      	mov	r2, r3
 80011de:	4906      	ldr	r1, [pc, #24]	; (80011f8 <AT__CWMODE_CUR_Set+0x38>)
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <AT__CWMODE_CUR_Set+0x3c>)
 80011e2:	f008 f97b 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 80011e6:	f000 f8e1 	bl	80013ac <ESP_SendCommand>
 80011ea:	4603      	mov	r3, r0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3748      	adds	r7, #72	; 0x48
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800aaa8 	.word	0x0800aaa8
 80011f8:	0800aaac 	.word	0x0800aaac
 80011fc:	2000027c 	.word	0x2000027c

08001200 <AT__CIPAP_CUR_Set>:

ESP_Response AT__CIPAP_CUR_Set(char* ip, char* getaway, char* mask){
 8001200:	b580      	push	{r7, lr}
 8001202:	b096      	sub	sp, #88	; 0x58
 8001204:	af02      	add	r7, sp, #8
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
	char tmpstr[64];
	sprintf(tmpstr, "=\"%s\",\"%s\",\"%s\"", ip, getaway, mask);
 800120c:	f107 0010 	add.w	r0, r7, #16
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4908      	ldr	r1, [pc, #32]	; (800123c <AT__CIPAP_CUR_Set+0x3c>)
 800121a:	f008 f95f 	bl	80094dc <siprintf>
	sprintf(tx_buff, AT__CIPAP_CUR, tmpstr);
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	461a      	mov	r2, r3
 8001224:	4906      	ldr	r1, [pc, #24]	; (8001240 <AT__CIPAP_CUR_Set+0x40>)
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <AT__CIPAP_CUR_Set+0x44>)
 8001228:	f008 f958 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 800122c:	f000 f8be 	bl	80013ac <ESP_SendCommand>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3750      	adds	r7, #80	; 0x50
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	0800aac0 	.word	0x0800aac0
 8001240:	0800aad0 	.word	0x0800aad0
 8001244:	2000027c 	.word	0x2000027c

08001248 <AT__CWSAP_CUR_Set>:

ESP_Response AT__CWSAP_CUR_Set(char* ssid, char* pwd, uint8_t chl, uint8_t ecn){
 8001248:	b580      	push	{r7, lr}
 800124a:	b096      	sub	sp, #88	; 0x58
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4611      	mov	r1, r2
 8001254:	461a      	mov	r2, r3
 8001256:	460b      	mov	r3, r1
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	4613      	mov	r3, r2
 800125c:	71bb      	strb	r3, [r7, #6]
	char tmpstr[64];
	sprintf(tmpstr, "=\"%s\",\"%s\",%d,%d", ssid, pwd, chl, ecn);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	79ba      	ldrb	r2, [r7, #6]
 8001262:	f107 0010 	add.w	r0, r7, #16
 8001266:	9201      	str	r2, [sp, #4]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <AT__CWSAP_CUR_Set+0x48>)
 8001270:	f008 f934 	bl	80094dc <siprintf>
	sprintf(tx_buff, AT__CWSAP_CUR, tmpstr);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	461a      	mov	r2, r3
 800127a:	4906      	ldr	r1, [pc, #24]	; (8001294 <AT__CWSAP_CUR_Set+0x4c>)
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <AT__CWSAP_CUR_Set+0x50>)
 800127e:	f008 f92d 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 8001282:	f000 f893 	bl	80013ac <ESP_SendCommand>
 8001286:	4603      	mov	r3, r0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3750      	adds	r7, #80	; 0x50
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0800aae4 	.word	0x0800aae4
 8001294:	0800aaf8 	.word	0x0800aaf8
 8001298:	2000027c 	.word	0x2000027c

0800129c <AT__CIPMUX_Set>:

ESP_Response AT__CIPMUX_Set(uint8_t mode){
 800129c:	b580      	push	{r7, lr}
 800129e:	b092      	sub	sp, #72	; 0x48
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	char tmpstr[64];
	sprintf(tmpstr, "=%d", mode);
 80012a6:	79fa      	ldrb	r2, [r7, #7]
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4908      	ldr	r1, [pc, #32]	; (80012d0 <AT__CIPMUX_Set+0x34>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f008 f914 	bl	80094dc <siprintf>
	sprintf(tx_buff, AT__CIPMUX, tmpstr);
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	461a      	mov	r2, r3
 80012ba:	4906      	ldr	r1, [pc, #24]	; (80012d4 <AT__CIPMUX_Set+0x38>)
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <AT__CIPMUX_Set+0x3c>)
 80012be:	f008 f90d 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 80012c2:	f000 f873 	bl	80013ac <ESP_SendCommand>
 80012c6:	4603      	mov	r3, r0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3748      	adds	r7, #72	; 0x48
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	0800aaa8 	.word	0x0800aaa8
 80012d4:	0800ab0c 	.word	0x0800ab0c
 80012d8:	2000027c 	.word	0x2000027c

080012dc <AT__CIPSERVER_Set>:

ESP_Response AT__CIPSERVER_Set(uint8_t mode, uint16_t port){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b092      	sub	sp, #72	; 0x48
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	460a      	mov	r2, r1
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	4613      	mov	r3, r2
 80012ea:	80bb      	strh	r3, [r7, #4]
	char tmpstr[64];
	sprintf(tmpstr, "=%d,%d", mode, port);
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	f107 0008 	add.w	r0, r7, #8
 80012f4:	4908      	ldr	r1, [pc, #32]	; (8001318 <AT__CIPSERVER_Set+0x3c>)
 80012f6:	f008 f8f1 	bl	80094dc <siprintf>
	sprintf(tx_buff, AT__CIPSERVER, tmpstr);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	461a      	mov	r2, r3
 8001300:	4906      	ldr	r1, [pc, #24]	; (800131c <AT__CIPSERVER_Set+0x40>)
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <AT__CIPSERVER_Set+0x44>)
 8001304:	f008 f8ea 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 8001308:	f000 f850 	bl	80013ac <ESP_SendCommand>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3748      	adds	r7, #72	; 0x48
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	0800ab1c 	.word	0x0800ab1c
 800131c:	0800ab24 	.word	0x0800ab24
 8001320:	2000027c 	.word	0x2000027c

08001324 <AT__CIPSTA_CUR_Set>:

ESP_Response AT__CIPSTA_CUR_Set(char* ip, char* getaway, char* mask){
 8001324:	b580      	push	{r7, lr}
 8001326:	b096      	sub	sp, #88	; 0x58
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	char tmpstr[64];
	sprintf(tmpstr, "=\"%s\",\"%s\",\"%s\"", ip, getaway, mask);
 8001330:	f107 0010 	add.w	r0, r7, #16
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4908      	ldr	r1, [pc, #32]	; (8001360 <AT__CIPSTA_CUR_Set+0x3c>)
 800133e:	f008 f8cd 	bl	80094dc <siprintf>
	sprintf(tx_buff, AT__CIPSTA_CUR, tmpstr);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	461a      	mov	r2, r3
 8001348:	4906      	ldr	r1, [pc, #24]	; (8001364 <AT__CIPSTA_CUR_Set+0x40>)
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <AT__CIPSTA_CUR_Set+0x44>)
 800134c:	f008 f8c6 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 8001350:	f000 f82c 	bl	80013ac <ESP_SendCommand>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3750      	adds	r7, #80	; 0x50
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0800aac0 	.word	0x0800aac0
 8001364:	0800ab38 	.word	0x0800ab38
 8001368:	2000027c 	.word	0x2000027c

0800136c <AT__CWJAP_CUR_Set>:

ESP_Response AT__CWJAP_CUR_Set(char* ssid, char* pwd){
 800136c:	b580      	push	{r7, lr}
 800136e:	b092      	sub	sp, #72	; 0x48
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	char tmpstr[64];
	sprintf(tmpstr, "=\"%s\",\"%s\"", ssid, pwd);
 8001376:	f107 0008 	add.w	r0, r7, #8
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <AT__CWJAP_CUR_Set+0x34>)
 8001380:	f008 f8ac 	bl	80094dc <siprintf>
	sprintf(tx_buff, AT__CWJAP_CUR, tmpstr);
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	461a      	mov	r2, r3
 800138a:	4906      	ldr	r1, [pc, #24]	; (80013a4 <AT__CWJAP_CUR_Set+0x38>)
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <AT__CWJAP_CUR_Set+0x3c>)
 800138e:	f008 f8a5 	bl	80094dc <siprintf>
	return ESP_SendCommand();
 8001392:	f000 f80b 	bl	80013ac <ESP_SendCommand>
 8001396:	4603      	mov	r3, r0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3748      	adds	r7, #72	; 0x48
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0800ab4c 	.word	0x0800ab4c
 80013a4:	0800ab58 	.word	0x0800ab58
 80013a8:	2000027c 	.word	0x2000027c

080013ac <ESP_SendCommand>:

ESP_Response ESP_SendCommand(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	memset(rx_buff, '\0', RX_BUFF_LENGTH);
 80013b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b6:	2100      	movs	r1, #0
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <ESP_SendCommand+0x4c>)
 80013ba:	f007 ff49 	bl	8009250 <memset>
	HAL_UART_Transmit(H_UART_ESP, (uint8_t*)tx_buff, strlen(tx_buff), 100);
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <ESP_SendCommand+0x50>)
 80013c0:	f7fe fec6 	bl	8000150 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	2364      	movs	r3, #100	; 0x64
 80013ca:	490c      	ldr	r1, [pc, #48]	; (80013fc <ESP_SendCommand+0x50>)
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <ESP_SendCommand+0x54>)
 80013ce:	f007 f9e3 	bl	8008798 <HAL_UART_Transmit>
	while(esp_response == -1){}
 80013d2:	bf00      	nop
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <ESP_SendCommand+0x58>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d0fa      	beq.n	80013d4 <ESP_SendCommand+0x28>
	ESP_Response tmp_resp = esp_response;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <ESP_SendCommand+0x58>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
	esp_response = -1;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <ESP_SendCommand+0x58>)
 80013e6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ea:	601a      	str	r2, [r3, #0]
	return tmp_resp;
 80013ec:	79fb      	ldrb	r3, [r7, #7]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000017c 	.word	0x2000017c
 80013fc:	2000027c 	.word	0x2000027c
 8001400:	20003570 	.word	0x20003570
 8001404:	20000000 	.word	0x20000000

08001408 <ESP_CheckMessage>:

void ESP_CheckMessage(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	if (esp_message_IDP[0] != '\0'){
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <ESP_CheckMessage+0x78>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <ESP_CheckMessage+0x1e>
		IPD_callback(esp_message_IDP);
 8001414:	481a      	ldr	r0, [pc, #104]	; (8001480 <ESP_CheckMessage+0x78>)
 8001416:	f003 f82b 	bl	8004470 <IPD_callback>
		memset(esp_message_IDP, '\0', IDP_BUFF_LENGTH);
 800141a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141e:	2100      	movs	r1, #0
 8001420:	4817      	ldr	r0, [pc, #92]	; (8001480 <ESP_CheckMessage+0x78>)
 8001422:	f007 ff15 	bl	8009250 <memset>
	}
	if(esp_message_WIFI_CONNECTED){
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <ESP_CheckMessage+0x7c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <ESP_CheckMessage+0x32>
		WIFI_CONNECTED_callback();
 800142e:	f000 f8d3 	bl	80015d8 <WIFI_CONNECTED_callback>
		esp_message_WIFI_CONNECTED = 0;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <ESP_CheckMessage+0x7c>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e008      	b.n	800144c <ESP_CheckMessage+0x44>
	}
	else if(esp_message_WIFI_DISCONNECT){
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <ESP_CheckMessage+0x80>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <ESP_CheckMessage+0x44>
		WIFI_DISCONNECT_callback();
 8001442:	f000 f8cf 	bl	80015e4 <WIFI_DISCONNECT_callback>
		esp_message_WIFI_DISCONNECT = 0;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <ESP_CheckMessage+0x80>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
	}
	if(esp_message_CONNECT[0] != '\0'){
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <ESP_CheckMessage+0x84>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <ESP_CheckMessage+0x5c>
		CONNECT_callback(esp_message_CONNECT);
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <ESP_CheckMessage+0x84>)
 8001456:	f000 f8cb 	bl	80015f0 <CONNECT_callback>
		memset(esp_message_CONNECT, '\0', CONNECT_BUFF_LENGTH);
 800145a:	2210      	movs	r2, #16
 800145c:	2100      	movs	r1, #0
 800145e:	480b      	ldr	r0, [pc, #44]	; (800148c <ESP_CheckMessage+0x84>)
 8001460:	f007 fef6 	bl	8009250 <memset>
	}
	if(esp_message_CLOSE[0] != '\0'){
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <ESP_CheckMessage+0x88>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <ESP_CheckMessage+0x72>
		CLOSE_callback();
 800146c:	f000 f8c9 	bl	8001602 <CLOSE_callback>
		memset(esp_message_CLOSE, '\0', CLOSE_BUFF_LENGTH);
 8001470:	2210      	movs	r2, #16
 8001472:	2100      	movs	r1, #0
 8001474:	4806      	ldr	r0, [pc, #24]	; (8001490 <ESP_CheckMessage+0x88>)
 8001476:	f007 feeb 	bl	8009250 <memset>
	}
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200003a4 	.word	0x200003a4
 8001484:	2000037c 	.word	0x2000037c
 8001488:	20000380 	.word	0x20000380
 800148c:	20000384 	.word	0x20000384
 8001490:	20000394 	.word	0x20000394

08001494 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
	if(huart == H_UART_ESP){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a3d      	ldr	r2, [pc, #244]	; (8001598 <HAL_UARTEx_RxEventCallback+0x104>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d172      	bne.n	800158e <HAL_UARTEx_RxEventCallback+0xfa>
		if(strstr(rx_buff, _OK)){
 80014a8:	493c      	ldr	r1, [pc, #240]	; (800159c <HAL_UARTEx_RxEventCallback+0x108>)
 80014aa:	483d      	ldr	r0, [pc, #244]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 80014ac:	f008 f836 	bl	800951c <strstr>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_UARTEx_RxEventCallback+0x2a>
			esp_response = AT_OK;
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x110>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e057      	b.n	800156e <HAL_UARTEx_RxEventCallback+0xda>
		}
		else if(strstr(rx_buff, _ERROR)){
 80014be:	493a      	ldr	r1, [pc, #232]	; (80015a8 <HAL_UARTEx_RxEventCallback+0x114>)
 80014c0:	4837      	ldr	r0, [pc, #220]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 80014c2:	f008 f82b 	bl	800951c <strstr>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_UARTEx_RxEventCallback+0x40>
			esp_response = AT_ERROR;
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x110>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e04c      	b.n	800156e <HAL_UARTEx_RxEventCallback+0xda>
		}
		else if(strstr(rx_buff, _FAIL)){
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <HAL_UARTEx_RxEventCallback+0x118>)
 80014d6:	4832      	ldr	r0, [pc, #200]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 80014d8:	f008 f820 	bl	800951c <strstr>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_UARTEx_RxEventCallback+0x56>
			esp_response =  AT_FAIL;
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x110>)
 80014e4:	2202      	movs	r2, #2
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e041      	b.n	800156e <HAL_UARTEx_RxEventCallback+0xda>
		}


		else if(strstr(rx_buff, _CONNECT)){
 80014ea:	4931      	ldr	r1, [pc, #196]	; (80015b0 <HAL_UARTEx_RxEventCallback+0x11c>)
 80014ec:	482c      	ldr	r0, [pc, #176]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 80014ee:	f008 f815 	bl	800951c <strstr>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_UARTEx_RxEventCallback+0x72>
			memcpy(esp_message_CONNECT, rx_buff, CONNECT_BUFF_LENGTH);
 80014f8:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <HAL_UARTEx_RxEventCallback+0x120>)
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 80014fc:	4614      	mov	r4, r2
 80014fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001504:	e033      	b.n	800156e <HAL_UARTEx_RxEventCallback+0xda>
		}
		else if(strstr(rx_buff, _IPD)){
 8001506:	492c      	ldr	r1, [pc, #176]	; (80015b8 <HAL_UARTEx_RxEventCallback+0x124>)
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 800150a:	f008 f807 	bl	800951c <strstr>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d009      	beq.n	8001528 <HAL_UARTEx_RxEventCallback+0x94>
			memcpy(esp_message_IDP, rx_buff, IDP_BUFF_LENGTH);
 8001514:	4a29      	ldr	r2, [pc, #164]	; (80015bc <HAL_UARTEx_RxEventCallback+0x128>)
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001520:	461a      	mov	r2, r3
 8001522:	f007 fe87 	bl	8009234 <memcpy>
 8001526:	e022      	b.n	800156e <HAL_UARTEx_RxEventCallback+0xda>
		}
		else if(strstr(rx_buff, _CLOSED)){
 8001528:	4925      	ldr	r1, [pc, #148]	; (80015c0 <HAL_UARTEx_RxEventCallback+0x12c>)
 800152a:	481d      	ldr	r0, [pc, #116]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 800152c:	f007 fff6 	bl	800951c <strstr>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <HAL_UARTEx_RxEventCallback+0xb0>
			memcpy(esp_message_CLOSE, rx_buff, CLOSE_BUFF_LENGTH);
 8001536:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <HAL_UARTEx_RxEventCallback+0x130>)
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 800153a:	4614      	mov	r4, r2
 800153c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001542:	e014      	b.n	800156e <HAL_UARTEx_RxEventCallback+0xda>
		}
		else if(strstr(rx_buff, _WIFI_CONNECTED)){
 8001544:	4920      	ldr	r1, [pc, #128]	; (80015c8 <HAL_UARTEx_RxEventCallback+0x134>)
 8001546:	4816      	ldr	r0, [pc, #88]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001548:	f007 ffe8 	bl	800951c <strstr>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_UARTEx_RxEventCallback+0xc6>
			esp_message_WIFI_CONNECTED = 1;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <HAL_UARTEx_RxEventCallback+0x138>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e009      	b.n	800156e <HAL_UARTEx_RxEventCallback+0xda>
		}
		else if(strstr(rx_buff, _WIFI_DISCONNECT)){
 800155a:	491d      	ldr	r1, [pc, #116]	; (80015d0 <HAL_UARTEx_RxEventCallback+0x13c>)
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 800155e:	f007 ffdd 	bl	800951c <strstr>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <HAL_UARTEx_RxEventCallback+0xda>
			esp_message_WIFI_DISCONNECT = 1;
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x140>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]
		}
		memset(rx_buff, '\0', RX_BUFF_LENGTH);
 800156e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001572:	2100      	movs	r1, #0
 8001574:	480a      	ldr	r0, [pc, #40]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001576:	f007 fe6b 	bl	8009250 <memset>
		while(HAL_UARTEx_ReceiveToIdle_IT(H_UART_ESP, (uint8_t*)rx_buff, RX_BUFF_LENGTH) != HAL_OK);
 800157a:	bf00      	nop
 800157c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <HAL_UARTEx_RxEventCallback+0x104>)
 8001584:	f007 f99a 	bl	80088bc <HAL_UARTEx_ReceiveToIdle_IT>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f6      	bne.n	800157c <HAL_UARTEx_RxEventCallback+0xe8>
	}
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	20003570 	.word	0x20003570
 800159c:	0800ab6c 	.word	0x0800ab6c
 80015a0:	2000017c 	.word	0x2000017c
 80015a4:	20000000 	.word	0x20000000
 80015a8:	0800ab74 	.word	0x0800ab74
 80015ac:	0800ab80 	.word	0x0800ab80
 80015b0:	0800ab8c 	.word	0x0800ab8c
 80015b4:	20000384 	.word	0x20000384
 80015b8:	0800ab98 	.word	0x0800ab98
 80015bc:	200003a4 	.word	0x200003a4
 80015c0:	0800aba0 	.word	0x0800aba0
 80015c4:	20000394 	.word	0x20000394
 80015c8:	0800aba8 	.word	0x0800aba8
 80015cc:	2000037c 	.word	0x2000037c
 80015d0:	0800abb8 	.word	0x0800abb8
 80015d4:	20000380 	.word	0x20000380

080015d8 <WIFI_CONNECTED_callback>:

__weak void WIFI_CONNECTED_callback(){};
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <WIFI_DISCONNECT_callback>:
__weak void WIFI_DISCONNECT_callback(){};
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <CONNECT_callback>:
__weak void CONNECT_callback(char* esp_message_CONNECT){};
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <CLOSE_callback>:
__weak void CLOSE_callback(){};
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
	...

08001610 <sine>:
241,  243,  244,  245,  246,  247,  248,  249,  250,  251,
252,  253,  253,  254,  254,  254,  255,  255,  255,  255
};

float sine(int i)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  int j=i;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	60fb      	str	r3, [r7, #12]
  float out;
  while(j<0){j=j+360;}
 800161c:	e003      	b.n	8001626 <sine+0x16>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	dbf8      	blt.n	800161e <sine+0xe>
  while(j>360){j=j-360;}
 800162c:	e003      	b.n	8001636 <sine+0x26>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800163c:	dcf7      	bgt.n	800162e <sine+0x1e>
  if(j>-1   && j<91){out= sine_data[j];}
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0c      	blt.n	800165e <sine+0x4e>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b5a      	cmp	r3, #90	; 0x5a
 8001648:	dc09      	bgt.n	800165e <sine+0x4e>
 800164a:	4a24      	ldr	r2, [pc, #144]	; (80016dc <sine+0xcc>)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff faf6 	bl	8000c44 <__aeabi_ui2f>
 8001658:	4603      	mov	r3, r0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	e035      	b.n	80016ca <sine+0xba>
  else if(j>90  && j<181){out= sine_data[180-j];}
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b5a      	cmp	r3, #90	; 0x5a
 8001662:	dd0d      	ble.n	8001680 <sine+0x70>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2bb4      	cmp	r3, #180	; 0xb4
 8001668:	dc0a      	bgt.n	8001680 <sine+0x70>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <sine+0xcc>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fae5 	bl	8000c44 <__aeabi_ui2f>
 800167a:	4603      	mov	r3, r0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	e024      	b.n	80016ca <sine+0xba>
  else if(j>180 && j<271){out= -sine_data[j-180];}
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2bb4      	cmp	r3, #180	; 0xb4
 8001684:	dd0e      	ble.n	80016a4 <sine+0x94>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800168c:	dc0a      	bgt.n	80016a4 <sine+0x94>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3bb4      	subs	r3, #180	; 0xb4
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <sine+0xcc>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	425b      	negs	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fad7 	bl	8000c4c <__aeabi_i2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	e012      	b.n	80016ca <sine+0xba>
  else if(j>270 && j<361){out= -sine_data[360-j];}
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80016aa:	dd0e      	ble.n	80016ca <sine+0xba>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80016b2:	dc0a      	bgt.n	80016ca <sine+0xba>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <sine+0xcc>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	425b      	negs	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fac3 	bl	8000c4c <__aeabi_i2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	60bb      	str	r3, [r7, #8]
  return (out/255);
 80016ca:	4905      	ldr	r1, [pc, #20]	; (80016e0 <sine+0xd0>)
 80016cc:	68b8      	ldr	r0, [r7, #8]
 80016ce:	f7ff fbc5 	bl	8000e5c <__aeabi_fdiv>
 80016d2:	4603      	mov	r3, r0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000004 	.word	0x20000004
 80016e0:	437f0000 	.word	0x437f0000

080016e4 <cosine>:

float cosine(int i)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  int j=i;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
  float out;
  while(j<0){j=j+360;}
 80016f0:	e003      	b.n	80016fa <cosine+0x16>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	dbf8      	blt.n	80016f2 <cosine+0xe>
  while(j>360){j=j-360;}
 8001700:	e003      	b.n	800170a <cosine+0x26>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001710:	dcf7      	bgt.n	8001702 <cosine+0x1e>
  if(j>-1   && j<91){out= sine_data[90-j];}
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0d      	blt.n	8001734 <cosine+0x50>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b5a      	cmp	r3, #90	; 0x5a
 800171c:	dc0a      	bgt.n	8001734 <cosine+0x50>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001724:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <cosine+0xd0>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fa8b 	bl	8000c44 <__aeabi_ui2f>
 800172e:	4603      	mov	r3, r0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	e035      	b.n	80017a0 <cosine+0xbc>
  else if(j>90  && j<181){out= -sine_data[j-90];}
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b5a      	cmp	r3, #90	; 0x5a
 8001738:	dd0d      	ble.n	8001756 <cosine+0x72>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2bb4      	cmp	r3, #180	; 0xb4
 800173e:	dc0a      	bgt.n	8001756 <cosine+0x72>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3b5a      	subs	r3, #90	; 0x5a
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <cosine+0xd0>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	425b      	negs	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fa7e 	bl	8000c4c <__aeabi_i2f>
 8001750:	4603      	mov	r3, r0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	e024      	b.n	80017a0 <cosine+0xbc>
  else if(j>180 && j<271){out= -sine_data[270-j];}
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2bb4      	cmp	r3, #180	; 0xb4
 800175a:	dd0f      	ble.n	800177c <cosine+0x98>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001762:	dc0b      	bgt.n	800177c <cosine+0x98>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <cosine+0xd0>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	425b      	negs	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fa6b 	bl	8000c4c <__aeabi_i2f>
 8001776:	4603      	mov	r3, r0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	e011      	b.n	80017a0 <cosine+0xbc>
  else if(j>270 && j<361){out= sine_data[j-270];}
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001782:	dd0d      	ble.n	80017a0 <cosine+0xbc>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800178a:	dc09      	bgt.n	80017a0 <cosine+0xbc>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <cosine+0xd0>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fa54 	bl	8000c44 <__aeabi_ui2f>
 800179c:	4603      	mov	r3, r0
 800179e:	60bb      	str	r3, [r7, #8]
  return (out/255);
 80017a0:	4905      	ldr	r1, [pc, #20]	; (80017b8 <cosine+0xd4>)
 80017a2:	68b8      	ldr	r0, [r7, #8]
 80017a4:	f7ff fb5a 	bl	8000e5c <__aeabi_fdiv>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000004 	.word	0x20000004
 80017b8:	437f0000 	.word	0x437f0000

080017bc <FFT>:

void FFT(int* in, int* out, int N, float Frequency)
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b0ae      	sub	sp, #184	; 0xb8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  unsigned int data[13]={1,2,4,8,16,32,64,128,256,512,1024,2048};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2234      	movs	r2, #52	; 0x34
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f007 fd3c 	bl	8009250 <memset>
 80017d8:	2301      	movs	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	2304      	movs	r3, #4
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	2308      	movs	r3, #8
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	2310      	movs	r3, #16
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
 80017ec:	2320      	movs	r3, #32
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f0:	2340      	movs	r3, #64	; 0x40
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
 80017f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
 80017fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
 8001804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800180a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800180e:	643b      	str	r3, [r7, #64]	; 0x40
  int a,c1,f,o,x;
  a=N;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	677b      	str	r3, [r7, #116]	; 0x74
  for(int i=0;i<12;i++)                 //calculating the levels
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800181a:	e012      	b.n	8001842 <FFT+0x86>
  {
    if(data[i] <= a)
 800181c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	33b8      	adds	r3, #184	; 0xb8
 8001824:	443b      	add	r3, r7
 8001826:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 800182a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800182c:	429a      	cmp	r2, r3
 800182e:	d803      	bhi.n	8001838 <FFT+0x7c>
    {
      o=i;
 8001830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  for(int i=0;i<12;i++)                 //calculating the levels
 8001838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800183c:	3301      	adds	r3, #1
 800183e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001846:	2b0b      	cmp	r3, #11
 8001848:	dde8      	ble.n	800181c <FFT+0x60>
    }
  }

  int* in_ps;
  in_ps = calloc(data[o], sizeof(int));    //input for sequencing
 800184a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	33b8      	adds	r3, #184	; 0xb8
 8001852:	443b      	add	r3, r7
 8001854:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8001858:	2104      	movs	r1, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f007 fca8 	bl	80091b0 <calloc>
 8001860:	4603      	mov	r3, r0
 8001862:	673b      	str	r3, [r7, #112]	; 0x70
  float* out_r;
  out_r = calloc(data[o], sizeof(float));//real part of transform
 8001864:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	33b8      	adds	r3, #184	; 0xb8
 800186c:	443b      	add	r3, r7
 800186e:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8001872:	2104      	movs	r1, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f007 fc9b 	bl	80091b0 <calloc>
 800187a:	4603      	mov	r3, r0
 800187c:	66fb      	str	r3, [r7, #108]	; 0x6c
  float* out_im;
  out_im = calloc(data[o], sizeof(float));//imaginory part of transform
 800187e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	33b8      	adds	r3, #184	; 0xb8
 8001886:	443b      	add	r3, r7
 8001888:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 800188c:	2104      	movs	r1, #4
 800188e:	4618      	mov	r0, r3
 8001890:	f007 fc8e 	bl	80091b0 <calloc>
 8001894:	4603      	mov	r3, r0
 8001896:	66bb      	str	r3, [r7, #104]	; 0x68

  x=0;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  for(int b=0;b<o;b++)                     // bit reversal
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018a4:	e039      	b.n	800191a <FFT+0x15e>
  {
    c1=data[b];
 80018a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	33b8      	adds	r3, #184	; 0xb8
 80018ae:	443b      	add	r3, r7
 80018b0:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80018b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    f=data[o]/(c1+c1);
 80018b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	33b8      	adds	r3, #184	; 0xb8
 80018be:	443b      	add	r3, r7
 80018c0:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80018c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018c6:	0052      	lsls	r2, r2, #1
 80018c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
    for(int j=0;j<c1;j++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80018d4:	e017      	b.n	8001906 <FFT+0x14a>
    {
      x=x+1;
 80018d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018da:	3301      	adds	r3, #1
 80018dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      in_ps[x]=in_ps[j]+f;
 80018e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018e8:	4413      	add	r3, r2
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018f4:	4413      	add	r3, r2
 80018f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018f8:	440a      	add	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
    for(int j=0;j<c1;j++)
 80018fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001900:	3301      	adds	r3, #1
 8001902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001906:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800190a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800190c:	429a      	cmp	r2, r3
 800190e:	dbe2      	blt.n	80018d6 <FFT+0x11a>
  for(int b=0;b<o;b++)                     // bit reversal
 8001910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001914:	3301      	adds	r3, #1
 8001916:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800191a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800191e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001922:	429a      	cmp	r2, r3
 8001924:	dbbf      	blt.n	80018a6 <FFT+0xea>
    }
  }


  for(int i=0;i<data[o];i++)            // update input array as per bit reverse order
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800192c:	e040      	b.n	80019b0 <FFT+0x1f4>
  {
    if(in_ps[i]<a)
 800192e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001936:	4413      	add	r3, r2
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800193c:	429a      	cmp	r2, r3
 800193e:	dd13      	ble.n	8001968 <FFT+0x1ac>
    {
      out_r[i]=in[in_ps[i]];
 8001940:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001948:	4413      	add	r3, r2
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800195c:	18d4      	adds	r4, r2, r3
 800195e:	4608      	mov	r0, r1
 8001960:	f7ff f974 	bl	8000c4c <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	6023      	str	r3, [r4, #0]
    }
    if(in_ps[i]>a)
 8001968:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001970:	4413      	add	r3, r2
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001976:	429a      	cmp	r2, r3
 8001978:	da15      	bge.n	80019a6 <FFT+0x1ea>
    {
      out_r[i]=in[in_ps[i]-a];
 800197a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001982:	4413      	add	r3, r2
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800199a:	18d4      	adds	r4, r2, r3
 800199c:	4608      	mov	r0, r1
 800199e:	f7ff f955 	bl	8000c4c <__aeabi_i2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	6023      	str	r3, [r4, #0]
  for(int i=0;i<data[o];i++)            // update input array as per bit reverse order
 80019a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019aa:	3301      	adds	r3, #1
 80019ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	33b8      	adds	r3, #184	; 0xb8
 80019b8:	443b      	add	r3, r7
 80019ba:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 80019be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d8b3      	bhi.n	800192e <FFT+0x172>


  int i10,i11,n1;
  float e,c,s,tr,ti;

  for(int i=0;i<o;i++)                                    //fft
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019cc:	e110      	b.n	8001bf0 <FFT+0x434>
  {
	  i10=data[i];              // overall values of sine/cosine  :
 80019ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	33b8      	adds	r3, #184	; 0xb8
 80019d6:	443b      	add	r3, r7
 80019d8:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80019dc:	663b      	str	r3, [r7, #96]	; 0x60
	  i11=data[o]/data[i+1];    // loop with similar sine cosine:
 80019de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	33b8      	adds	r3, #184	; 0xb8
 80019e6:	443b      	add	r3, r7
 80019e8:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 80019ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019f0:	3301      	adds	r3, #1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	33b8      	adds	r3, #184	; 0xb8
 80019f6:	443b      	add	r3, r7
 80019f8:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	65fb      	str	r3, [r7, #92]	; 0x5c
	  e=360/data[i+1];
 8001a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a06:	3301      	adds	r3, #1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	33b8      	adds	r3, #184	; 0xb8
 8001a0c:	443b      	add	r3, r7
 8001a0e:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8001a12:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f912 	bl	8000c44 <__aeabi_ui2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	65bb      	str	r3, [r7, #88]	; 0x58
	  e=0-e;
 8001a24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f7ff f859 	bl	8000ae0 <__aeabi_fsub>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	65bb      	str	r3, [r7, #88]	; 0x58
	  n1=0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  for(int j=0;j<i10;j++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a3e:	e0cc      	b.n	8001bda <FFT+0x41e>
	  {
		  c=cosine(e*j);
 8001a40:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001a44:	f7ff f902 	bl	8000c4c <__aeabi_i2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f951 	bl	8000cf4 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fb13 	bl	8001080 <__aeabi_f2iz>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fe41 	bl	80016e4 <cosine>
 8001a62:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		  s=sine(e*j);
 8001a66:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001a6a:	f7ff f8ef 	bl	8000c4c <__aeabi_i2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f93e 	bl	8000cf4 <__aeabi_fmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb00 	bl	8001080 <__aeabi_f2iz>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fdc4 	bl	8001610 <sine>
 8001a88:	6678      	str	r0, [r7, #100]	; 0x64
		  n1=j;
 8001a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  for(int k=0;k<i11;k++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a98:	e094      	b.n	8001bc4 <FFT+0x408>
		  {
			  tr=c*out_r[i10+n1]-s*out_im[i10+n1];
 8001a9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001aa6:	4413      	add	r3, r2
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f920 	bl	8000cf4 <__aeabi_fmul>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461c      	mov	r4, r3
 8001ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ac4:	4413      	add	r3, r2
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f912 	bl	8000cf4 <__aeabi_fmul>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff f803 	bl	8000ae0 <__aeabi_fsub>
 8001ada:	4603      	mov	r3, r0
 8001adc:	657b      	str	r3, [r7, #84]	; 0x54
			  ti=s*out_r[i10+n1]+c*out_im[i10+n1];
 8001ade:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f8ff 	bl	8000cf4 <__aeabi_fmul>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461c      	mov	r4, r3
 8001afa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b06:	4413      	add	r3, r2
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f8f0 	bl	8000cf4 <__aeabi_fmul>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4619      	mov	r1, r3
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f7fe ffe3 	bl	8000ae4 <__addsf3>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50

			  out_r[n1+i10]=out_r[n1]-tr;
 8001b22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b2a:	4413      	add	r3, r2
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b3a:	18d4      	adds	r4, r2, r3
 8001b3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b3e:	f7fe ffcf 	bl	8000ae0 <__aeabi_fsub>
 8001b42:	4603      	mov	r3, r0
 8001b44:	6023      	str	r3, [r4, #0]
			  out_r[n1]=out_r[n1]+tr;
 8001b46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b4e:	4413      	add	r3, r2
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b5a:	18d4      	adds	r4, r2, r3
 8001b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b5e:	f7fe ffc1 	bl	8000ae4 <__addsf3>
 8001b62:	4603      	mov	r3, r0
 8001b64:	6023      	str	r3, [r4, #0]

			  out_im[n1+i10]=out_im[n1]-ti;
 8001b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b6e:	4413      	add	r3, r2
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b7e:	18d4      	adds	r4, r2, r3
 8001b80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b82:	f7fe ffad 	bl	8000ae0 <__aeabi_fsub>
 8001b86:	4603      	mov	r3, r0
 8001b88:	6023      	str	r3, [r4, #0]
			  out_im[n1]=out_im[n1]+ti;
 8001b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b92:	4413      	add	r3, r2
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b9e:	18d4      	adds	r4, r2, r3
 8001ba0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ba2:	f7fe ff9f 	bl	8000ae4 <__addsf3>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6023      	str	r3, [r4, #0]

			  n1=n1+i10+i10;
 8001baa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bb0:	4413      	add	r3, r2
 8001bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  for(int k=0;k<i11;k++)
 8001bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001bc4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	f6ff af65 	blt.w	8001a9a <FFT+0x2de>
	  for(int j=0;j<i10;j++)
 8001bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bda:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001be0:	429a      	cmp	r2, r3
 8001be2:	f6ff af2d 	blt.w	8001a40 <FFT+0x284>
  for(int i=0;i<o;i++)                                    //fft
 8001be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bea:	3301      	adds	r3, #1
 8001bec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bf0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f6ff aee8 	blt.w	80019ce <FFT+0x212>
		  }
	  }
  }

  for(int i=0;i<data[o-1];i++)               // getting amplitude from compex number
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c04:	e059      	b.n	8001cba <FFT+0x4fe>
      {
       out_r[i]=sqrt(out_r[i]*out_r[i]+out_im[i]*out_im[i]); // to  increase the speed delete sqrt
 8001c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c0e:	4413      	add	r3, r2
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7ff f868 	bl	8000cf4 <__aeabi_fmul>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461c      	mov	r4, r3
 8001c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c30:	4413      	add	r3, r2
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7ff f857 	bl	8000cf4 <__aeabi_fmul>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7fe ff4a 	bl	8000ae4 <__addsf3>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fbe8 	bl	8000428 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f008 fe32 	bl	800a8c8 <sqrt>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001c6c:	0089      	lsls	r1, r1, #2
 8001c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c70:	1844      	adds	r4, r0, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe fedf 	bl	8000a38 <__aeabi_d2f>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6023      	str	r3, [r4, #0]
       out_im[i]=i*Frequency/N;
 8001c7e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001c82:	f7fe ffe3 	bl	8000c4c <__aeabi_i2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f832 	bl	8000cf4 <__aeabi_fmul>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461d      	mov	r5, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7fe ffd9 	bl	8000c4c <__aeabi_i2f>
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ca4:	18d4      	adds	r4, r2, r3
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	f7ff f8d8 	bl	8000e5c <__aeabi_fdiv>
 8001cac:	4603      	mov	r3, r0
 8001cae:	6023      	str	r3, [r4, #0]
  for(int i=0;i<data[o-1];i++)               // getting amplitude from compex number
 8001cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	33b8      	adds	r3, #184	; 0xb8
 8001cc4:	443b      	add	r3, r7
 8001cc6:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8001cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d899      	bhi.n	8001c06 <FFT+0x44a>
      }
  x=0;       // peak detection
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  for(int i=1;i<data[o-1]-1;i++)
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001cde:	e039      	b.n	8001d54 <FFT+0x598>
  {
    if(out_r[i]>out_r[i-1] && out_r[i]>out_r[i+1])
 8001ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ce8:	4413      	add	r3, r2
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cfa:	4413      	add	r3, r2
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7ff f9b4 	bl	800106c <__aeabi_fcmpgt>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01f      	beq.n	8001d4a <FFT+0x58e>
 8001d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d12:	4413      	add	r3, r2
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d20:	4413      	add	r3, r2
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7ff f9a1 	bl	800106c <__aeabi_fcmpgt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00c      	beq.n	8001d4a <FFT+0x58e>
    {
    	in_ps[x]=i;    //in_ps array used for storage of peak number
 8001d30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d38:	4413      	add	r3, r2
 8001d3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d3e:	601a      	str	r2, [r3, #0]
    	x=x+1;
 8001d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d44:	3301      	adds	r3, #1
 8001d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  for(int i=1;i<data[o-1]-1;i++)
 8001d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	33b8      	adds	r3, #184	; 0xb8
 8001d5e:	443b      	add	r3, r7
 8001d60:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d8b8      	bhi.n	8001ce0 <FFT+0x524>
    }
  }


  s=0;
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	667b      	str	r3, [r7, #100]	; 0x64
  c=0;
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  for(int i=0;i<x;i++)             // re arraange as per magnitude
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d82:	e054      	b.n	8001e2e <FFT+0x672>
  {
      for(int j=c;j<x;j++)
 8001d84:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001d88:	f7ff f97a 	bl	8001080 <__aeabi_f2iz>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d90:	e03a      	b.n	8001e08 <FFT+0x64c>
      {
          if(out_r[in_ps[i]]<out_r[in_ps[j]])
 8001d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d9a:	4413      	add	r3, r2
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001da2:	4413      	add	r3, r2
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001dac:	4413      	add	r3, r2
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001db4:	4413      	add	r3, r2
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7ff f939 	bl	8001030 <__aeabi_fcmplt>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01e      	beq.n	8001e02 <FFT+0x646>
              {s=in_ps[i];
 8001dc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001dcc:	4413      	add	r3, r2
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe ff3b 	bl	8000c4c <__aeabi_i2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	667b      	str	r3, [r7, #100]	; 0x64
              in_ps[i]=in_ps[j];
 8001dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001de0:	441a      	add	r2, r3
 8001de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001dea:	440b      	add	r3, r1
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	601a      	str	r2, [r3, #0]
              in_ps[j]=s;}
 8001df0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001df6:	18d4      	adds	r4, r2, r3
 8001df8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001dfa:	f7ff f941 	bl	8001080 <__aeabi_f2iz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6023      	str	r3, [r4, #0]
      for(int j=c;j<x;j++)
 8001e02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e04:	3301      	adds	r3, #1
 8001e06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbbf      	blt.n	8001d92 <FFT+0x5d6>
      }
      c=c+1;
 8001e12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e16:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001e1a:	f7fe fe63 	bl	8000ae4 <__addsf3>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  for(int i=0;i<x;i++)             // re arraange as per magnitude
 8001e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dba4      	blt.n	8001d84 <FFT+0x5c8>
  }
  for(int i = 0; i < data[o-1]; i++){
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e3e:	e010      	b.n	8001e62 <FFT+0x6a6>
	  out[i] = out_r[i];
 8001e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e46:	4413      	add	r3, r2
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	18d4      	adds	r4, r2, r3
 8001e52:	4608      	mov	r0, r1
 8001e54:	f7ff f914 	bl	8001080 <__aeabi_f2iz>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	6023      	str	r3, [r4, #0]
  for(int i = 0; i < data[o-1]; i++){
 8001e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e5e:	3301      	adds	r3, #1
 8001e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e66:	3b01      	subs	r3, #1
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	33b8      	adds	r3, #184	; 0xb8
 8001e6c:	443b      	add	r3, r7
 8001e6e:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8001e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8e3      	bhi.n	8001e40 <FFT+0x684>
  }
  free(in_ps);
 8001e78:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001e7a:	f007 f9d3 	bl	8009224 <free>
  free(out_r);
 8001e7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e80:	f007 f9d0 	bl	8009224 <free>
  free(out_im);
 8001e84:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001e86:	f007 f9cd 	bl	8009224 <free>
}
 8001e8a:	bf00      	nop
 8001e8c:	37b8      	adds	r7, #184	; 0xb8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001e94 <FlashPROM_Init>:
#include "FlashPROM.h"

uint16_t BUFFSIZE = 0;

void FlashPROM_Init(uint16_t buffsize){
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
	BUFFSIZE = buffsize;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <FlashPROM_Init+0x1c>)
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	8013      	strh	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200004a4 	.word	0x200004a4

08001eb4 <FlashPROM_Write16>:
//
//	for(int i = 0; i < BUFFSIZE; i++)
//		buff[i] = *(__IO uint32_t*)(READ_ADDR + i);
//}

void FlashPROM_Write16(uint16_t* buff){
 8001eb4:	b5b0      	push	{r4, r5, r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	uint32_t WRITE_ADDR = START_ADDR;
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <FlashPROM_Write16+0xa4>)
 8001ebe:	60fb      	str	r3, [r7, #12]
	while(WRITE_ADDR < END_ADDR){
 8001ec0:	e00b      	b.n	8001eda <FlashPROM_Write16+0x26>
		if(*(__IO uint32_t*)WRITE_ADDR != 0xFFFFFFFF)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eca:	d00b      	beq.n	8001ee4 <FlashPROM_Write16+0x30>
			WRITE_ADDR += BUFFSIZE * 2;
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <FlashPROM_Write16+0xa8>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
	while(WRITE_ADDR < END_ADDR){
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <FlashPROM_Write16+0xac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d3ef      	bcc.n	8001ec2 <FlashPROM_Write16+0xe>
 8001ee2:	e000      	b.n	8001ee6 <FlashPROM_Write16+0x32>
		else break;
 8001ee4:	bf00      	nop
	}

	if((WRITE_ADDR > END_ADDR) || (WRITE_ADDR + BUFFSIZE * 2 > END_ADDR)){
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <FlashPROM_Write16+0xac>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d808      	bhi.n	8001f00 <FlashPROM_Write16+0x4c>
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <FlashPROM_Write16+0xa8>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <FlashPROM_Write16+0xac>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d903      	bls.n	8001f08 <FlashPROM_Write16+0x54>
		EraseFlash();
 8001f00:	f000 f882 	bl	8002008 <EraseFlash>
		WRITE_ADDR = START_ADDR;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <FlashPROM_Write16+0xa4>)
 8001f06:	60fb      	str	r3, [r7, #12]
	}

	HAL_FLASH_Unlock();
 8001f08:	f004 fb1a 	bl	8006540 <HAL_FLASH_Unlock>
	for(int i = 0; i < BUFFSIZE; i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	e015      	b.n	8001f3e <FlashPROM_Write16+0x8a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, WRITE_ADDR + i*2, buff[i]);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	18d1      	adds	r1, r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2200      	movs	r2, #0
 8001f2a:	461c      	mov	r4, r3
 8001f2c:	4615      	mov	r5, r2
 8001f2e:	4622      	mov	r2, r4
 8001f30:	462b      	mov	r3, r5
 8001f32:	2001      	movs	r0, #1
 8001f34:	f004 fa94 	bl	8006460 <HAL_FLASH_Program>
	for(int i = 0; i < BUFFSIZE; i++)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <FlashPROM_Write16+0xa8>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	dbe3      	blt.n	8001f12 <FlashPROM_Write16+0x5e>
	HAL_FLASH_Lock();
 8001f4a:	f004 fb1f 	bl	800658c <HAL_FLASH_Lock>
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	0801fc00 	.word	0x0801fc00
 8001f5c:	200004a4 	.word	0x200004a4
 8001f60:	0801ffff 	.word	0x0801ffff

08001f64 <FlashPROM_Read16>:

void FlashPROM_Read16(uint16_t* buff){
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	uint32_t READ_ADDR = START_ADDR;
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <FlashPROM_Read16+0x98>)
 8001f6e:	60fb      	str	r3, [r7, #12]
	while(READ_ADDR < END_ADDR){
 8001f70:	e010      	b.n	8001f94 <FlashPROM_Read16+0x30>
		if(*(__IO uint32_t*)(READ_ADDR + BUFFSIZE * 2) != 0xFFFFFFFF)
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <FlashPROM_Read16+0x9c>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d00b      	beq.n	8001f9e <FlashPROM_Read16+0x3a>
			READ_ADDR += BUFFSIZE * 2;
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <FlashPROM_Read16+0x9c>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4413      	add	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
	while(READ_ADDR < END_ADDR){
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <FlashPROM_Read16+0xa0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d3ea      	bcc.n	8001f72 <FlashPROM_Read16+0xe>
 8001f9c:	e000      	b.n	8001fa0 <FlashPROM_Read16+0x3c>
		else break;
 8001f9e:	bf00      	nop
	}

	if((READ_ADDR > END_ADDR) || (READ_ADDR + BUFFSIZE * 2 > END_ADDR)){
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a18      	ldr	r2, [pc, #96]	; (8002004 <FlashPROM_Read16+0xa0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d808      	bhi.n	8001fba <FlashPROM_Read16+0x56>
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <FlashPROM_Read16+0x9c>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <FlashPROM_Read16+0xa0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <FlashPROM_Read16+0x5a>
		READ_ADDR = START_ADDR;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <FlashPROM_Read16+0x98>)
 8001fbc:	60fb      	str	r3, [r7, #12]
	}

	for(int i = 0; i < BUFFSIZE; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	e00e      	b.n	8001fe2 <FlashPROM_Read16+0x7e>
		buff[i] = *(__IO uint32_t*)(READ_ADDR + i*2);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b28a      	uxth	r2, r1
 8001fda:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < BUFFSIZE; i++)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <FlashPROM_Read16+0x9c>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4293      	cmp	r3, r2
 8001fec:	dbea      	blt.n	8001fc4 <FlashPROM_Read16+0x60>
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	0801fc00 	.word	0x0801fc00
 8002000:	200004a4 	.word	0x200004a4
 8002004:	0801ffff 	.word	0x0801ffff

08002008 <EraseFlash>:

void EraseFlash(){
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <EraseFlash+0x38>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = START_ADDR;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <EraseFlash+0x38>)
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <EraseFlash+0x3c>)
 8002018:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <EraseFlash+0x38>)
 800201c:	2201      	movs	r2, #1
 800201e:	60da      	str	r2, [r3, #12]

	uint32_t page_error = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]

	HAL_FLASH_Unlock();
 8002024:	f004 fa8c 	bl	8006540 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	4619      	mov	r1, r3
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <EraseFlash+0x38>)
 800202e:	f004 fb6f 	bl	8006710 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8002032:	f004 faab 	bl	800658c <HAL_FLASH_Lock>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200004a8 	.word	0x200004a8
 8002044:	0801fc00 	.word	0x0801fc00

08002048 <WS2812B_Init>:
uint8_t NUM_LEDS = 60;
uint16_t PWM_buff[PWM_BUFF_LENGTH];

WS2812B_t leds[MAX_NUM_LEDS] = {0};

void WS2812B_Init(uint8_t num_leds, uint8_t brightness){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	71bb      	strb	r3, [r7, #6]
	WS2812B_SetNumLeds(num_leds);
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f874 	bl	8002148 <WS2812B_SetNumLeds>
	WS2812B_SetDelay(DELAY);
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <WS2812B_Init+0x60>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f825 	bl	80020b4 <WS2812B_SetDelay>

	for(int i = 0; i < NUM_LEDS; i++)
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e00b      	b.n	8002088 <WS2812B_Init+0x40>
		WS2812B_SetPixelRGB(leds, 0, 0, 0, i);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <WS2812B_Init+0x64>)
 800207e:	f000 f8cf 	bl	8002220 <WS2812B_SetPixelRGB>
	for(int i = 0; i < NUM_LEDS; i++)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <WS2812B_Init+0x68>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4293      	cmp	r3, r2
 8002092:	dbed      	blt.n	8002070 <WS2812B_Init+0x28>
	WS2812B_SetBrightness(brightness);
 8002094:	79bb      	ldrb	r3, [r7, #6]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f830 	bl	80020fc <WS2812B_SetBrightness>
	WS2812B_Show();
 800209c:	f000 f890 	bl	80021c0 <WS2812B_Show>
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000060 	.word	0x20000060
 80020ac:	200026e4 	.word	0x200026e4
 80020b0:	20000063 	.word	0x20000063

080020b4 <WS2812B_SetDelay>:

void WS2812B_SetDelay(uint16_t delay){
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
	DELAY = delay;
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <WS2812B_SetDelay+0x1c>)
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	8013      	strh	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000060 	.word	0x20000060

080020d4 <WS2812B_SetPixelBrightness>:

void WS2812B_SetPixelBrightness(WS2812B_t* layer, uint8_t brightness, uint8_t led_pos){
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
 80020e0:	4613      	mov	r3, r2
 80020e2:	70bb      	strb	r3, [r7, #2]
	layer[led_pos].brightness = brightness;
 80020e4:	78bb      	ldrb	r3, [r7, #2]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	70da      	strb	r2, [r3, #3]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
	...

080020fc <WS2812B_SetBrightness>:

void WS2812B_SetBrightness(uint8_t brightness){
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
	BRIGHTNESS = brightness;
 8002106:	4a0d      	ldr	r2, [pc, #52]	; (800213c <WS2812B_SetBrightness+0x40>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < NUM_LEDS; i++)
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e008      	b.n	8002124 <WS2812B_SetBrightness+0x28>
		leds[i].brightness = brightness;
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <WS2812B_SetBrightness+0x44>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < NUM_LEDS; i++)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <WS2812B_SetBrightness+0x48>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4293      	cmp	r3, r2
 800212e:	dbf0      	blt.n	8002112 <WS2812B_SetBrightness+0x16>
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	20000062 	.word	0x20000062
 8002140:	200026e4 	.word	0x200026e4
 8002144:	20000063 	.word	0x20000063

08002148 <WS2812B_SetNumLeds>:

void WS2812B_SetNumLeds(uint8_t num_leds){
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af02      	add	r7, sp, #8
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
	NUM_LEDS = num_leds;
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <WS2812B_SetNumLeds+0x68>)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < MAX_NUM_LEDS; i++)
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e00b      	b.n	8002176 <WS2812B_SetNumLeds+0x2e>
		WS2812B_SetPixelRGB(leds, 0, 0, 0, i);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2300      	movs	r3, #0
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	4812      	ldr	r0, [pc, #72]	; (80021b4 <WS2812B_SetNumLeds+0x6c>)
 800216c:	f000 f858 	bl	8002220 <WS2812B_SetPixelRGB>
	for(int i = 0; i < MAX_NUM_LEDS; i++)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3301      	adds	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2bb3      	cmp	r3, #179	; 0xb3
 800217a:	ddf0      	ble.n	800215e <WS2812B_SetNumLeds+0x16>
	WS2812B_SetBrightness(BRIGHTNESS);
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <WS2812B_SetNumLeds+0x70>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffbb 	bl	80020fc <WS2812B_SetBrightness>
	for(int i = 0; i < PWM_BUFF_LENGTH - RESET_BITS; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	e007      	b.n	800219c <WS2812B_SetNumLeds+0x54>
		PWM_buff[i] = LOW;
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <WS2812B_SetNumLeds+0x74>)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	211d      	movs	r1, #29
 8002192:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < PWM_BUFF_LENGTH - RESET_BITS; i++)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3301      	adds	r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f5b3 5f87 	cmp.w	r3, #4320	; 0x10e0
 80021a2:	dbf3      	blt.n	800218c <WS2812B_SetNumLeds+0x44>
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000063 	.word	0x20000063
 80021b4:	200026e4 	.word	0x200026e4
 80021b8:	20000062 	.word	0x20000062
 80021bc:	200004c0 	.word	0x200004c0

080021c0 <WS2812B_Show>:
ShowStatus WS2812B_Show(){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - T) > DELAY){
 80021c4:	f003 f970 	bl	80054a8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <WS2812B_Show+0x4c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <WS2812B_Show+0x50>)
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d916      	bls.n	8002206 <WS2812B_Show+0x46>
		if(STATE != WS2812B_BUSY){
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <WS2812B_Show+0x54>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d012      	beq.n	8002206 <WS2812B_Show+0x46>
			RGB_to_GRB_PWM();
 80021e0:	f000 fa10 	bl	8002604 <RGB_to_GRB_PWM>
			HAL_TIM_PWM_Start_DMA(H_TIM, T_CH, (uint32_t*)PWM_buff, PWM_BUFF_LENGTH);
 80021e4:	f241 1312 	movw	r3, #4370	; 0x1112
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <WS2812B_Show+0x58>)
 80021ea:	2100      	movs	r1, #0
 80021ec:	480b      	ldr	r0, [pc, #44]	; (800221c <WS2812B_Show+0x5c>)
 80021ee:	f005 fa75 	bl	80076dc <HAL_TIM_PWM_Start_DMA>
			STATE = WS2812B_BUSY;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <WS2812B_Show+0x54>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
			T = HAL_GetTick();
 80021f8:	f003 f956 	bl	80054a8 <HAL_GetTick>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a03      	ldr	r2, [pc, #12]	; (800220c <WS2812B_Show+0x4c>)
 8002200:	6013      	str	r3, [r2, #0]
			return SHOW_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <WS2812B_Show+0x48>
		}
	}
	return SHOW_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200004b8 	.word	0x200004b8
 8002210:	20000060 	.word	0x20000060
 8002214:	200004bc 	.word	0x200004bc
 8002218:	200004c0 	.word	0x200004c0
 800221c:	2000349c 	.word	0x2000349c

08002220 <WS2812B_SetPixelRGB>:

void WS2812B_SetPixelRGB(WS2812B_t* layer, uint8_t R, uint8_t G, uint8_t B, uint8_t led_pos){
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	4608      	mov	r0, r1
 800222a:	4611      	mov	r1, r2
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	70fb      	strb	r3, [r7, #3]
 8002232:	460b      	mov	r3, r1
 8002234:	70bb      	strb	r3, [r7, #2]
 8002236:	4613      	mov	r3, r2
 8002238:	707b      	strb	r3, [r7, #1]
	layer[led_pos].R = R;
 800223a:	7c3b      	ldrb	r3, [r7, #16]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	701a      	strb	r2, [r3, #0]
	layer[led_pos].G = G;
 8002246:	7c3b      	ldrb	r3, [r7, #16]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	78ba      	ldrb	r2, [r7, #2]
 8002250:	705a      	strb	r2, [r3, #1]
	layer[led_pos].B = B;
 8002252:	7c3b      	ldrb	r3, [r7, #16]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	787a      	ldrb	r2, [r7, #1]
 800225c:	709a      	strb	r2, [r3, #2]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <WS2812B_SetPixelHSV>:

void WS2812B_SetPixelHSV(WS2812B_t* layer, uint8_t h, uint8_t s, uint8_t v, uint8_t led_pos){
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b08d      	sub	sp, #52	; 0x34
 800226c:	af02      	add	r7, sp, #8
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4603      	mov	r3, r0
 8002278:	70fb      	strb	r3, [r7, #3]
 800227a:	460b      	mov	r3, r1
 800227c:	70bb      	strb	r3, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	707b      	strb	r3, [r7, #1]
	float H = interpolation(0, 255, 0, 360, h);
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fcdd 	bl	8000c44 <__aeabi_ui2f>
 800228a:	4603      	mov	r3, r0
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	4bb6      	ldr	r3, [pc, #728]	; (8002568 <WS2812B_SetPixelHSV+0x300>)
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	49b5      	ldr	r1, [pc, #724]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 8002296:	f04f 0000 	mov.w	r0, #0
 800229a:	f000 fac7 	bl	800282c <interpolation>
 800229e:	6278      	str	r0, [r7, #36]	; 0x24
	float S = interpolation(0, 255, 0, 1, s);
 80022a0:	78bb      	ldrb	r3, [r7, #2]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fcce 	bl	8000c44 <__aeabi_ui2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	49ad      	ldr	r1, [pc, #692]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f000 fab7 	bl	800282c <interpolation>
 80022be:	6238      	str	r0, [r7, #32]
	float V = interpolation(0, 255, 0, 1, v);
 80022c0:	787b      	ldrb	r3, [r7, #1]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fcbe 	bl	8000c44 <__aeabi_ui2f>
 80022c8:	4603      	mov	r3, r0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	49a5      	ldr	r1, [pc, #660]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 80022d6:	f04f 0000 	mov.w	r0, #0
 80022da:	f000 faa7 	bl	800282c <interpolation>
 80022de:	61f8      	str	r0, [r7, #28]
	if(S == 0){
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	6a38      	ldr	r0, [r7, #32]
 80022e6:	f7fe fe99 	bl	800101c <__aeabi_fcmpeq>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d033      	beq.n	8002358 <WS2812B_SetPixelHSV+0xf0>
		layer[led_pos].R = V * 255;
 80022f0:	499e      	ldr	r1, [pc, #632]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 80022f2:	69f8      	ldr	r0, [r7, #28]
 80022f4:	f7fe fcfe 	bl	8000cf4 <__aeabi_fmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4619      	mov	r1, r3
 80022fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	18d4      	adds	r4, r2, r3
 8002306:	4608      	mov	r0, r1
 8002308:	f7fe fee0 	bl	80010cc <__aeabi_f2uiz>
 800230c:	4603      	mov	r3, r0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	7023      	strb	r3, [r4, #0]
		layer[led_pos].G = V * 255;
 8002312:	4996      	ldr	r1, [pc, #600]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 8002314:	69f8      	ldr	r0, [r7, #28]
 8002316:	f7fe fced 	bl	8000cf4 <__aeabi_fmul>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	18d4      	adds	r4, r2, r3
 8002328:	4608      	mov	r0, r1
 800232a:	f7fe fecf 	bl	80010cc <__aeabi_f2uiz>
 800232e:	4603      	mov	r3, r0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	7063      	strb	r3, [r4, #1]
		layer[led_pos].B = V * 255;
 8002334:	498d      	ldr	r1, [pc, #564]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 8002336:	69f8      	ldr	r0, [r7, #28]
 8002338:	f7fe fcdc 	bl	8000cf4 <__aeabi_fmul>
 800233c:	4603      	mov	r3, r0
 800233e:	4619      	mov	r1, r3
 8002340:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	18d4      	adds	r4, r2, r3
 800234a:	4608      	mov	r0, r1
 800234c:	f7fe febe 	bl	80010cc <__aeabi_f2uiz>
 8002350:	4603      	mov	r3, r0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	70a3      	strb	r3, [r4, #2]
		return;
 8002356:	e151      	b.n	80025fc <WS2812B_SetPixelHSV+0x394>
	}
	float sector = floor (H / 60);
 8002358:	4985      	ldr	r1, [pc, #532]	; (8002570 <WS2812B_SetPixelHSV+0x308>)
 800235a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800235c:	f7fe fd7e 	bl	8000e5c <__aeabi_fdiv>
 8002360:	4603      	mov	r3, r0
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f860 	bl	8000428 <__aeabi_f2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f008 fa2a 	bl	800a7c8 <floor>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fb5c 	bl	8000a38 <__aeabi_d2f>
 8002380:	4603      	mov	r3, r0
 8002382:	61bb      	str	r3, [r7, #24]
	float frac = H / 60 - sector;
 8002384:	497a      	ldr	r1, [pc, #488]	; (8002570 <WS2812B_SetPixelHSV+0x308>)
 8002386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002388:	f7fe fd68 	bl	8000e5c <__aeabi_fdiv>
 800238c:	4603      	mov	r3, r0
 800238e:	69b9      	ldr	r1, [r7, #24]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fba5 	bl	8000ae0 <__aeabi_fsub>
 8002396:	4603      	mov	r3, r0
 8002398:	617b      	str	r3, [r7, #20]
	float T = (V * (1 - S)) * 255;
 800239a:	6a39      	ldr	r1, [r7, #32]
 800239c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023a0:	f7fe fb9e 	bl	8000ae0 <__aeabi_fsub>
 80023a4:	4603      	mov	r3, r0
 80023a6:	69f9      	ldr	r1, [r7, #28]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fca3 	bl	8000cf4 <__aeabi_fmul>
 80023ae:	4603      	mov	r3, r0
 80023b0:	496e      	ldr	r1, [pc, #440]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fc9e 	bl	8000cf4 <__aeabi_fmul>
 80023b8:	4603      	mov	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]
	float P = (V * (1 - S * frac)) * 255;
 80023bc:	6979      	ldr	r1, [r7, #20]
 80023be:	6a38      	ldr	r0, [r7, #32]
 80023c0:	f7fe fc98 	bl	8000cf4 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023cc:	f7fe fb88 	bl	8000ae0 <__aeabi_fsub>
 80023d0:	4603      	mov	r3, r0
 80023d2:	69f9      	ldr	r1, [r7, #28]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fc8d 	bl	8000cf4 <__aeabi_fmul>
 80023da:	4603      	mov	r3, r0
 80023dc:	4963      	ldr	r1, [pc, #396]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fc88 	bl	8000cf4 <__aeabi_fmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]
	float Q = (V * (1 - S * (1 - frac))) * 255;
 80023e8:	6979      	ldr	r1, [r7, #20]
 80023ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023ee:	f7fe fb77 	bl	8000ae0 <__aeabi_fsub>
 80023f2:	4603      	mov	r3, r0
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fc7c 	bl	8000cf4 <__aeabi_fmul>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4619      	mov	r1, r3
 8002400:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002404:	f7fe fb6c 	bl	8000ae0 <__aeabi_fsub>
 8002408:	4603      	mov	r3, r0
 800240a:	69f9      	ldr	r1, [r7, #28]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fc71 	bl	8000cf4 <__aeabi_fmul>
 8002412:	4603      	mov	r3, r0
 8002414:	4955      	ldr	r1, [pc, #340]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fc6c 	bl	8000cf4 <__aeabi_fmul>
 800241c:	4603      	mov	r3, r0
 800241e:	60bb      	str	r3, [r7, #8]
	V = V * 255;
 8002420:	4952      	ldr	r1, [pc, #328]	; (800256c <WS2812B_SetPixelHSV+0x304>)
 8002422:	69f8      	ldr	r0, [r7, #28]
 8002424:	f7fe fc66 	bl	8000cf4 <__aeabi_fmul>
 8002428:	4603      	mov	r3, r0
 800242a:	61fb      	str	r3, [r7, #28]

	switch((int)sector)
 800242c:	69b8      	ldr	r0, [r7, #24]
 800242e:	f7fe fe27 	bl	8001080 <__aeabi_f2iz>
 8002432:	4603      	mov	r3, r0
 8002434:	2b05      	cmp	r3, #5
 8002436:	f200 80e1 	bhi.w	80025fc <WS2812B_SetPixelHSV+0x394>
 800243a:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <WS2812B_SetPixelHSV+0x1d8>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002459 	.word	0x08002459
 8002444:	0800249d 	.word	0x0800249d
 8002448:	080024e1 	.word	0x080024e1
 800244c:	08002525 	.word	0x08002525
 8002450:	08002575 	.word	0x08002575
 8002454:	080025b9 	.word	0x080025b9
	{
		case 0: layer[led_pos].R = V; layer[led_pos].G = Q; layer[led_pos].B = T; break;
 8002458:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	18d4      	adds	r4, r2, r3
 8002462:	69f8      	ldr	r0, [r7, #28]
 8002464:	f7fe fe32 	bl	80010cc <__aeabi_f2uiz>
 8002468:	4603      	mov	r3, r0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	7023      	strb	r3, [r4, #0]
 800246e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	18d4      	adds	r4, r2, r3
 8002478:	68b8      	ldr	r0, [r7, #8]
 800247a:	f7fe fe27 	bl	80010cc <__aeabi_f2uiz>
 800247e:	4603      	mov	r3, r0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	7063      	strb	r3, [r4, #1]
 8002484:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	18d4      	adds	r4, r2, r3
 800248e:	6938      	ldr	r0, [r7, #16]
 8002490:	f7fe fe1c 	bl	80010cc <__aeabi_f2uiz>
 8002494:	4603      	mov	r3, r0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	70a3      	strb	r3, [r4, #2]
 800249a:	e0af      	b.n	80025fc <WS2812B_SetPixelHSV+0x394>
		case 1: layer[led_pos].R = P; layer[led_pos].G = V; layer[led_pos].B = T; break;
 800249c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	18d4      	adds	r4, r2, r3
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7fe fe10 	bl	80010cc <__aeabi_f2uiz>
 80024ac:	4603      	mov	r3, r0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	7023      	strb	r3, [r4, #0]
 80024b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	18d4      	adds	r4, r2, r3
 80024bc:	69f8      	ldr	r0, [r7, #28]
 80024be:	f7fe fe05 	bl	80010cc <__aeabi_f2uiz>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	7063      	strb	r3, [r4, #1]
 80024c8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	18d4      	adds	r4, r2, r3
 80024d2:	6938      	ldr	r0, [r7, #16]
 80024d4:	f7fe fdfa 	bl	80010cc <__aeabi_f2uiz>
 80024d8:	4603      	mov	r3, r0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	70a3      	strb	r3, [r4, #2]
 80024de:	e08d      	b.n	80025fc <WS2812B_SetPixelHSV+0x394>
		case 2: layer[led_pos].R = T; layer[led_pos].G = V; layer[led_pos].B = Q; break;
 80024e0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	18d4      	adds	r4, r2, r3
 80024ea:	6938      	ldr	r0, [r7, #16]
 80024ec:	f7fe fdee 	bl	80010cc <__aeabi_f2uiz>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	7023      	strb	r3, [r4, #0]
 80024f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	18d4      	adds	r4, r2, r3
 8002500:	69f8      	ldr	r0, [r7, #28]
 8002502:	f7fe fde3 	bl	80010cc <__aeabi_f2uiz>
 8002506:	4603      	mov	r3, r0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	7063      	strb	r3, [r4, #1]
 800250c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	18d4      	adds	r4, r2, r3
 8002516:	68b8      	ldr	r0, [r7, #8]
 8002518:	f7fe fdd8 	bl	80010cc <__aeabi_f2uiz>
 800251c:	4603      	mov	r3, r0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	70a3      	strb	r3, [r4, #2]
 8002522:	e06b      	b.n	80025fc <WS2812B_SetPixelHSV+0x394>
		case 3: layer[led_pos].R = T; layer[led_pos].G = P; layer[led_pos].B = V; break;
 8002524:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	18d4      	adds	r4, r2, r3
 800252e:	6938      	ldr	r0, [r7, #16]
 8002530:	f7fe fdcc 	bl	80010cc <__aeabi_f2uiz>
 8002534:	4603      	mov	r3, r0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	7023      	strb	r3, [r4, #0]
 800253a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	18d4      	adds	r4, r2, r3
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7fe fdc1 	bl	80010cc <__aeabi_f2uiz>
 800254a:	4603      	mov	r3, r0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	7063      	strb	r3, [r4, #1]
 8002550:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	18d4      	adds	r4, r2, r3
 800255a:	69f8      	ldr	r0, [r7, #28]
 800255c:	f7fe fdb6 	bl	80010cc <__aeabi_f2uiz>
 8002560:	4603      	mov	r3, r0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	70a3      	strb	r3, [r4, #2]
 8002566:	e049      	b.n	80025fc <WS2812B_SetPixelHSV+0x394>
 8002568:	43b40000 	.word	0x43b40000
 800256c:	437f0000 	.word	0x437f0000
 8002570:	42700000 	.word	0x42700000
		case 4: layer[led_pos].R = Q; layer[led_pos].G = T; layer[led_pos].B = V; break;
 8002574:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	18d4      	adds	r4, r2, r3
 800257e:	68b8      	ldr	r0, [r7, #8]
 8002580:	f7fe fda4 	bl	80010cc <__aeabi_f2uiz>
 8002584:	4603      	mov	r3, r0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	7023      	strb	r3, [r4, #0]
 800258a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	18d4      	adds	r4, r2, r3
 8002594:	6938      	ldr	r0, [r7, #16]
 8002596:	f7fe fd99 	bl	80010cc <__aeabi_f2uiz>
 800259a:	4603      	mov	r3, r0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	7063      	strb	r3, [r4, #1]
 80025a0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	18d4      	adds	r4, r2, r3
 80025aa:	69f8      	ldr	r0, [r7, #28]
 80025ac:	f7fe fd8e 	bl	80010cc <__aeabi_f2uiz>
 80025b0:	4603      	mov	r3, r0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	70a3      	strb	r3, [r4, #2]
 80025b6:	e021      	b.n	80025fc <WS2812B_SetPixelHSV+0x394>
		case 5: layer[led_pos].R = V; layer[led_pos].G = T; layer[led_pos].B = P; break;
 80025b8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	18d4      	adds	r4, r2, r3
 80025c2:	69f8      	ldr	r0, [r7, #28]
 80025c4:	f7fe fd82 	bl	80010cc <__aeabi_f2uiz>
 80025c8:	4603      	mov	r3, r0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	7023      	strb	r3, [r4, #0]
 80025ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	18d4      	adds	r4, r2, r3
 80025d8:	6938      	ldr	r0, [r7, #16]
 80025da:	f7fe fd77 	bl	80010cc <__aeabi_f2uiz>
 80025de:	4603      	mov	r3, r0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	7063      	strb	r3, [r4, #1]
 80025e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	18d4      	adds	r4, r2, r3
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7fe fd6c 	bl	80010cc <__aeabi_f2uiz>
 80025f4:	4603      	mov	r3, r0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	70a3      	strb	r3, [r4, #2]
 80025fa:	bf00      	nop
	}
}
 80025fc:	372c      	adds	r7, #44	; 0x2c
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	bf00      	nop

08002604 <RGB_to_GRB_PWM>:



//----------------
void RGB_to_GRB_PWM(){
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b087      	sub	sp, #28
 8002608:	af02      	add	r7, sp, #8
	for(int i = 0; i < NUM_LEDS; i++){
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	e0e0      	b.n	80027d2 <RGB_to_GRB_PWM+0x1ce>
		uint8_t r = leds[i].R;
 8002610:	4a76      	ldr	r2, [pc, #472]	; (80027ec <RGB_to_GRB_PWM+0x1e8>)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8002618:	71fb      	strb	r3, [r7, #7]
		r = interpolation(0, 255, 0, leds[i].brightness, r);
 800261a:	4a74      	ldr	r2, [pc, #464]	; (80027ec <RGB_to_GRB_PWM+0x1e8>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	78db      	ldrb	r3, [r3, #3]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fb0d 	bl	8000c44 <__aeabi_ui2f>
 800262a:	4604      	mov	r4, r0
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fb08 	bl	8000c44 <__aeabi_ui2f>
 8002634:	4603      	mov	r3, r0
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	4623      	mov	r3, r4
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	496c      	ldr	r1, [pc, #432]	; (80027f0 <RGB_to_GRB_PWM+0x1ec>)
 8002640:	f04f 0000 	mov.w	r0, #0
 8002644:	f000 f8f2 	bl	800282c <interpolation>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fd3e 	bl	80010cc <__aeabi_f2uiz>
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
		uint8_t g = leds[i].G;
 8002654:	4a65      	ldr	r2, [pc, #404]	; (80027ec <RGB_to_GRB_PWM+0x1e8>)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	71bb      	strb	r3, [r7, #6]
		g = interpolation(0, 255, 0, leds[i].brightness, g);
 8002660:	4a62      	ldr	r2, [pc, #392]	; (80027ec <RGB_to_GRB_PWM+0x1e8>)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	78db      	ldrb	r3, [r3, #3]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe faea 	bl	8000c44 <__aeabi_ui2f>
 8002670:	4604      	mov	r4, r0
 8002672:	79bb      	ldrb	r3, [r7, #6]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fae5 	bl	8000c44 <__aeabi_ui2f>
 800267a:	4603      	mov	r3, r0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4623      	mov	r3, r4
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	495a      	ldr	r1, [pc, #360]	; (80027f0 <RGB_to_GRB_PWM+0x1ec>)
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f000 f8cf 	bl	800282c <interpolation>
 800268e:	4603      	mov	r3, r0
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fd1b 	bl	80010cc <__aeabi_f2uiz>
 8002696:	4603      	mov	r3, r0
 8002698:	71bb      	strb	r3, [r7, #6]
		uint8_t b = leds[i].B;
 800269a:	4a54      	ldr	r2, [pc, #336]	; (80027ec <RGB_to_GRB_PWM+0x1e8>)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	789b      	ldrb	r3, [r3, #2]
 80026a4:	717b      	strb	r3, [r7, #5]
		b = interpolation(0, 255, 0, leds[i].brightness, b);
 80026a6:	4a51      	ldr	r2, [pc, #324]	; (80027ec <RGB_to_GRB_PWM+0x1e8>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	78db      	ldrb	r3, [r3, #3]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fac7 	bl	8000c44 <__aeabi_ui2f>
 80026b6:	4604      	mov	r4, r0
 80026b8:	797b      	ldrb	r3, [r7, #5]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fac2 	bl	8000c44 <__aeabi_ui2f>
 80026c0:	4603      	mov	r3, r0
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	4623      	mov	r3, r4
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4949      	ldr	r1, [pc, #292]	; (80027f0 <RGB_to_GRB_PWM+0x1ec>)
 80026cc:	f04f 0000 	mov.w	r0, #0
 80026d0:	f000 f8ac 	bl	800282c <interpolation>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fcf8 	bl	80010cc <__aeabi_f2uiz>
 80026dc:	4603      	mov	r3, r0
 80026de:	717b      	strb	r3, [r7, #5]
		for(int j = 0; j < COLOR_BYTE; j++){
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	e06f      	b.n	80027c6 <RGB_to_GRB_PWM+0x1c2>
			if(1 & (g >> (COLOR_BYTE - j - 1)))
 80026e6:	79ba      	ldrb	r2, [r7, #6]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	fa42 f303 	asr.w	r3, r2, r3
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <RGB_to_GRB_PWM+0x110>
				PWM_buff[j + (i * COLORS_BITS)] = HIGH;
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4413      	add	r3, r2
 800270a:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <RGB_to_GRB_PWM+0x1f0>)
 800270c:	213b      	movs	r1, #59	; 0x3b
 800270e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002712:	e00b      	b.n	800272c <RGB_to_GRB_PWM+0x128>
			else PWM_buff[j + (i * COLORS_BITS)] = LOW;
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4413      	add	r3, r2
 8002724:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <RGB_to_GRB_PWM+0x1f0>)
 8002726:	211d      	movs	r1, #29
 8002728:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(1 & (r >> (COLOR_BYTE - j - 1)))
 800272c:	79fa      	ldrb	r2, [r7, #7]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f1c3 0307 	rsb	r3, r3, #7
 8002734:	fa42 f303 	asr.w	r3, r2, r3
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <RGB_to_GRB_PWM+0x158>
				PWM_buff[j + (i * COLORS_BITS) + 8] = HIGH;
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4413      	add	r3, r2
 8002750:	3308      	adds	r3, #8
 8002752:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <RGB_to_GRB_PWM+0x1f0>)
 8002754:	213b      	movs	r1, #59	; 0x3b
 8002756:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800275a:	e00c      	b.n	8002776 <RGB_to_GRB_PWM+0x172>
			else PWM_buff[j + (i * COLORS_BITS) + 8] = LOW;
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4413      	add	r3, r2
 800276c:	3308      	adds	r3, #8
 800276e:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <RGB_to_GRB_PWM+0x1f0>)
 8002770:	211d      	movs	r1, #29
 8002772:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(1 & (b >> (COLOR_BYTE - j - 1)))
 8002776:	797a      	ldrb	r2, [r7, #5]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f1c3 0307 	rsb	r3, r3, #7
 800277e:	fa42 f303 	asr.w	r3, r2, r3
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <RGB_to_GRB_PWM+0x1a2>
				PWM_buff[j + (i * COLORS_BITS) + 16] = HIGH;
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4413      	add	r3, r2
 800279a:	3310      	adds	r3, #16
 800279c:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <RGB_to_GRB_PWM+0x1f0>)
 800279e:	213b      	movs	r1, #59	; 0x3b
 80027a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80027a4:	e00c      	b.n	80027c0 <RGB_to_GRB_PWM+0x1bc>
			else PWM_buff[j + (i * COLORS_BITS) + 16] = LOW;
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	3310      	adds	r3, #16
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <RGB_to_GRB_PWM+0x1f0>)
 80027ba:	211d      	movs	r1, #29
 80027bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = 0; j < COLOR_BYTE; j++){
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	dd8c      	ble.n	80026e6 <RGB_to_GRB_PWM+0xe2>
	for(int i = 0; i < NUM_LEDS; i++){
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <RGB_to_GRB_PWM+0x1f4>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4293      	cmp	r3, r2
 80027dc:	f6ff af18 	blt.w	8002610 <RGB_to_GRB_PWM+0xc>
		}
	}
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200026e4 	.word	0x200026e4
 80027f0:	437f0000 	.word	0x437f0000
 80027f4:	200004c0 	.word	0x200004c0
 80027f8:	20000063 	.word	0x20000063

080027fc <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	if(htim == H_TIM){
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a07      	ldr	r2, [pc, #28]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d106      	bne.n	800281a <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
		HAL_TIM_PWM_Stop_DMA(H_TIM, T_CH);
 800280c:	2100      	movs	r1, #0
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8002810:	f005 f8fe 	bl	8007a10 <HAL_TIM_PWM_Stop_DMA>
		STATE = WS2812B_READY;
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
	}
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000349c 	.word	0x2000349c
 8002828:	200004bc 	.word	0x200004bc

0800282c <interpolation>:

//x1 = 0; x2 = 255; fx1 = 0;  fx2 = brightness; x = value;
float interpolation(float x1, float x2, float fx1, float fx2, float x){
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
	return fx1 + (x - x1)*((fx2 - fx1)/(x2 - x1));
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	6a38      	ldr	r0, [r7, #32]
 800283e:	f7fe f94f 	bl	8000ae0 <__aeabi_fsub>
 8002842:	4603      	mov	r3, r0
 8002844:	461c      	mov	r4, r3
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	f7fe f949 	bl	8000ae0 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	461d      	mov	r5, r3
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	68b8      	ldr	r0, [r7, #8]
 8002856:	f7fe f943 	bl	8000ae0 <__aeabi_fsub>
 800285a:	4603      	mov	r3, r0
 800285c:	4619      	mov	r1, r3
 800285e:	4628      	mov	r0, r5
 8002860:	f7fe fafc 	bl	8000e5c <__aeabi_fdiv>
 8002864:	4603      	mov	r3, r0
 8002866:	4619      	mov	r1, r3
 8002868:	4620      	mov	r0, r4
 800286a:	f7fe fa43 	bl	8000cf4 <__aeabi_fmul>
 800286e:	4603      	mov	r3, r0
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe f936 	bl	8000ae4 <__addsf3>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002884 <WS2812B_MakeEffect>:

int buff_full = 0;
int samples[FFT_SIZE] = {0};
int amplitudes[FFT_SIZE/2] = {0};

void WS2812B_MakeEffect(WS2812B_CustomEffect custom_effect){
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
	current_cm = NOCOLORMUSIC;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <WS2812B_MakeEffect+0x80>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
	current_effect = custom_effect;
 8002894:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <WS2812B_MakeEffect+0x84>)
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	7013      	strb	r3, [r2, #0]
	switch(custom_effect){
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b07      	cmp	r3, #7
 800289e:	d828      	bhi.n	80028f2 <WS2812B_MakeEffect+0x6e>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <WS2812B_MakeEffect+0x24>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028f3 	.word	0x080028f3
 80028ac:	080028c9 	.word	0x080028c9
 80028b0:	080028cf 	.word	0x080028cf
 80028b4:	080028d5 	.word	0x080028d5
 80028b8:	080028db 	.word	0x080028db
 80028bc:	080028e1 	.word	0x080028e1
 80028c0:	080028e7 	.word	0x080028e7
 80028c4:	080028ed 	.word	0x080028ed
	case NOEFFECT: break;
	case RAINBOW_LOOP: RainbowLoop(); break;
 80028c8:	f000 f89e 	bl	8002a08 <RainbowLoop>
 80028cc:	e011      	b.n	80028f2 <WS2812B_MakeEffect+0x6e>
	case FLIP_FLOP: FlipFlop(); break;
 80028ce:	f000 f90b 	bl	8002ae8 <FlipFlop>
 80028d2:	e00e      	b.n	80028f2 <WS2812B_MakeEffect+0x6e>
	case FADE: Fade(); break;
 80028d4:	f000 fa20 	bl	8002d18 <Fade>
 80028d8:	e00b      	b.n	80028f2 <WS2812B_MakeEffect+0x6e>
	case RAINBOW: Rainbow(); break;
 80028da:	f000 fa69 	bl	8002db0 <Rainbow>
 80028de:	e008      	b.n	80028f2 <WS2812B_MakeEffect+0x6e>
	case RAINBOW_FADE: RainbowFade(); break;
 80028e0:	f000 fad8 	bl	8002e94 <RainbowFade>
 80028e4:	e005      	b.n	80028f2 <WS2812B_MakeEffect+0x6e>
	case RANDOM_COLOR_FADE: RandomColorFade(); break;
 80028e6:	f000 fb39 	bl	8002f5c <RandomColorFade>
 80028ea:	e002      	b.n	80028f2 <WS2812B_MakeEffect+0x6e>
	case POLICE: Police(); break;
 80028ec:	f000 fb98 	bl	8003020 <Police>
 80028f0:	bf00      	nop
	}
	previous_effect = current_effect;
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <WS2812B_MakeEffect+0x84>)
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <WS2812B_MakeEffect+0x88>)
 80028f8:	701a      	strb	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20002c86 	.word	0x20002c86
 8002908:	20002c84 	.word	0x20002c84
 800290c:	20002c85 	.word	0x20002c85

08002910 <WS2812B_MakeColorMusic>:
void WS2812B_MakeColorMusic(WS2812B_ColorMusic color_music){
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	current_effect = NOEFFECT;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <WS2812B_MakeColorMusic+0x50>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
	current_cm = color_music;
 8002920:	4a10      	ldr	r2, [pc, #64]	; (8002964 <WS2812B_MakeColorMusic+0x54>)
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	7013      	strb	r3, [r2, #0]
	switch(color_music){
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d815      	bhi.n	8002958 <WS2812B_MakeColorMusic+0x48>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <WS2812B_MakeColorMusic+0x24>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002957 	.word	0x08002957
 8002938:	08002945 	.word	0x08002945
 800293c:	0800294b 	.word	0x0800294b
 8002940:	08002951 	.word	0x08002951
	case NOCOLORMUSIC: break;
	case CM_1: ColorMusic_1(); break;
 8002944:	f000 fc0a 	bl	800315c <ColorMusic_1>
 8002948:	e006      	b.n	8002958 <WS2812B_MakeColorMusic+0x48>
	case CM_2: ColorMusic_2(); break;
 800294a:	f000 fd3b 	bl	80033c4 <ColorMusic_2>
 800294e:	e003      	b.n	8002958 <WS2812B_MakeColorMusic+0x48>
	case CM_3: ColorMusic_3(); break;
 8002950:	f000 fe08 	bl	8003564 <ColorMusic_3>
 8002954:	e000      	b.n	8002958 <WS2812B_MakeColorMusic+0x48>
	case NOCOLORMUSIC: break;
 8002956:	bf00      	nop
	}
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20002c84 	.word	0x20002c84
 8002964:	20002c86 	.word	0x20002c86

08002968 <WS2812B_SetEffectDelay>:

void WS2812B_SetEffectDelay(uint8_t delay){
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
	effect_delay = delay;
 8002972:	4a04      	ldr	r2, [pc, #16]	; (8002984 <WS2812B_SetEffectDelay+0x1c>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	7013      	strb	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000064 	.word	0x20000064

08002988 <WS2812B_SetColorMusicDelay>:
void WS2812B_SetColorMusicDelay(uint8_t delay){
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
	color_music_delay = delay;
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <WS2812B_SetColorMusicDelay+0x1c>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	7013      	strb	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000065 	.word	0x20000065

080029a8 <WS2812B_SetMaxAmplitudeL>:
void WS2812B_SetMaxAmplitudeL(uint8_t amplitude){
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
	max_amplitude_low = amplitude;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <WS2812B_SetMaxAmplitudeL+0x1c>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	7013      	strb	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000066 	.word	0x20000066

080029c8 <WS2812B_SetMaxAmplitudeM>:
void WS2812B_SetMaxAmplitudeM(uint8_t amplitude){
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	max_amplitude_medium = amplitude;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <WS2812B_SetMaxAmplitudeM+0x1c>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	7013      	strb	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000067 	.word	0x20000067

080029e8 <WS2812B_SetMaxAmplitudeH>:
void WS2812B_SetMaxAmplitudeH(uint8_t amplitude){
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
	max_amplitude_high = amplitude;
 80029f2:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <WS2812B_SetMaxAmplitudeH+0x1c>)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	7013      	strb	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000068 	.word	0x20000068

08002a08 <RainbowLoop>:

void RainbowLoop(){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af02      	add	r7, sp, #8
	if(previous_effect != current_effect){
 8002a0e:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <RainbowLoop+0xc4>)
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <RainbowLoop+0xc8>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d011      	beq.n	8002a3e <RainbowLoop+0x36>
		  Preset_Rainbow(layer1, 0, NUM_LEDS - 1, 0);
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <RainbowLoop+0xcc>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	2300      	movs	r3, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	482b      	ldr	r0, [pc, #172]	; (8002ad8 <RainbowLoop+0xd0>)
 8002a2a:	f001 fb81 	bl	8004130 <Preset_Rainbow>
		  Preset_OnOff(layer1, 0, NUM_LEDS, 1);
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <RainbowLoop+0xcc>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	2100      	movs	r1, #0
 8002a38:	4827      	ldr	r0, [pc, #156]	; (8002ad8 <RainbowLoop+0xd0>)
 8002a3a:	f001 fc59 	bl	80042f0 <Preset_OnOff>
	}
	Effect_Loop(layer1, 0, NUM_LEDS - 1, 0, effect_delay, 0);
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <RainbowLoop+0xcc>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	4b24      	ldr	r3, [pc, #144]	; (8002adc <RainbowLoop+0xd4>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2100      	movs	r1, #0
 8002a50:	9101      	str	r1, [sp, #4]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	481f      	ldr	r0, [pc, #124]	; (8002ad8 <RainbowLoop+0xd0>)
 8002a5a:	f000 fff3 	bl	8003a44 <Effect_Loop>
	for(int i = 0; i < NUM_LEDS; i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	e028      	b.n	8002ab6 <RainbowLoop+0xae>
		leds[i].R = layer1[i].R;
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <RainbowLoop+0xd0>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <RainbowLoop+0xd8>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		leds[i].G = layer1[i].G;
 8002a74:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <RainbowLoop+0xd0>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	7859      	ldrb	r1, [r3, #1]
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <RainbowLoop+0xd8>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	460a      	mov	r2, r1
 8002a88:	705a      	strb	r2, [r3, #1]
		leds[i].B = layer1[i].B;
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <RainbowLoop+0xd0>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	7899      	ldrb	r1, [r3, #2]
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <RainbowLoop+0xd8>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	460a      	mov	r2, r1
 8002a9e:	709a      	strb	r2, [r3, #2]
		leds[i].brightness = BRIGHTNESS;
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <RainbowLoop+0xdc>)
 8002aa2:	7819      	ldrb	r1, [r3, #0]
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <RainbowLoop+0xd8>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	460a      	mov	r2, r1
 8002aae:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < NUM_LEDS; i++){
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <RainbowLoop+0xcc>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	dbd0      	blt.n	8002a64 <RainbowLoop+0x5c>
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20002c85 	.word	0x20002c85
 8002ad0:	20002c84 	.word	0x20002c84
 8002ad4:	20000063 	.word	0x20000063
 8002ad8:	200029b4 	.word	0x200029b4
 8002adc:	20000064 	.word	0x20000064
 8002ae0:	200026e4 	.word	0x200026e4
 8002ae4:	20000062 	.word	0x20000062

08002ae8 <FlipFlop>:

void FlipFlop(){
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af02      	add	r7, sp, #8
	if(previous_effect != current_effect){
 8002aee:	4b81      	ldr	r3, [pc, #516]	; (8002cf4 <FlipFlop+0x20c>)
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <FlipFlop+0x210>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d041      	beq.n	8002b7e <FlipFlop+0x96>
		for(int i = 0; i < NUM_LEDS; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	e00b      	b.n	8002b18 <FlipFlop+0x30>
			WS2812B_SetPixelRGB(layer1, 0, 0, 0, i);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2300      	movs	r3, #0
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	487b      	ldr	r0, [pc, #492]	; (8002cfc <FlipFlop+0x214>)
 8002b0e:	f7ff fb87 	bl	8002220 <WS2812B_SetPixelRGB>
		for(int i = 0; i < NUM_LEDS; i++)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3301      	adds	r3, #1
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	4b79      	ldr	r3, [pc, #484]	; (8002d00 <FlipFlop+0x218>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4293      	cmp	r3, r2
 8002b22:	dbed      	blt.n	8002b00 <FlipFlop+0x18>
		Preset_Hue(layer1, 0, (NUM_LEDS / 6) - 1, rand()%255);
 8002b24:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <FlipFlop+0x218>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4a76      	ldr	r2, [pc, #472]	; (8002d04 <FlipFlop+0x21c>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29c      	uxth	r4, r3
 8002b38:	f006 fc82 	bl	8009440 <rand>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b72      	ldr	r3, [pc, #456]	; (8002d08 <FlipFlop+0x220>)
 8002b40:	fb83 1302 	smull	r1, r3, r3, r2
 8002b44:	4413      	add	r3, r2
 8002b46:	11d9      	asrs	r1, r3, #7
 8002b48:	17d3      	asrs	r3, r2, #31
 8002b4a:	1ac9      	subs	r1, r1, r3
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	1a5b      	subs	r3, r3, r1
 8002b52:	1ad1      	subs	r1, r2, r3
 8002b54:	b2cb      	uxtb	r3, r1
 8002b56:	4622      	mov	r2, r4
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4868      	ldr	r0, [pc, #416]	; (8002cfc <FlipFlop+0x214>)
 8002b5c:	f001 fc2c 	bl	80043b8 <Preset_Hue>
		Preset_Raindrop(layer1, 0, (NUM_LEDS / 6) - 1, 0);
 8002b60:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <FlipFlop+0x218>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <FlipFlop+0x21c>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	2300      	movs	r3, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	4860      	ldr	r0, [pc, #384]	; (8002cfc <FlipFlop+0x214>)
 8002b7a:	f001 fb3d 	bl	80041f8 <Preset_Raindrop>
	}
	static int lr = 1;
	if(lr)
 8002b7e:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <FlipFlop+0x224>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d043      	beq.n	8002c0e <FlipFlop+0x126>
	{
		if(Effect_Train(layer1, 0, NUM_LEDS - 1, 1, effect_delay, 0) == END_CYCLE){
 8002b86:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <FlipFlop+0x218>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <FlipFlop+0x228>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2100      	movs	r1, #0
 8002b98:	9101      	str	r1, [sp, #4]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4856      	ldr	r0, [pc, #344]	; (8002cfc <FlipFlop+0x214>)
 8002ba2:	f001 fa25 	bl	8003ff0 <Effect_Train>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d12f      	bne.n	8002c0e <FlipFlop+0x126>
			Preset_Hue(layer1, 0, (NUM_LEDS / 6) - 1, rand()%255);
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <FlipFlop+0x218>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <FlipFlop+0x21c>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29c      	uxth	r4, r3
 8002bc2:	f006 fc3d 	bl	8009440 <rand>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <FlipFlop+0x220>)
 8002bca:	fb83 1302 	smull	r1, r3, r3, r2
 8002bce:	4413      	add	r3, r2
 8002bd0:	11d9      	asrs	r1, r3, #7
 8002bd2:	17d3      	asrs	r3, r2, #31
 8002bd4:	1ac9      	subs	r1, r1, r3
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	1a5b      	subs	r3, r3, r1
 8002bdc:	1ad1      	subs	r1, r2, r3
 8002bde:	b2cb      	uxtb	r3, r1
 8002be0:	4622      	mov	r2, r4
 8002be2:	2100      	movs	r1, #0
 8002be4:	4845      	ldr	r0, [pc, #276]	; (8002cfc <FlipFlop+0x214>)
 8002be6:	f001 fbe7 	bl	80043b8 <Preset_Hue>
			Preset_Raindrop(layer1, 0, (NUM_LEDS / 6) - 1, 0);
 8002bea:	4b45      	ldr	r3, [pc, #276]	; (8002d00 <FlipFlop+0x218>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4a45      	ldr	r2, [pc, #276]	; (8002d04 <FlipFlop+0x21c>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	483e      	ldr	r0, [pc, #248]	; (8002cfc <FlipFlop+0x214>)
 8002c04:	f001 faf8 	bl	80041f8 <Preset_Raindrop>
			lr = 0;
 8002c08:	4b40      	ldr	r3, [pc, #256]	; (8002d0c <FlipFlop+0x224>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
		}
	}
	if(!lr){
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <FlipFlop+0x224>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d152      	bne.n	8002cbc <FlipFlop+0x1d4>
		if(Effect_Train(layer1, 0, NUM_LEDS - 1, 0, effect_delay, 1) == END_CYCLE){
 8002c16:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <FlipFlop+0x218>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <FlipFlop+0x228>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2101      	movs	r1, #1
 8002c28:	9101      	str	r1, [sp, #4]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4832      	ldr	r0, [pc, #200]	; (8002cfc <FlipFlop+0x214>)
 8002c32:	f001 f9dd 	bl	8003ff0 <Effect_Train>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d13e      	bne.n	8002cbc <FlipFlop+0x1d4>
			Preset_Hue(layer1, NUM_LEDS - (NUM_LEDS / 6), NUM_LEDS - 1, rand()%255);
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <FlipFlop+0x218>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <FlipFlop+0x218>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	492e      	ldr	r1, [pc, #184]	; (8002d04 <FlipFlop+0x21c>)
 8002c4a:	fba1 1303 	umull	r1, r3, r1, r3
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	b29c      	uxth	r4, r3
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <FlipFlop+0x218>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29d      	uxth	r5, r3
 8002c62:	f006 fbed 	bl	8009440 <rand>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <FlipFlop+0x220>)
 8002c6a:	fb83 1302 	smull	r1, r3, r3, r2
 8002c6e:	4413      	add	r3, r2
 8002c70:	11d9      	asrs	r1, r3, #7
 8002c72:	17d3      	asrs	r3, r2, #31
 8002c74:	1ac9      	subs	r1, r1, r3
 8002c76:	460b      	mov	r3, r1
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	1a5b      	subs	r3, r3, r1
 8002c7c:	1ad1      	subs	r1, r2, r3
 8002c7e:	b2cb      	uxtb	r3, r1
 8002c80:	462a      	mov	r2, r5
 8002c82:	4621      	mov	r1, r4
 8002c84:	481d      	ldr	r0, [pc, #116]	; (8002cfc <FlipFlop+0x214>)
 8002c86:	f001 fb97 	bl	80043b8 <Preset_Hue>
			Preset_Raindrop(layer1, NUM_LEDS - (NUM_LEDS / 6), NUM_LEDS - 1, 1);
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <FlipFlop+0x218>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <FlipFlop+0x218>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	491b      	ldr	r1, [pc, #108]	; (8002d04 <FlipFlop+0x21c>)
 8002c96:	fba1 1303 	umull	r1, r3, r1, r3
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	b299      	uxth	r1, r3
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <FlipFlop+0x218>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4812      	ldr	r0, [pc, #72]	; (8002cfc <FlipFlop+0x214>)
 8002cb2:	f001 faa1 	bl	80041f8 <Preset_Raindrop>
			lr = 1;
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <FlipFlop+0x224>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
		}
	}
	for(int i = 0; i < NUM_LEDS; i++){
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	e00c      	b.n	8002cdc <FlipFlop+0x1f4>
		leds[i] = layer1[i];
 8002cc2:	4814      	ldr	r0, [pc, #80]	; (8002d14 <FlipFlop+0x22c>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	490d      	ldr	r1, [pc, #52]	; (8002cfc <FlipFlop+0x214>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4403      	add	r3, r0
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	440a      	add	r2, r1
 8002cd2:	6810      	ldr	r0, [r2, #0]
 8002cd4:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++){
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <FlipFlop+0x218>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	dbec      	blt.n	8002cc2 <FlipFlop+0x1da>
	}
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20002c85 	.word	0x20002c85
 8002cf8:	20002c84 	.word	0x20002c84
 8002cfc:	200029b4 	.word	0x200029b4
 8002d00:	20000063 	.word	0x20000063
 8002d04:	aaaaaaab 	.word	0xaaaaaaab
 8002d08:	80808081 	.word	0x80808081
 8002d0c:	2000006c 	.word	0x2000006c
 8002d10:	20000064 	.word	0x20000064
 8002d14:	200026e4 	.word	0x200026e4

08002d18 <Fade>:

void Fade(){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af02      	add	r7, sp, #8
	if(previous_effect != current_effect)
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <Fade+0x80>)
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <Fade+0x84>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d009      	beq.n	8002d3e <Fade+0x26>
		Preset_OnOff(layer1, 0, NUM_LEDS - 1, 1);
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <Fade+0x88>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	2301      	movs	r3, #1
 8002d36:	2100      	movs	r1, #0
 8002d38:	481a      	ldr	r0, [pc, #104]	; (8002da4 <Fade+0x8c>)
 8002d3a:	f001 fad9 	bl	80042f0 <Preset_OnOff>
	Effect_Fade(layer1, 0, NUM_LEDS - 1, 0, effect_delay, 0);
 8002d3e:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <Fade+0x88>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <Fade+0x90>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2100      	movs	r1, #0
 8002d50:	9101      	str	r1, [sp, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2300      	movs	r3, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	4812      	ldr	r0, [pc, #72]	; (8002da4 <Fade+0x8c>)
 8002d5a:	f000 ff6b 	bl	8003c34 <Effect_Fade>
	for(int i = 0; i < NUM_LEDS; i++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	e00d      	b.n	8002d80 <Fade+0x68>
		leds[i].brightness = layer1[i].brightness;
 8002d64:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <Fade+0x8c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	78d9      	ldrb	r1, [r3, #3]
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <Fade+0x94>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	460a      	mov	r2, r1
 8002d78:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < NUM_LEDS; i++)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <Fade+0x88>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	dbeb      	blt.n	8002d64 <Fade+0x4c>
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20002c85 	.word	0x20002c85
 8002d9c:	20002c84 	.word	0x20002c84
 8002da0:	20000063 	.word	0x20000063
 8002da4:	200029b4 	.word	0x200029b4
 8002da8:	20000064 	.word	0x20000064
 8002dac:	200026e4 	.word	0x200026e4

08002db0 <Rainbow>:

void Rainbow(){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af02      	add	r7, sp, #8
	if(previous_effect != current_effect){
 8002db6:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <Rainbow+0xc8>)
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <Rainbow+0xcc>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d013      	beq.n	8002dea <Rainbow+0x3a>
		  Preset_Hue(layer1, 0, NUM_LEDS - 1, 0);
 8002dc2:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <Rainbow+0xd0>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	482c      	ldr	r0, [pc, #176]	; (8002e84 <Rainbow+0xd4>)
 8002dd2:	f001 faf1 	bl	80043b8 <Preset_Hue>
		  Preset_OnOff(layer1, 0, NUM_LEDS - 1, 1);
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <Rainbow+0xd0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	2301      	movs	r3, #1
 8002de2:	2100      	movs	r1, #0
 8002de4:	4827      	ldr	r0, [pc, #156]	; (8002e84 <Rainbow+0xd4>)
 8002de6:	f001 fa83 	bl	80042f0 <Preset_OnOff>
	}
	Effect_Rainbow(layer1, 0, NUM_LEDS - 1, 0, effect_delay, 0);
 8002dea:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <Rainbow+0xd0>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <Rainbow+0xd8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	9101      	str	r1, [sp, #4]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2300      	movs	r3, #0
 8002e02:	2100      	movs	r1, #0
 8002e04:	481f      	ldr	r0, [pc, #124]	; (8002e84 <Rainbow+0xd4>)
 8002e06:	f000 febf 	bl	8003b88 <Effect_Rainbow>
	for(int i = 0; i < NUM_LEDS; i++){
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	e028      	b.n	8002e62 <Rainbow+0xb2>
		leds[i].R = layer1[i].R;
 8002e10:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <Rainbow+0xd4>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <Rainbow+0xdc>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		leds[i].G = layer1[i].G;
 8002e20:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <Rainbow+0xd4>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	7859      	ldrb	r1, [r3, #1]
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <Rainbow+0xdc>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	460a      	mov	r2, r1
 8002e34:	705a      	strb	r2, [r3, #1]
		leds[i].B = layer1[i].B;
 8002e36:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <Rainbow+0xd4>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	7899      	ldrb	r1, [r3, #2]
 8002e40:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <Rainbow+0xdc>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	460a      	mov	r2, r1
 8002e4a:	709a      	strb	r2, [r3, #2]
		leds[i].brightness = BRIGHTNESS;
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <Rainbow+0xe0>)
 8002e4e:	7819      	ldrb	r1, [r3, #0]
 8002e50:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <Rainbow+0xdc>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	460a      	mov	r2, r1
 8002e5a:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < NUM_LEDS; i++){
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <Rainbow+0xd0>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	dbd0      	blt.n	8002e10 <Rainbow+0x60>
	}
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20002c85 	.word	0x20002c85
 8002e7c:	20002c84 	.word	0x20002c84
 8002e80:	20000063 	.word	0x20000063
 8002e84:	200029b4 	.word	0x200029b4
 8002e88:	20000064 	.word	0x20000064
 8002e8c:	200026e4 	.word	0x200026e4
 8002e90:	20000062 	.word	0x20000062

08002e94 <RainbowFade>:

void RainbowFade(){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af02      	add	r7, sp, #8
	if(previous_effect != current_effect){
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <RainbowFade+0xb0>)
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <RainbowFade+0xb4>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d013      	beq.n	8002ece <RainbowFade+0x3a>
		Preset_Hue(layer1, 0, NUM_LEDS - 1, 0);
 8002ea6:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <RainbowFade+0xb8>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4826      	ldr	r0, [pc, #152]	; (8002f50 <RainbowFade+0xbc>)
 8002eb6:	f001 fa7f 	bl	80043b8 <Preset_Hue>
		Preset_OnOff(layer1, 0, NUM_LEDS - 1, 1);
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <RainbowFade+0xb8>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4821      	ldr	r0, [pc, #132]	; (8002f50 <RainbowFade+0xbc>)
 8002eca:	f001 fa11 	bl	80042f0 <Preset_OnOff>
	}
	Effect_Rainbow(layer1, 0, NUM_LEDS - 1, 0, effect_delay, 0);
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <RainbowFade+0xb8>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <RainbowFade+0xc0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	9101      	str	r1, [sp, #4]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4819      	ldr	r0, [pc, #100]	; (8002f50 <RainbowFade+0xbc>)
 8002eea:	f000 fe4d 	bl	8003b88 <Effect_Rainbow>
	Effect_Fade(layer1, 0, NUM_LEDS - 1, 0, effect_delay, 0);
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <RainbowFade+0xb8>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <RainbowFade+0xc0>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2100      	movs	r1, #0
 8002f00:	9101      	str	r1, [sp, #4]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2100      	movs	r1, #0
 8002f08:	4811      	ldr	r0, [pc, #68]	; (8002f50 <RainbowFade+0xbc>)
 8002f0a:	f000 fe93 	bl	8003c34 <Effect_Fade>
	for(int i = 0; i < NUM_LEDS; i++){
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	e00c      	b.n	8002f2e <RainbowFade+0x9a>
		leds[i] = layer1[i];
 8002f14:	4810      	ldr	r0, [pc, #64]	; (8002f58 <RainbowFade+0xc4>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	490d      	ldr	r1, [pc, #52]	; (8002f50 <RainbowFade+0xbc>)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4403      	add	r3, r0
 8002f20:	0092      	lsls	r2, r2, #2
 8002f22:	440a      	add	r2, r1
 8002f24:	6810      	ldr	r0, [r2, #0]
 8002f26:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++){
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <RainbowFade+0xb8>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4293      	cmp	r3, r2
 8002f38:	dbec      	blt.n	8002f14 <RainbowFade+0x80>
	}
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20002c85 	.word	0x20002c85
 8002f48:	20002c84 	.word	0x20002c84
 8002f4c:	20000063 	.word	0x20000063
 8002f50:	200029b4 	.word	0x200029b4
 8002f54:	20000064 	.word	0x20000064
 8002f58:	200026e4 	.word	0x200026e4

08002f5c <RandomColorFade>:

void RandomColorFade(){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af02      	add	r7, sp, #8
	if(previous_effect != current_effect){
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <RandomColorFade+0xac>)
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <RandomColorFade+0xb0>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d013      	beq.n	8002f96 <RandomColorFade+0x3a>
		Preset_RandomColor(layer1, 0, NUM_LEDS - 1);
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <RandomColorFade+0xb4>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4825      	ldr	r0, [pc, #148]	; (8003014 <RandomColorFade+0xb8>)
 8002f7e:	f001 f9e9 	bl	8004354 <Preset_RandomColor>
		Preset_OnOff(layer1, 0, NUM_LEDS - 1, 1);
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <RandomColorFade+0xb4>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4820      	ldr	r0, [pc, #128]	; (8003014 <RandomColorFade+0xb8>)
 8002f92:	f001 f9ad 	bl	80042f0 <Preset_OnOff>
	}
	if(Effect_Fade(layer1, 0, NUM_LEDS - 1, 0, effect_delay, 0) == END_CYCLE)
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <RandomColorFade+0xb4>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <RandomColorFade+0xbc>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	9101      	str	r1, [sp, #4]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2300      	movs	r3, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4818      	ldr	r0, [pc, #96]	; (8003014 <RandomColorFade+0xb8>)
 8002fb2:	f000 fe3f 	bl	8003c34 <Effect_Fade>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d109      	bne.n	8002fd2 <RandomColorFade+0x76>
		Preset_RandomColor(layer1, 0, NUM_LEDS - 1);
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <RandomColorFade+0xb4>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4811      	ldr	r0, [pc, #68]	; (8003014 <RandomColorFade+0xb8>)
 8002fce:	f001 f9c1 	bl	8004354 <Preset_RandomColor>
	for(int i = 0; i < NUM_LEDS; i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	e00c      	b.n	8002ff2 <RandomColorFade+0x96>
		leds[i] = layer1[i];
 8002fd8:	4810      	ldr	r0, [pc, #64]	; (800301c <RandomColorFade+0xc0>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	490d      	ldr	r1, [pc, #52]	; (8003014 <RandomColorFade+0xb8>)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4403      	add	r3, r0
 8002fe4:	0092      	lsls	r2, r2, #2
 8002fe6:	440a      	add	r2, r1
 8002fe8:	6810      	ldr	r0, [r2, #0]
 8002fea:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <RandomColorFade+0xb4>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	dbec      	blt.n	8002fd8 <RandomColorFade+0x7c>
}
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20002c85 	.word	0x20002c85
 800300c:	20002c84 	.word	0x20002c84
 8003010:	20000063 	.word	0x20000063
 8003014:	200029b4 	.word	0x200029b4
 8003018:	20000064 	.word	0x20000064
 800301c:	200026e4 	.word	0x200026e4

08003020 <Police>:

void Police(){
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af02      	add	r7, sp, #8
	if(previous_effect != current_effect){
 8003026:	4b40      	ldr	r3, [pc, #256]	; (8003128 <Police+0x108>)
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	4b40      	ldr	r3, [pc, #256]	; (800312c <Police+0x10c>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d038      	beq.n	80030a4 <Police+0x84>
		Preset_OnOff(layer1, 0, NUM_LEDS - 1, 1);
 8003032:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <Police+0x110>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	2301      	movs	r3, #1
 800303e:	2100      	movs	r1, #0
 8003040:	483c      	ldr	r0, [pc, #240]	; (8003134 <Police+0x114>)
 8003042:	f001 f955 	bl	80042f0 <Preset_OnOff>
		for(int i = 0; i < NUM_LEDS / 2; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e00b      	b.n	8003064 <Police+0x44>
			WS2812B_SetPixelRGB(layer1, 255, 0, 0, i);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	2200      	movs	r2, #0
 8003056:	21ff      	movs	r1, #255	; 0xff
 8003058:	4836      	ldr	r0, [pc, #216]	; (8003134 <Police+0x114>)
 800305a:	f7ff f8e1 	bl	8002220 <WS2812B_SetPixelRGB>
		for(int i = 0; i < NUM_LEDS / 2; i++)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	4b32      	ldr	r3, [pc, #200]	; (8003130 <Police+0x110>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4293      	cmp	r3, r2
 8003072:	dbeb      	blt.n	800304c <Police+0x2c>
		for(int i = NUM_LEDS / 2; i < NUM_LEDS; i++)
 8003074:	4b2e      	ldr	r3, [pc, #184]	; (8003130 <Police+0x110>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	e00b      	b.n	8003098 <Police+0x78>
			WS2812B_SetPixelRGB(layer1, 0, 0, 255, i);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	23ff      	movs	r3, #255	; 0xff
 8003088:	2200      	movs	r2, #0
 800308a:	2100      	movs	r1, #0
 800308c:	4829      	ldr	r0, [pc, #164]	; (8003134 <Police+0x114>)
 800308e:	f7ff f8c7 	bl	8002220 <WS2812B_SetPixelRGB>
		for(int i = NUM_LEDS / 2; i < NUM_LEDS; i++)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3301      	adds	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	4b25      	ldr	r3, [pc, #148]	; (8003130 <Police+0x110>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4293      	cmp	r3, r2
 80030a2:	dbed      	blt.n	8003080 <Police+0x60>
	}
	Effect_Fade(layer1, 0, NUM_LEDS / 2 - 1, 0, effect_delay, 0);
 80030a4:	4b22      	ldr	r3, [pc, #136]	; (8003130 <Police+0x110>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	4b21      	ldr	r3, [pc, #132]	; (8003138 <Police+0x118>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2100      	movs	r1, #0
 80030ba:	9101      	str	r1, [sp, #4]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2300      	movs	r3, #0
 80030c0:	2100      	movs	r1, #0
 80030c2:	481c      	ldr	r0, [pc, #112]	; (8003134 <Police+0x114>)
 80030c4:	f000 fdb6 	bl	8003c34 <Effect_Fade>
	Effect_Fade(layer1, NUM_LEDS / 2, NUM_LEDS - 1, 1, effect_delay, 1);
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <Police+0x110>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	b299      	uxth	r1, r3
 80030d2:	4b17      	ldr	r3, [pc, #92]	; (8003130 <Police+0x110>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <Police+0x118>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2001      	movs	r0, #1
 80030e4:	9001      	str	r0, [sp, #4]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2301      	movs	r3, #1
 80030ea:	4812      	ldr	r0, [pc, #72]	; (8003134 <Police+0x114>)
 80030ec:	f000 fda2 	bl	8003c34 <Effect_Fade>
	for(int i = 0; i < NUM_LEDS; i++){
 80030f0:	2300      	movs	r3, #0
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	e00c      	b.n	8003110 <Police+0xf0>
		leds[i] = layer1[i];
 80030f6:	4811      	ldr	r0, [pc, #68]	; (800313c <Police+0x11c>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	490e      	ldr	r1, [pc, #56]	; (8003134 <Police+0x114>)
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4403      	add	r3, r0
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	440a      	add	r2, r1
 8003106:	6810      	ldr	r0, [r2, #0]
 8003108:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++){
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3301      	adds	r3, #1
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <Police+0x110>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4293      	cmp	r3, r2
 800311a:	dbec      	blt.n	80030f6 <Police+0xd6>
	}
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20002c85 	.word	0x20002c85
 800312c:	20002c84 	.word	0x20002c84
 8003130:	20000063 	.word	0x20000063
 8003134:	200029b4 	.word	0x200029b4
 8003138:	20000064 	.word	0x20000064
 800313c:	200026e4 	.word	0x200026e4

08003140 <WS2812B_CM_Init>:




void WS2812B_CM_Init(){
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(H_ADC);
 8003144:	4803      	ldr	r0, [pc, #12]	; (8003154 <WS2812B_CM_Init+0x14>)
 8003146:	f002 fab5 	bl	80056b4 <HAL_ADC_Start_IT>
	HAL_TIM_Base_Start(H_TIM_ADC);
 800314a:	4803      	ldr	r0, [pc, #12]	; (8003158 <WS2812B_CM_Init+0x18>)
 800314c:	f004 fa2c 	bl	80075a8 <HAL_TIM_Base_Start>
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	2000346c 	.word	0x2000346c
 8003158:	200034e4 	.word	0x200034e4

0800315c <ColorMusic_1>:

void ColorMusic_1(){
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af02      	add	r7, sp, #8
	Effect_FadeDown(layer1, 0, NUM_LEDS - 1, 0, color_music_delay, 0);
 8003162:	4b8c      	ldr	r3, [pc, #560]	; (8003394 <ColorMusic_1+0x238>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	4b8a      	ldr	r3, [pc, #552]	; (8003398 <ColorMusic_1+0x23c>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	2100      	movs	r1, #0
 8003174:	9101      	str	r1, [sp, #4]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2300      	movs	r3, #0
 800317a:	2100      	movs	r1, #0
 800317c:	4887      	ldr	r0, [pc, #540]	; (800339c <ColorMusic_1+0x240>)
 800317e:	f000 febb 	bl	8003ef8 <Effect_FadeDown>
	Preset_Rainbow(layer1, 0, NUM_LEDS / 2 - 1, 0);
 8003182:	4b84      	ldr	r3, [pc, #528]	; (8003394 <ColorMusic_1+0x238>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	2300      	movs	r3, #0
 8003192:	2100      	movs	r1, #0
 8003194:	4881      	ldr	r0, [pc, #516]	; (800339c <ColorMusic_1+0x240>)
 8003196:	f000 ffcb 	bl	8004130 <Preset_Rainbow>
	Preset_Rainbow(layer1, NUM_LEDS / 2, NUM_LEDS - 1, 1);
 800319a:	4b7e      	ldr	r3, [pc, #504]	; (8003394 <ColorMusic_1+0x238>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	b299      	uxth	r1, r3
 80031a4:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <ColorMusic_1+0x238>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	2301      	movs	r3, #1
 80031b0:	487a      	ldr	r0, [pc, #488]	; (800339c <ColorMusic_1+0x240>)
 80031b2:	f000 ffbd 	bl	8004130 <Preset_Rainbow>

	for(int i = 0; i < NUM_LEDS; i++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e00c      	b.n	80031d6 <ColorMusic_1+0x7a>
		leds[i] = layer1[i];
 80031bc:	4878      	ldr	r0, [pc, #480]	; (80033a0 <ColorMusic_1+0x244>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4976      	ldr	r1, [pc, #472]	; (800339c <ColorMusic_1+0x240>)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4403      	add	r3, r0
 80031c8:	0092      	lsls	r2, r2, #2
 80031ca:	440a      	add	r2, r1
 80031cc:	6810      	ldr	r0, [r2, #0]
 80031ce:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3301      	adds	r3, #1
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <ColorMusic_1+0x238>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4293      	cmp	r3, r2
 80031e0:	dbec      	blt.n	80031bc <ColorMusic_1+0x60>

	if(buff_full){
 80031e2:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <ColorMusic_1+0x248>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80d0 	beq.w	800338c <ColorMusic_1+0x230>
		FFT(samples, amplitudes, FFT_SIZE, Fd);
 80031ec:	4b6e      	ldr	r3, [pc, #440]	; (80033a8 <ColorMusic_1+0x24c>)
 80031ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f2:	496e      	ldr	r1, [pc, #440]	; (80033ac <ColorMusic_1+0x250>)
 80031f4:	486e      	ldr	r0, [pc, #440]	; (80033b0 <ColorMusic_1+0x254>)
 80031f6:	f7fe fae1 	bl	80017bc <FFT>
		if(find_max_ampl(1, 3) > max_amplitude_low * 1000){
 80031fa:	2103      	movs	r1, #3
 80031fc:	2001      	movs	r0, #1
 80031fe:	f000 fbc3 	bl	8003988 <find_max_ampl>
 8003202:	4602      	mov	r2, r0
 8003204:	4b6b      	ldr	r3, [pc, #428]	; (80033b4 <ColorMusic_1+0x258>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	429a      	cmp	r2, r3
 8003214:	dd24      	ble.n	8003260 <ColorMusic_1+0x104>
			Preset_Raindrop(layer1, 0, NUM_LEDS / 6 - 1, 1);
 8003216:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <ColorMusic_1+0x238>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	4a67      	ldr	r2, [pc, #412]	; (80033b8 <ColorMusic_1+0x25c>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	2100      	movs	r1, #0
 800322e:	485b      	ldr	r0, [pc, #364]	; (800339c <ColorMusic_1+0x240>)
 8003230:	f000 ffe2 	bl	80041f8 <Preset_Raindrop>
			Preset_Raindrop(layer1, NUM_LEDS - NUM_LEDS / 6, NUM_LEDS - 1, 0);
 8003234:	4b57      	ldr	r3, [pc, #348]	; (8003394 <ColorMusic_1+0x238>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b29a      	uxth	r2, r3
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <ColorMusic_1+0x238>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	495e      	ldr	r1, [pc, #376]	; (80033b8 <ColorMusic_1+0x25c>)
 8003240:	fba1 1303 	umull	r1, r3, r1, r3
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	b2db      	uxtb	r3, r3
 8003248:	b29b      	uxth	r3, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b299      	uxth	r1, r3
 800324e:	4b51      	ldr	r3, [pc, #324]	; (8003394 <ColorMusic_1+0x238>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	2300      	movs	r3, #0
 800325a:	4850      	ldr	r0, [pc, #320]	; (800339c <ColorMusic_1+0x240>)
 800325c:	f000 ffcc 	bl	80041f8 <Preset_Raindrop>
		}
		if(find_max_ampl(4, 20) > max_amplitude_medium * 1000){
 8003260:	2114      	movs	r1, #20
 8003262:	2004      	movs	r0, #4
 8003264:	f000 fb90 	bl	8003988 <find_max_ampl>
 8003268:	4602      	mov	r2, r0
 800326a:	4b54      	ldr	r3, [pc, #336]	; (80033bc <ColorMusic_1+0x260>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	429a      	cmp	r2, r3
 800327a:	dd39      	ble.n	80032f0 <ColorMusic_1+0x194>
			Preset_Raindrop(layer1, NUM_LEDS / 6, (NUM_LEDS / 6) * 2 - 1, 0);
 800327c:	4b45      	ldr	r3, [pc, #276]	; (8003394 <ColorMusic_1+0x238>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4a4d      	ldr	r2, [pc, #308]	; (80033b8 <ColorMusic_1+0x25c>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	b299      	uxth	r1, r3
 800328c:	4b41      	ldr	r3, [pc, #260]	; (8003394 <ColorMusic_1+0x238>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4a49      	ldr	r2, [pc, #292]	; (80033b8 <ColorMusic_1+0x25c>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	b2db      	uxtb	r3, r3
 800329a:	b29b      	uxth	r3, r3
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	2300      	movs	r3, #0
 80032a6:	483d      	ldr	r0, [pc, #244]	; (800339c <ColorMusic_1+0x240>)
 80032a8:	f000 ffa6 	bl	80041f8 <Preset_Raindrop>
			Preset_Raindrop(layer1, NUM_LEDS - (NUM_LEDS / 6) * 2, NUM_LEDS - (NUM_LEDS / 6) - 1, 1);
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <ColorMusic_1+0x238>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <ColorMusic_1+0x238>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	4940      	ldr	r1, [pc, #256]	; (80033b8 <ColorMusic_1+0x25c>)
 80032b8:	fba1 1303 	umull	r1, r3, r1, r3
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	b299      	uxth	r1, r3
 80032ca:	4b32      	ldr	r3, [pc, #200]	; (8003394 <ColorMusic_1+0x238>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	4b30      	ldr	r3, [pc, #192]	; (8003394 <ColorMusic_1+0x238>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4838      	ldr	r0, [pc, #224]	; (80033b8 <ColorMusic_1+0x25c>)
 80032d6:	fba0 0303 	umull	r0, r3, r0, r3
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	b29b      	uxth	r3, r3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	2301      	movs	r3, #1
 80032ea:	482c      	ldr	r0, [pc, #176]	; (800339c <ColorMusic_1+0x240>)
 80032ec:	f000 ff84 	bl	80041f8 <Preset_Raindrop>
		}
		if(find_max_ampl(21, 127) > max_amplitude_high * 1000){
 80032f0:	217f      	movs	r1, #127	; 0x7f
 80032f2:	2015      	movs	r0, #21
 80032f4:	f000 fb48 	bl	8003988 <find_max_ampl>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <ColorMusic_1+0x264>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	429a      	cmp	r2, r3
 800330a:	dd3c      	ble.n	8003386 <ColorMusic_1+0x22a>
			Preset_Raindrop(layer1, (NUM_LEDS / 6) * 2, (NUM_LEDS / 6) * 3 - 1, 0);
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <ColorMusic_1+0x238>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <ColorMusic_1+0x25c>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	b2db      	uxtb	r3, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	b299      	uxth	r1, r3
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <ColorMusic_1+0x238>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <ColorMusic_1+0x25c>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	b2db      	uxtb	r3, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	0052      	lsls	r2, r2, #1
 8003334:	4413      	add	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	2300      	movs	r3, #0
 800333e:	4817      	ldr	r0, [pc, #92]	; (800339c <ColorMusic_1+0x240>)
 8003340:	f000 ff5a 	bl	80041f8 <Preset_Raindrop>
			Preset_Raindrop(layer1, (NUM_LEDS / 6) * 3, NUM_LEDS - (NUM_LEDS / 6) * 2 - 1, 1);
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <ColorMusic_1+0x238>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <ColorMusic_1+0x25c>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	b2db      	uxtb	r3, r3
 8003352:	b29b      	uxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	0052      	lsls	r2, r2, #1
 8003358:	4413      	add	r3, r2
 800335a:	b299      	uxth	r1, r3
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <ColorMusic_1+0x238>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b29a      	uxth	r2, r3
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <ColorMusic_1+0x238>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	4814      	ldr	r0, [pc, #80]	; (80033b8 <ColorMusic_1+0x25c>)
 8003368:	fba0 0303 	umull	r0, r3, r0, r3
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	b2db      	uxtb	r3, r3
 8003370:	b29b      	uxth	r3, r3
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	b29b      	uxth	r3, r3
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	2301      	movs	r3, #1
 8003380:	4806      	ldr	r0, [pc, #24]	; (800339c <ColorMusic_1+0x240>)
 8003382:	f000 ff39 	bl	80041f8 <Preset_Raindrop>
		}
		buff_full = 0;
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <ColorMusic_1+0x248>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
	}
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000063 	.word	0x20000063
 8003398:	20000065 	.word	0x20000065
 800339c:	200029b4 	.word	0x200029b4
 80033a0:	200026e4 	.word	0x200026e4
 80033a4:	20002c88 	.word	0x20002c88
 80033a8:	467a0000 	.word	0x467a0000
 80033ac:	2000308c 	.word	0x2000308c
 80033b0:	20002c8c 	.word	0x20002c8c
 80033b4:	20000066 	.word	0x20000066
 80033b8:	aaaaaaab 	.word	0xaaaaaaab
 80033bc:	20000067 	.word	0x20000067
 80033c0:	20000068 	.word	0x20000068

080033c4 <ColorMusic_2>:

void ColorMusic_2(){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af02      	add	r7, sp, #8
	static uint8_t hue = 0;

	Effect_Train(layer1, 0, NUM_LEDS - 1, 0, color_music_delay, 0);
 80033ca:	4b5a      	ldr	r3, [pc, #360]	; (8003534 <ColorMusic_2+0x170>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b58      	ldr	r3, [pc, #352]	; (8003538 <ColorMusic_2+0x174>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2100      	movs	r1, #0
 80033dc:	9101      	str	r1, [sp, #4]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	4855      	ldr	r0, [pc, #340]	; (800353c <ColorMusic_2+0x178>)
 80033e6:	f000 fe03 	bl	8003ff0 <Effect_Train>
	Effect_FadeDown(layer1, NUM_LEDS - NUM_LEDS / 4, NUM_LEDS - 1, 0, color_music_delay, 0);
 80033ea:	4b52      	ldr	r3, [pc, #328]	; (8003534 <ColorMusic_2+0x170>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <ColorMusic_2+0x170>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	b299      	uxth	r1, r3
 80033fe:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <ColorMusic_2+0x170>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <ColorMusic_2+0x174>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	2000      	movs	r0, #0
 8003410:	9001      	str	r0, [sp, #4]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2300      	movs	r3, #0
 8003416:	4849      	ldr	r0, [pc, #292]	; (800353c <ColorMusic_2+0x178>)
 8003418:	f000 fd6e 	bl	8003ef8 <Effect_FadeDown>
	for(int i = 0; i < NUM_LEDS; i++)
 800341c:	2300      	movs	r3, #0
 800341e:	607b      	str	r3, [r7, #4]
 8003420:	e00c      	b.n	800343c <ColorMusic_2+0x78>
	  leds[i] = layer1[i];
 8003422:	4847      	ldr	r0, [pc, #284]	; (8003540 <ColorMusic_2+0x17c>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4945      	ldr	r1, [pc, #276]	; (800353c <ColorMusic_2+0x178>)
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4403      	add	r3, r0
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	440a      	add	r2, r1
 8003432:	6810      	ldr	r0, [r2, #0]
 8003434:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3301      	adds	r3, #1
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <ColorMusic_2+0x170>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4293      	cmp	r3, r2
 8003446:	dbec      	blt.n	8003422 <ColorMusic_2+0x5e>

	if(buff_full){
 8003448:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <ColorMusic_2+0x180>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d06c      	beq.n	800352a <ColorMusic_2+0x166>
		FFT(samples, amplitudes, FFT_SIZE, Fd);
 8003450:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <ColorMusic_2+0x184>)
 8003452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003456:	493d      	ldr	r1, [pc, #244]	; (800354c <ColorMusic_2+0x188>)
 8003458:	483d      	ldr	r0, [pc, #244]	; (8003550 <ColorMusic_2+0x18c>)
 800345a:	f7fe f9af 	bl	80017bc <FFT>
		if(find_max_ampl(1, 10) > max_amplitude_low * 1000){
 800345e:	210a      	movs	r1, #10
 8003460:	2001      	movs	r0, #1
 8003462:	f000 fa91 	bl	8003988 <find_max_ampl>
 8003466:	4602      	mov	r2, r0
 8003468:	4b3a      	ldr	r3, [pc, #232]	; (8003554 <ColorMusic_2+0x190>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	4619      	mov	r1, r3
 800346e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	429a      	cmp	r2, r3
 8003478:	dd2e      	ble.n	80034d8 <ColorMusic_2+0x114>
			Preset_Hue(layer1, 0, NUM_LEDS / (NUM_LEDS / 10) - 1, hue);
 800347a:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <ColorMusic_2+0x170>)
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <ColorMusic_2+0x170>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	4935      	ldr	r1, [pc, #212]	; (8003558 <ColorMusic_2+0x194>)
 8003484:	fba1 1303 	umull	r1, r3, r1, r3
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	4b30      	ldr	r3, [pc, #192]	; (800355c <ColorMusic_2+0x198>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2100      	movs	r1, #0
 800349e:	4827      	ldr	r0, [pc, #156]	; (800353c <ColorMusic_2+0x178>)
 80034a0:	f000 ff8a 	bl	80043b8 <Preset_Hue>
			Preset_Raindrop(layer1, 0, NUM_LEDS / (NUM_LEDS / 10) - 1, 0);
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <ColorMusic_2+0x170>)
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	4b22      	ldr	r3, [pc, #136]	; (8003534 <ColorMusic_2+0x170>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	492a      	ldr	r1, [pc, #168]	; (8003558 <ColorMusic_2+0x194>)
 80034ae:	fba1 1303 	umull	r1, r3, r1, r3
 80034b2:	08db      	lsrs	r3, r3, #3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	2300      	movs	r3, #0
 80034c4:	2100      	movs	r1, #0
 80034c6:	481d      	ldr	r0, [pc, #116]	; (800353c <ColorMusic_2+0x178>)
 80034c8:	f000 fe96 	bl	80041f8 <Preset_Raindrop>
			hue+=6;
 80034cc:	4b23      	ldr	r3, [pc, #140]	; (800355c <ColorMusic_2+0x198>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	3306      	adds	r3, #6
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b21      	ldr	r3, [pc, #132]	; (800355c <ColorMusic_2+0x198>)
 80034d6:	701a      	strb	r2, [r3, #0]
		}
		if(find_max_ampl(21, 120) > max_amplitude_high * 1000){
 80034d8:	2178      	movs	r1, #120	; 0x78
 80034da:	2015      	movs	r0, #21
 80034dc:	f000 fa54 	bl	8003988 <find_max_ampl>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <ColorMusic_2+0x19c>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	4619      	mov	r1, r3
 80034e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	429a      	cmp	r2, r3
 80034f2:	dd17      	ble.n	8003524 <ColorMusic_2+0x160>
			Effect_Train(layer1, 0, NUM_LEDS - 1, 0, color_music_delay / 2, 1);
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <ColorMusic_2+0x170>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <ColorMusic_2+0x174>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	2101      	movs	r1, #1
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	2100      	movs	r1, #0
 8003512:	480a      	ldr	r0, [pc, #40]	; (800353c <ColorMusic_2+0x178>)
 8003514:	f000 fd6c 	bl	8003ff0 <Effect_Train>
			hue+=12;
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <ColorMusic_2+0x198>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	b2da      	uxtb	r2, r3
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <ColorMusic_2+0x198>)
 8003522:	701a      	strb	r2, [r3, #0]
		}
		buff_full = 0;
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <ColorMusic_2+0x180>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
	}
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000063 	.word	0x20000063
 8003538:	20000065 	.word	0x20000065
 800353c:	200029b4 	.word	0x200029b4
 8003540:	200026e4 	.word	0x200026e4
 8003544:	20002c88 	.word	0x20002c88
 8003548:	467a0000 	.word	0x467a0000
 800354c:	2000308c 	.word	0x2000308c
 8003550:	20002c8c 	.word	0x20002c8c
 8003554:	20000066 	.word	0x20000066
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	2000328c 	.word	0x2000328c
 8003560:	20000068 	.word	0x20000068

08003564 <ColorMusic_3>:

void ColorMusic_3(){
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af02      	add	r7, sp, #8
	static int start_coord = 0;
	Effect_FadeDown(layer1, 0, NUM_LEDS - 1, 0, color_music_delay, 0);
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <ColorMusic_3+0x2c>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <ColorMusic_3+0x30>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	2100      	movs	r1, #0
 800357c:	9101      	str	r1, [sp, #4]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2300      	movs	r3, #0
 8003582:	2100      	movs	r1, #0
 8003584:	4804      	ldr	r0, [pc, #16]	; (8003598 <ColorMusic_3+0x34>)
 8003586:	f000 fcb7 	bl	8003ef8 <Effect_FadeDown>

	for(int i = 0; i < NUM_LEDS; i++)
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	e012      	b.n	80035b6 <ColorMusic_3+0x52>
 8003590:	20000063 	.word	0x20000063
 8003594:	20000065 	.word	0x20000065
 8003598:	200029b4 	.word	0x200029b4
		leds[i] = layer1[i];
 800359c:	48ac      	ldr	r0, [pc, #688]	; (8003850 <ColorMusic_3+0x2ec>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	49ac      	ldr	r1, [pc, #688]	; (8003854 <ColorMusic_3+0x2f0>)
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4403      	add	r3, r0
 80035a8:	0092      	lsls	r2, r2, #2
 80035aa:	440a      	add	r2, r1
 80035ac:	6810      	ldr	r0, [r2, #0]
 80035ae:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3301      	adds	r3, #1
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	4ba8      	ldr	r3, [pc, #672]	; (8003858 <ColorMusic_3+0x2f4>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4293      	cmp	r3, r2
 80035c0:	dbec      	blt.n	800359c <ColorMusic_3+0x38>

	if(buff_full){
 80035c2:	4ba6      	ldr	r3, [pc, #664]	; (800385c <ColorMusic_3+0x2f8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 81cc 	beq.w	8003964 <ColorMusic_3+0x400>
		FFT(samples, amplitudes, FFT_SIZE, Fd);
 80035cc:	4ba4      	ldr	r3, [pc, #656]	; (8003860 <ColorMusic_3+0x2fc>)
 80035ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d2:	49a4      	ldr	r1, [pc, #656]	; (8003864 <ColorMusic_3+0x300>)
 80035d4:	48a4      	ldr	r0, [pc, #656]	; (8003868 <ColorMusic_3+0x304>)
 80035d6:	f7fe f8f1 	bl	80017bc <FFT>
		if(find_max_ampl(1, 3) > max_amplitude_low * 1000){
 80035da:	2103      	movs	r1, #3
 80035dc:	2001      	movs	r0, #1
 80035de:	f000 f9d3 	bl	8003988 <find_max_ampl>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4ba1      	ldr	r3, [pc, #644]	; (800386c <ColorMusic_3+0x308>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	429a      	cmp	r2, r3
 80035f4:	dd7b      	ble.n	80036ee <ColorMusic_3+0x18a>
			start_coord = rand() % (NUM_LEDS - (NUM_LEDS / 6) - 1);
 80035f6:	f005 ff23 	bl	8009440 <rand>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b96      	ldr	r3, [pc, #600]	; (8003858 <ColorMusic_3+0x2f4>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	4b95      	ldr	r3, [pc, #596]	; (8003858 <ColorMusic_3+0x2f4>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	499a      	ldr	r1, [pc, #616]	; (8003870 <ColorMusic_3+0x30c>)
 8003608:	fba1 1303 	umull	r1, r3, r1, r3
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	b2db      	uxtb	r3, r3
 8003610:	1ac3      	subs	r3, r0, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	fb92 f1f3 	sdiv	r1, r2, r3
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	4a95      	ldr	r2, [pc, #596]	; (8003874 <ColorMusic_3+0x310>)
 8003620:	6013      	str	r3, [r2, #0]
			Preset_Hue(layer1, start_coord, start_coord + (NUM_LEDS / 6) - 1, rand() % 20);
 8003622:	4b94      	ldr	r3, [pc, #592]	; (8003874 <ColorMusic_3+0x310>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	b29c      	uxth	r4, r3
 8003628:	4b8b      	ldr	r3, [pc, #556]	; (8003858 <ColorMusic_3+0x2f4>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4a90      	ldr	r2, [pc, #576]	; (8003870 <ColorMusic_3+0x30c>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	b2db      	uxtb	r3, r3
 8003636:	b29a      	uxth	r2, r3
 8003638:	4b8e      	ldr	r3, [pc, #568]	; (8003874 <ColorMusic_3+0x310>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	4413      	add	r3, r2
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29d      	uxth	r5, r3
 8003646:	f005 fefb 	bl	8009440 <rand>
 800364a:	4602      	mov	r2, r0
 800364c:	4b8a      	ldr	r3, [pc, #552]	; (8003878 <ColorMusic_3+0x314>)
 800364e:	fb83 1302 	smull	r1, r3, r3, r2
 8003652:	10d9      	asrs	r1, r3, #3
 8003654:	17d3      	asrs	r3, r2, #31
 8003656:	1ac9      	subs	r1, r1, r3
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	1ad1      	subs	r1, r2, r3
 8003662:	b2cb      	uxtb	r3, r1
 8003664:	462a      	mov	r2, r5
 8003666:	4621      	mov	r1, r4
 8003668:	487a      	ldr	r0, [pc, #488]	; (8003854 <ColorMusic_3+0x2f0>)
 800366a:	f000 fea5 	bl	80043b8 <Preset_Hue>
			Preset_Raindrop(layer1, start_coord, start_coord + (NUM_LEDS / 10) - 1, 0);
 800366e:	4b81      	ldr	r3, [pc, #516]	; (8003874 <ColorMusic_3+0x310>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b299      	uxth	r1, r3
 8003674:	4b78      	ldr	r3, [pc, #480]	; (8003858 <ColorMusic_3+0x2f4>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4a80      	ldr	r2, [pc, #512]	; (800387c <ColorMusic_3+0x318>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	08db      	lsrs	r3, r3, #3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	b29a      	uxth	r2, r3
 8003684:	4b7b      	ldr	r3, [pc, #492]	; (8003874 <ColorMusic_3+0x310>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	4413      	add	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	486f      	ldr	r0, [pc, #444]	; (8003854 <ColorMusic_3+0x2f0>)
 8003696:	f000 fdaf 	bl	80041f8 <Preset_Raindrop>
			Preset_Raindrop(layer1, start_coord + (NUM_LEDS / 10), start_coord + (NUM_LEDS / 10) + (NUM_LEDS / 10) - 1, 1);
 800369a:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <ColorMusic_3+0x2f4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	4a77      	ldr	r2, [pc, #476]	; (800387c <ColorMusic_3+0x318>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	08db      	lsrs	r3, r3, #3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	4b72      	ldr	r3, [pc, #456]	; (8003874 <ColorMusic_3+0x310>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	b299      	uxth	r1, r3
 80036b4:	4b68      	ldr	r3, [pc, #416]	; (8003858 <ColorMusic_3+0x2f4>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4a70      	ldr	r2, [pc, #448]	; (800387c <ColorMusic_3+0x318>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	08db      	lsrs	r3, r3, #3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	4b6b      	ldr	r3, [pc, #428]	; (8003874 <ColorMusic_3+0x310>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	4b62      	ldr	r3, [pc, #392]	; (8003858 <ColorMusic_3+0x2f4>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	486a      	ldr	r0, [pc, #424]	; (800387c <ColorMusic_3+0x318>)
 80036d4:	fba0 0303 	umull	r0, r3, r0, r3
 80036d8:	08db      	lsrs	r3, r3, #3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4413      	add	r3, r2
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	2301      	movs	r3, #1
 80036e8:	485a      	ldr	r0, [pc, #360]	; (8003854 <ColorMusic_3+0x2f0>)
 80036ea:	f000 fd85 	bl	80041f8 <Preset_Raindrop>
		}
		if(find_max_ampl(1, 20) > max_amplitude_medium * 1000){
 80036ee:	2114      	movs	r1, #20
 80036f0:	2001      	movs	r0, #1
 80036f2:	f000 f949 	bl	8003988 <find_max_ampl>
 80036f6:	4602      	mov	r2, r0
 80036f8:	4b61      	ldr	r3, [pc, #388]	; (8003880 <ColorMusic_3+0x31c>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	429a      	cmp	r2, r3
 8003708:	dd7d      	ble.n	8003806 <ColorMusic_3+0x2a2>
			start_coord = rand() % (NUM_LEDS - (NUM_LEDS / 6) - 1);
 800370a:	f005 fe99 	bl	8009440 <rand>
 800370e:	4602      	mov	r2, r0
 8003710:	4b51      	ldr	r3, [pc, #324]	; (8003858 <ColorMusic_3+0x2f4>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	4b50      	ldr	r3, [pc, #320]	; (8003858 <ColorMusic_3+0x2f4>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4955      	ldr	r1, [pc, #340]	; (8003870 <ColorMusic_3+0x30c>)
 800371c:	fba1 1303 	umull	r1, r3, r1, r3
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	1ac3      	subs	r3, r0, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	fb92 f1f3 	sdiv	r1, r2, r3
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	4a50      	ldr	r2, [pc, #320]	; (8003874 <ColorMusic_3+0x310>)
 8003734:	6013      	str	r3, [r2, #0]
			Preset_Hue(layer1, start_coord, start_coord + (NUM_LEDS / 6) - 1, rand() % 40 + 60);
 8003736:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <ColorMusic_3+0x310>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	b29c      	uxth	r4, r3
 800373c:	4b46      	ldr	r3, [pc, #280]	; (8003858 <ColorMusic_3+0x2f4>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <ColorMusic_3+0x30c>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	b29a      	uxth	r2, r3
 800374c:	4b49      	ldr	r3, [pc, #292]	; (8003874 <ColorMusic_3+0x310>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	4413      	add	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29d      	uxth	r5, r3
 800375a:	f005 fe71 	bl	8009440 <rand>
 800375e:	4602      	mov	r2, r0
 8003760:	4b45      	ldr	r3, [pc, #276]	; (8003878 <ColorMusic_3+0x314>)
 8003762:	fb83 1302 	smull	r1, r3, r3, r2
 8003766:	1119      	asrs	r1, r3, #4
 8003768:	17d3      	asrs	r3, r2, #31
 800376a:	1ac9      	subs	r1, r1, r3
 800376c:	460b      	mov	r3, r1
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	1ad1      	subs	r1, r2, r3
 8003776:	b2cb      	uxtb	r3, r1
 8003778:	333c      	adds	r3, #60	; 0x3c
 800377a:	b2db      	uxtb	r3, r3
 800377c:	462a      	mov	r2, r5
 800377e:	4621      	mov	r1, r4
 8003780:	4834      	ldr	r0, [pc, #208]	; (8003854 <ColorMusic_3+0x2f0>)
 8003782:	f000 fe19 	bl	80043b8 <Preset_Hue>
			Preset_Raindrop(layer1, start_coord, start_coord + (NUM_LEDS / 10) - 1, 0);
 8003786:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <ColorMusic_3+0x310>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	b299      	uxth	r1, r3
 800378c:	4b32      	ldr	r3, [pc, #200]	; (8003858 <ColorMusic_3+0x2f4>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	4a3a      	ldr	r2, [pc, #232]	; (800387c <ColorMusic_3+0x318>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	b29a      	uxth	r2, r3
 800379c:	4b35      	ldr	r3, [pc, #212]	; (8003874 <ColorMusic_3+0x310>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4413      	add	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	4829      	ldr	r0, [pc, #164]	; (8003854 <ColorMusic_3+0x2f0>)
 80037ae:	f000 fd23 	bl	80041f8 <Preset_Raindrop>
			Preset_Raindrop(layer1, start_coord + (NUM_LEDS / 10), start_coord + (NUM_LEDS / 10) + (NUM_LEDS / 10) - 1, 1);
 80037b2:	4b29      	ldr	r3, [pc, #164]	; (8003858 <ColorMusic_3+0x2f4>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	4a31      	ldr	r2, [pc, #196]	; (800387c <ColorMusic_3+0x318>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	08db      	lsrs	r3, r3, #3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <ColorMusic_3+0x310>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	b299      	uxth	r1, r3
 80037cc:	4b22      	ldr	r3, [pc, #136]	; (8003858 <ColorMusic_3+0x2f4>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4a2a      	ldr	r2, [pc, #168]	; (800387c <ColorMusic_3+0x318>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	b29a      	uxth	r2, r3
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <ColorMusic_3+0x310>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <ColorMusic_3+0x2f4>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	4824      	ldr	r0, [pc, #144]	; (800387c <ColorMusic_3+0x318>)
 80037ec:	fba0 0303 	umull	r0, r3, r0, r3
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	2301      	movs	r3, #1
 8003800:	4814      	ldr	r0, [pc, #80]	; (8003854 <ColorMusic_3+0x2f0>)
 8003802:	f000 fcf9 	bl	80041f8 <Preset_Raindrop>
		}
		if(find_max_ampl(21, 127) > max_amplitude_high * 1000){
 8003806:	217f      	movs	r1, #127	; 0x7f
 8003808:	2015      	movs	r0, #21
 800380a:	f000 f8bd 	bl	8003988 <find_max_ampl>
 800380e:	4602      	mov	r2, r0
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <ColorMusic_3+0x320>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	429a      	cmp	r2, r3
 8003820:	f340 809d 	ble.w	800395e <ColorMusic_3+0x3fa>
			start_coord = rand() % (NUM_LEDS - (NUM_LEDS / 6) - 1);
 8003824:	f005 fe0c 	bl	8009440 <rand>
 8003828:	4602      	mov	r2, r0
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <ColorMusic_3+0x2f4>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <ColorMusic_3+0x2f4>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <ColorMusic_3+0x30c>)
 8003836:	fba1 1303 	umull	r1, r3, r1, r3
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	b2db      	uxtb	r3, r3
 800383e:	1ac3      	subs	r3, r0, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	fb92 f1f3 	sdiv	r1, r2, r3
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	e01c      	b.n	8003888 <ColorMusic_3+0x324>
 800384e:	bf00      	nop
 8003850:	200026e4 	.word	0x200026e4
 8003854:	200029b4 	.word	0x200029b4
 8003858:	20000063 	.word	0x20000063
 800385c:	20002c88 	.word	0x20002c88
 8003860:	467a0000 	.word	0x467a0000
 8003864:	2000308c 	.word	0x2000308c
 8003868:	20002c8c 	.word	0x20002c8c
 800386c:	20000066 	.word	0x20000066
 8003870:	aaaaaaab 	.word	0xaaaaaaab
 8003874:	20003290 	.word	0x20003290
 8003878:	66666667 	.word	0x66666667
 800387c:	cccccccd 	.word	0xcccccccd
 8003880:	20000067 	.word	0x20000067
 8003884:	20000068 	.word	0x20000068
 8003888:	4a38      	ldr	r2, [pc, #224]	; (800396c <ColorMusic_3+0x408>)
 800388a:	6013      	str	r3, [r2, #0]
			Preset_Hue(layer1, start_coord, start_coord + (NUM_LEDS / 6) - 1, rand() % 55 + 200);
 800388c:	4b37      	ldr	r3, [pc, #220]	; (800396c <ColorMusic_3+0x408>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b29c      	uxth	r4, r3
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <ColorMusic_3+0x40c>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	4a37      	ldr	r2, [pc, #220]	; (8003974 <ColorMusic_3+0x410>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	4b32      	ldr	r3, [pc, #200]	; (800396c <ColorMusic_3+0x408>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29d      	uxth	r5, r3
 80038b0:	f005 fdc6 	bl	8009440 <rand>
 80038b4:	4601      	mov	r1, r0
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <ColorMusic_3+0x414>)
 80038b8:	fb83 2301 	smull	r2, r3, r3, r1
 80038bc:	105a      	asrs	r2, r3, #1
 80038be:	17cb      	asrs	r3, r1, #31
 80038c0:	1ad2      	subs	r2, r2, r3
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	1aca      	subs	r2, r1, r3
 80038ce:	b2d3      	uxtb	r3, r2
 80038d0:	3b38      	subs	r3, #56	; 0x38
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	462a      	mov	r2, r5
 80038d6:	4621      	mov	r1, r4
 80038d8:	4828      	ldr	r0, [pc, #160]	; (800397c <ColorMusic_3+0x418>)
 80038da:	f000 fd6d 	bl	80043b8 <Preset_Hue>
			Preset_Raindrop(layer1, start_coord, start_coord + (NUM_LEDS / 10) - 1, 0);
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <ColorMusic_3+0x408>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b299      	uxth	r1, r3
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <ColorMusic_3+0x40c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4a25      	ldr	r2, [pc, #148]	; (8003980 <ColorMusic_3+0x41c>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	08db      	lsrs	r3, r3, #3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <ColorMusic_3+0x408>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	2300      	movs	r3, #0
 8003904:	481d      	ldr	r0, [pc, #116]	; (800397c <ColorMusic_3+0x418>)
 8003906:	f000 fc77 	bl	80041f8 <Preset_Raindrop>
			Preset_Raindrop(layer1, start_coord + (NUM_LEDS / 10), start_coord + (NUM_LEDS / 10) + (NUM_LEDS / 10) - 1, 1);
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <ColorMusic_3+0x40c>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <ColorMusic_3+0x41c>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	08db      	lsrs	r3, r3, #3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	b29a      	uxth	r2, r3
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <ColorMusic_3+0x408>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	4413      	add	r3, r2
 8003922:	b299      	uxth	r1, r3
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <ColorMusic_3+0x40c>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <ColorMusic_3+0x41c>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	b29a      	uxth	r2, r3
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <ColorMusic_3+0x408>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	4413      	add	r3, r2
 800393c:	b29a      	uxth	r2, r3
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <ColorMusic_3+0x40c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	480f      	ldr	r0, [pc, #60]	; (8003980 <ColorMusic_3+0x41c>)
 8003944:	fba0 0303 	umull	r0, r3, r0, r3
 8003948:	08db      	lsrs	r3, r3, #3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	4413      	add	r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	2301      	movs	r3, #1
 8003958:	4808      	ldr	r0, [pc, #32]	; (800397c <ColorMusic_3+0x418>)
 800395a:	f000 fc4d 	bl	80041f8 <Preset_Raindrop>
		}
		buff_full = 0;
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <ColorMusic_3+0x420>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
	}
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bdb0      	pop	{r4, r5, r7, pc}
 800396c:	20003290 	.word	0x20003290
 8003970:	20000063 	.word	0x20000063
 8003974:	aaaaaaab 	.word	0xaaaaaaab
 8003978:	094f2095 	.word	0x094f2095
 800397c:	200029b4 	.word	0x200029b4
 8003980:	cccccccd 	.word	0xcccccccd
 8003984:	20002c88 	.word	0x20002c88

08003988 <find_max_ampl>:

int find_max_ampl(int start, int stop){
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	int max_ampl = amplitudes[start];
 8003992:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <find_max_ampl+0x50>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399a:	60fb      	str	r3, [r7, #12]
	for(int i = start; i < stop - 1; i++){
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	e00e      	b.n	80039c0 <find_max_ampl+0x38>
		if(amplitudes[i] > max_ampl)
 80039a2:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <find_max_ampl+0x50>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	da04      	bge.n	80039ba <find_max_ampl+0x32>
			max_ampl = amplitudes[i];
 80039b0:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <find_max_ampl+0x50>)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	60fb      	str	r3, [r7, #12]
	for(int i = start; i < stop - 1; i++){
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3301      	adds	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	dbeb      	blt.n	80039a2 <find_max_ampl+0x1a>
	}
	return max_ampl;
 80039ca:	68fb      	ldr	r3, [r7, #12]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	2000308c 	.word	0x2000308c

080039dc <HAL_ADC_ConvCpltCallback>:
	}
	return max_freq;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	if(hadc == H_ADC){
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <HAL_ADC_ConvCpltCallback+0x58>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d11f      	bne.n	8003a2c <HAL_ADC_ConvCpltCallback+0x50>
		static int i = 0;
		if(i < FFT_SIZE && !buff_full){
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_ADC_ConvCpltCallback+0x5c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2bff      	cmp	r3, #255	; 0xff
 80039f2:	dc15      	bgt.n	8003a20 <HAL_ADC_ConvCpltCallback+0x44>
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_ADC_ConvCpltCallback+0x60>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d111      	bne.n	8003a20 <HAL_ADC_ConvCpltCallback+0x44>
		  samples[i] = HAL_ADC_GetValue(H_ADC) - 2048;
 80039fc:	480d      	ldr	r0, [pc, #52]	; (8003a34 <HAL_ADC_ConvCpltCallback+0x58>)
 80039fe:	f001 ff0f 	bl	8005820 <HAL_ADC_GetValue>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_ADC_ConvCpltCallback+0x5c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <HAL_ADC_ConvCpltCallback+0x64>)
 8003a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  i++;
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_ADC_ConvCpltCallback+0x5c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_ADC_ConvCpltCallback+0x5c>)
 8003a1c:	6013      	str	r3, [r2, #0]
		else {
			buff_full = 1;
			i = 0;
		}
	}
}
 8003a1e:	e005      	b.n	8003a2c <HAL_ADC_ConvCpltCallback+0x50>
			buff_full = 1;
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_ADC_ConvCpltCallback+0x60>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
			i = 0;
 8003a26:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <HAL_ADC_ConvCpltCallback+0x5c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000346c 	.word	0x2000346c
 8003a38:	20003294 	.word	0x20003294
 8003a3c:	20002c88 	.word	0x20002c88
 8003a40:	20002c8c 	.word	0x20002c8c

08003a44 <Effect_Loop>:
extern WS2812B_t leds[];
extern uint8_t NUM_LEDS;
extern uint8_t BRIGHTNESS;


int Effect_Loop(WS2812B_t* layer, uint16_t begin, uint16_t end, uint8_t mirrored, uint16_t delay, uint8_t n_effect){
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	817b      	strh	r3, [r7, #10]
 8003a56:	460b      	mov	r3, r1
 8003a58:	813b      	strh	r3, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	71fb      	strb	r3, [r7, #7]
	static unsigned long T[16] = {0};
	static int counter[16] = {0};
	if((HAL_GetTick() - T[n_effect]) >= delay){
 8003a5e:	f001 fd23 	bl	80054a8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a68:	4945      	ldr	r1, [pc, #276]	; (8003b80 <Effect_Loop+0x13c>)
 8003a6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d37f      	bcc.n	8003b76 <Effect_Loop+0x132>
		WS2812B_t tmp;
		if(!mirrored){
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d12a      	bne.n	8003ad2 <Effect_Loop+0x8e>
			tmp = layer[end];
 8003a7c:	893b      	ldrh	r3, [r7, #8]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	441a      	add	r2, r3
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	6810      	ldr	r0, [r2, #0]
 8003a8a:	6018      	str	r0, [r3, #0]
			for(int i = end; i >= begin; i--)
 8003a8c:	893b      	ldrh	r3, [r7, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	e011      	b.n	8003ab6 <Effect_Loop+0x72>
				layer[i] = layer[i - 1];
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	18d1      	adds	r1, r2, r3
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	460b      	mov	r3, r1
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6013      	str	r3, [r2, #0]
			for(int i = end; i >= begin; i--)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	dae9      	bge.n	8003a92 <Effect_Loop+0x4e>
			layer[begin] = tmp;
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f107 0314 	add.w	r3, r7, #20
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	6010      	str	r0, [r2, #0]
 8003ad0:	e027      	b.n	8003b22 <Effect_Loop+0xde>
		}
		else{
			tmp = layer[begin];
 8003ad2:	897b      	ldrh	r3, [r7, #10]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	441a      	add	r2, r3
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	6810      	ldr	r0, [r2, #0]
 8003ae0:	6018      	str	r0, [r3, #0]
			for(int i = begin; i <= end; i++)
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e00f      	b.n	8003b08 <Effect_Loop+0xc4>
				layer[i] = layer[i + 1];
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	3301      	adds	r3, #1
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	18d1      	adds	r1, r2, r3
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4413      	add	r3, r2
 8003afa:	461a      	mov	r2, r3
 8003afc:	460b      	mov	r3, r1
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6013      	str	r3, [r2, #0]
			for(int i = begin; i <= end; i++)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	ddeb      	ble.n	8003ae8 <Effect_Loop+0xa4>
			layer[end] = tmp;
 8003b10:	893b      	ldrh	r3, [r7, #8]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	6010      	str	r0, [r2, #0]
		}
		T[n_effect] = HAL_GetTick();
 8003b22:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8003b26:	f001 fcbf 	bl	80054a8 <HAL_GetTick>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <Effect_Loop+0x13c>)
 8003b2e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if(counter[n_effect] >= (end - begin))
 8003b32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b36:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <Effect_Loop+0x140>)
 8003b38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b3c:	8939      	ldrh	r1, [r7, #8]
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	1acb      	subs	r3, r1, r3
 8003b42:	429a      	cmp	r2, r3
 8003b44:	db08      	blt.n	8003b58 <Effect_Loop+0x114>
		{
			counter[n_effect] = 0;
 8003b46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <Effect_Loop+0x140>)
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return END_CYCLE;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	e00f      	b.n	8003b78 <Effect_Loop+0x134>
		}
		counter[n_effect]++;
 8003b58:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <Effect_Loop+0x140>)
 8003b5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b62:	3201      	adds	r2, #1
 8003b64:	4907      	ldr	r1, [pc, #28]	; (8003b84 <Effect_Loop+0x140>)
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return counter[n_effect];
 8003b6a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <Effect_Loop+0x140>)
 8003b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b74:	e000      	b.n	8003b78 <Effect_Loop+0x134>
	}
	return 0;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3724      	adds	r7, #36	; 0x24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd90      	pop	{r4, r7, pc}
 8003b80:	20003298 	.word	0x20003298
 8003b84:	200032d8 	.word	0x200032d8

08003b88 <Effect_Rainbow>:
		counter[n_effect]++;
		return counter[n_effect];
	}
	return 0;
}
int Effect_Rainbow(WS2812B_t* layer, uint16_t begin, uint16_t end, uint8_t mirrored, uint16_t delay, uint8_t n_effect){
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	813b      	strh	r3, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	71fb      	strb	r3, [r7, #7]
	static unsigned long T[16] = {0};
	static uint8_t counter[16] = {0};
	if((HAL_GetTick() - T[n_effect]) >= delay){
 8003ba2:	f001 fc81 	bl	80054a8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bac:	491f      	ldr	r1, [pc, #124]	; (8003c2c <Effect_Rainbow+0xa4>)
 8003bae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bb2:	1ad2      	subs	r2, r2, r3
 8003bb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d333      	bcc.n	8003c22 <Effect_Rainbow+0x9a>
		for(int i = begin; i <= end; i++){
 8003bba:	897b      	ldrh	r3, [r7, #10]
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e00e      	b.n	8003bde <Effect_Rainbow+0x56>
			WS2812B_SetPixelHSV(layer, counter[n_effect], 255, 255, i);
 8003bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bc4:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <Effect_Rainbow+0xa8>)
 8003bc6:	5cd1      	ldrb	r1, [r2, r3]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	23ff      	movs	r3, #255	; 0xff
 8003bd0:	22ff      	movs	r2, #255	; 0xff
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7fe fb48 	bl	8002268 <WS2812B_SetPixelHSV>
		for(int i = begin; i <= end; i++){
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	893b      	ldrh	r3, [r7, #8]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	ddec      	ble.n	8003bc0 <Effect_Rainbow+0x38>
		}
		counter[n_effect]++;
 8003be6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <Effect_Rainbow+0xa8>)
 8003bec:	5cd2      	ldrb	r2, [r2, r3]
 8003bee:	3201      	adds	r2, #1
 8003bf0:	b2d1      	uxtb	r1, r2
 8003bf2:	4a0f      	ldr	r2, [pc, #60]	; (8003c30 <Effect_Rainbow+0xa8>)
 8003bf4:	54d1      	strb	r1, [r2, r3]
		T[n_effect] = HAL_GetTick();
 8003bf6:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 8003bfa:	f001 fc55 	bl	80054a8 <HAL_GetTick>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <Effect_Rainbow+0xa4>)
 8003c02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if(counter[n_effect] == 0)
 8003c06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <Effect_Rainbow+0xa8>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <Effect_Rainbow+0x90>
			return END_CYCLE;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
 8003c16:	e005      	b.n	8003c24 <Effect_Rainbow+0x9c>
		return counter[n_effect];
 8003c18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <Effect_Rainbow+0xa8>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	e000      	b.n	8003c24 <Effect_Rainbow+0x9c>
	}
	return 0;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd90      	pop	{r4, r7, pc}
 8003c2c:	20003318 	.word	0x20003318
 8003c30:	20003358 	.word	0x20003358

08003c34 <Effect_Fade>:

int Effect_Fade(WS2812B_t* layer, uint16_t begin, uint16_t end, uint8_t mirrored, uint16_t delay, uint8_t n_effect){
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b089      	sub	sp, #36	; 0x24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	817b      	strh	r3, [r7, #10]
 8003c46:	460b      	mov	r3, r1
 8003c48:	813b      	strh	r3, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	71fb      	strb	r3, [r7, #7]
	static int updown[16] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
	static int counter[16] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
	static unsigned long T[16] = {0};
	if(!mirrored){
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 809c 	bne.w	8003d8e <Effect_Fade+0x15a>
		if((HAL_GetTick() - T[n_effect]) >= delay){
 8003c56:	f001 fc27 	bl	80054a8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c60:	49a1      	ldr	r1, [pc, #644]	; (8003ee8 <Effect_Fade+0x2b4>)
 8003c62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c66:	1ad2      	subs	r2, r2, r3
 8003c68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	f0c0 8137 	bcc.w	8003ede <Effect_Fade+0x2aa>
			if(updown[n_effect])
 8003c70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c74:	4a9d      	ldr	r2, [pc, #628]	; (8003eec <Effect_Fade+0x2b8>)
 8003c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d035      	beq.n	8003cea <Effect_Fade+0xb6>
			{
				for(int i = begin; i <= end; i++){
 8003c7e:	897b      	ldrh	r3, [r7, #10]
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e015      	b.n	8003cb0 <Effect_Fade+0x7c>
					if(layer[i].brightness != 0)
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	78db      	ldrb	r3, [r3, #3]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <Effect_Fade+0x76>
						WS2812B_SetPixelBrightness(layer, counter[n_effect], i);
 8003c92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c96:	4a96      	ldr	r2, [pc, #600]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7fe fa15 	bl	80020d4 <WS2812B_SetPixelBrightness>
				for(int i = begin; i <= end; i++){
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3301      	adds	r3, #1
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	dde5      	ble.n	8003c84 <Effect_Fade+0x50>
				}
				counter[n_effect]++;
 8003cb8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cbc:	4a8c      	ldr	r2, [pc, #560]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003cbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cc2:	3201      	adds	r2, #1
 8003cc4:	498a      	ldr	r1, [pc, #552]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter[n_effect] >= BRIGHTNESS)
 8003cca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cce:	4a88      	ldr	r2, [pc, #544]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd4:	4a87      	ldr	r2, [pc, #540]	; (8003ef4 <Effect_Fade+0x2c0>)
 8003cd6:	7812      	ldrb	r2, [r2, #0]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	db40      	blt.n	8003d5e <Effect_Fade+0x12a>
					updown[n_effect] = 0;
 8003cdc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ce0:	4a82      	ldr	r2, [pc, #520]	; (8003eec <Effect_Fade+0x2b8>)
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003ce8:	e039      	b.n	8003d5e <Effect_Fade+0x12a>
			}

			else if(!updown[n_effect])
 8003cea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cee:	4a7f      	ldr	r2, [pc, #508]	; (8003eec <Effect_Fade+0x2b8>)
 8003cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d132      	bne.n	8003d5e <Effect_Fade+0x12a>
			{
				for(int i = begin; i <= end; i++){
 8003cf8:	897b      	ldrh	r3, [r7, #10]
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e015      	b.n	8003d2a <Effect_Fade+0xf6>
					if(layer[i].brightness != 0)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	78db      	ldrb	r3, [r3, #3]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <Effect_Fade+0xf0>
						WS2812B_SetPixelBrightness(layer, counter[n_effect], i);
 8003d0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d10:	4a77      	ldr	r2, [pc, #476]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7fe f9d8 	bl	80020d4 <WS2812B_SetPixelBrightness>
				for(int i = begin; i <= end; i++){
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3301      	adds	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	dde5      	ble.n	8003cfe <Effect_Fade+0xca>
				}
				counter[n_effect]--;
 8003d32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d36:	4a6e      	ldr	r2, [pc, #440]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d3c:	3a01      	subs	r2, #1
 8003d3e:	496c      	ldr	r1, [pc, #432]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter[n_effect] <= 1)
 8003d44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d48:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	dc05      	bgt.n	8003d5e <Effect_Fade+0x12a>
					updown[n_effect] = 1;
 8003d52:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d56:	4a65      	ldr	r2, [pc, #404]	; (8003eec <Effect_Fade+0x2b8>)
 8003d58:	2101      	movs	r1, #1
 8003d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			T[n_effect] = HAL_GetTick();
 8003d5e:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8003d62:	f001 fba1 	bl	80054a8 <HAL_GetTick>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4a5f      	ldr	r2, [pc, #380]	; (8003ee8 <Effect_Fade+0x2b4>)
 8003d6a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(counter[n_effect] == 1)
 8003d6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d72:	4a5f      	ldr	r2, [pc, #380]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d102      	bne.n	8003d82 <Effect_Fade+0x14e>
				return END_CYCLE;
 8003d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d80:	e0ae      	b.n	8003ee0 <Effect_Fade+0x2ac>
			return counter[n_effect];
 8003d82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d86:	4a5a      	ldr	r2, [pc, #360]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	e0a8      	b.n	8003ee0 <Effect_Fade+0x2ac>
		}
	}
	else{
		if((HAL_GetTick() - T[n_effect]) >= delay){
 8003d8e:	f001 fb8b 	bl	80054a8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d98:	4953      	ldr	r1, [pc, #332]	; (8003ee8 <Effect_Fade+0x2b4>)
 8003d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d9e:	1ad2      	subs	r2, r2, r3
 8003da0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003da2:	429a      	cmp	r2, r3
 8003da4:	f0c0 809b 	bcc.w	8003ede <Effect_Fade+0x2aa>
			if(!updown[n_effect])
 8003da8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003dac:	4a4f      	ldr	r2, [pc, #316]	; (8003eec <Effect_Fade+0x2b8>)
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d139      	bne.n	8003e2a <Effect_Fade+0x1f6>
			{
				for(int i = begin; i <= end; i++){
 8003db6:	897b      	ldrh	r3, [r7, #10]
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e01b      	b.n	8003df4 <Effect_Fade+0x1c0>
					if(layer[i].brightness != 0)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	78db      	ldrb	r3, [r3, #3]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <Effect_Fade+0x1ba>
						WS2812B_SetPixelBrightness(layer, BRIGHTNESS - counter[n_effect] + 1, i);
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <Effect_Fade+0x2c0>)
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003dd2:	4947      	ldr	r1, [pc, #284]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003dd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7fe f973 	bl	80020d4 <WS2812B_SetPixelBrightness>
				for(int i = begin; i <= end; i++){
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3301      	adds	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	893b      	ldrh	r3, [r7, #8]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	dddf      	ble.n	8003dbc <Effect_Fade+0x188>
				}
				counter[n_effect]--;
 8003dfc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e00:	4a3b      	ldr	r2, [pc, #236]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003e02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e06:	3a01      	subs	r2, #1
 8003e08:	4939      	ldr	r1, [pc, #228]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter[n_effect] <= 1)
 8003e0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e12:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	dc48      	bgt.n	8003eae <Effect_Fade+0x27a>
					updown[n_effect] = 1;
 8003e1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e20:	4a32      	ldr	r2, [pc, #200]	; (8003eec <Effect_Fade+0x2b8>)
 8003e22:	2101      	movs	r1, #1
 8003e24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003e28:	e041      	b.n	8003eae <Effect_Fade+0x27a>

			}

			else if(updown[n_effect])
 8003e2a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e2e:	4a2f      	ldr	r2, [pc, #188]	; (8003eec <Effect_Fade+0x2b8>)
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d03a      	beq.n	8003eae <Effect_Fade+0x27a>
			{
				for(int i = begin; i <= end; i++){
 8003e38:	897b      	ldrh	r3, [r7, #10]
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	e01b      	b.n	8003e76 <Effect_Fade+0x242>
					if(layer[i].brightness != 0)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d011      	beq.n	8003e70 <Effect_Fade+0x23c>
						WS2812B_SetPixelBrightness(layer, BRIGHTNESS - counter[n_effect] + 1, i);
 8003e4c:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <Effect_Fade+0x2c0>)
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e54:	4926      	ldr	r1, [pc, #152]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7fe f932 	bl	80020d4 <WS2812B_SetPixelBrightness>
				for(int i = begin; i <= end; i++){
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	3301      	adds	r3, #1
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	893b      	ldrh	r3, [r7, #8]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	dddf      	ble.n	8003e3e <Effect_Fade+0x20a>
				}
				counter[n_effect]++;
 8003e7e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e82:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003e84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e88:	3201      	adds	r2, #1
 8003e8a:	4919      	ldr	r1, [pc, #100]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter[n_effect] >= BRIGHTNESS)
 8003e90:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9a:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <Effect_Fade+0x2c0>)
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	db05      	blt.n	8003eae <Effect_Fade+0x27a>
					updown[n_effect] = 0;
 8003ea2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <Effect_Fade+0x2b8>)
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			T[n_effect] = HAL_GetTick();
 8003eae:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8003eb2:	f001 faf9 	bl	80054a8 <HAL_GetTick>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <Effect_Fade+0x2b4>)
 8003eba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(counter[n_effect] == 1)
 8003ebe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ec2:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d102      	bne.n	8003ed2 <Effect_Fade+0x29e>
				return END_CYCLE;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	e006      	b.n	8003ee0 <Effect_Fade+0x2ac>
			return counter[n_effect];
 8003ed2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ed6:	4a06      	ldr	r2, [pc, #24]	; (8003ef0 <Effect_Fade+0x2bc>)
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	e000      	b.n	8003ee0 <Effect_Fade+0x2ac>
		}
	}
	return 0;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3724      	adds	r7, #36	; 0x24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	20003368 	.word	0x20003368
 8003eec:	20000070 	.word	0x20000070
 8003ef0:	200000b0 	.word	0x200000b0
 8003ef4:	20000062 	.word	0x20000062

08003ef8 <Effect_FadeDown>:


int Effect_FadeDown(WS2812B_t* layer, uint16_t begin, uint16_t end, uint8_t mirrored, uint16_t delay, uint8_t n_effect){
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	71fb      	strb	r3, [r7, #7]
	static unsigned long T[16] = {0};
	if((HAL_GetTick() - T[n_effect]) >= delay){
 8003f12:	f001 fac9 	bl	80054a8 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f1c:	4932      	ldr	r1, [pc, #200]	; (8003fe8 <Effect_FadeDown+0xf0>)
 8003f1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d358      	bcc.n	8003fdc <Effect_FadeDown+0xe4>
		if(!mirrored){
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d124      	bne.n	8003f7a <Effect_FadeDown+0x82>
			for(int i = begin; i <= end; i++)
 8003f30:	897b      	ldrh	r3, [r7, #10]
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e01c      	b.n	8003f70 <Effect_FadeDown+0x78>
				if(layer[i].brightness > 0){
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	78db      	ldrb	r3, [r3, #3]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d012      	beq.n	8003f6a <Effect_FadeDown+0x72>
					layer[i].brightness--;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	78da      	ldrb	r2, [r3, #3]
 8003f4e:	3a01      	subs	r2, #1
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	70da      	strb	r2, [r3, #3]
					WS2812B_SetPixelBrightness(layer, layer[i].brightness, i);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	78db      	ldrb	r3, [r3, #3]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7fe f8b5 	bl	80020d4 <WS2812B_SetPixelBrightness>
			for(int i = begin; i <= end; i++)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	ddde      	ble.n	8003f36 <Effect_FadeDown+0x3e>
 8003f78:	e025      	b.n	8003fc6 <Effect_FadeDown+0xce>
				}
		}
		else{
			for(int i = begin; i <= end; i++)
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	e01e      	b.n	8003fbe <Effect_FadeDown+0xc6>
				if(layer[i].brightness < BRIGHTNESS){
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	78da      	ldrb	r2, [r3, #3]
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <Effect_FadeDown+0xf4>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d212      	bcs.n	8003fb8 <Effect_FadeDown+0xc0>
					layer[i].brightness++;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	78da      	ldrb	r2, [r3, #3]
 8003f9c:	3201      	adds	r2, #1
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	70da      	strb	r2, [r3, #3]
					WS2812B_SetPixelBrightness(layer, layer[i].brightness, i);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	78db      	ldrb	r3, [r3, #3]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7fe f88e 	bl	80020d4 <WS2812B_SetPixelBrightness>
			for(int i = begin; i <= end; i++)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	893b      	ldrh	r3, [r7, #8]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	dddc      	ble.n	8003f80 <Effect_FadeDown+0x88>
				}
		}
		T[n_effect] = HAL_GetTick();
 8003fc6:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 8003fca:	f001 fa6d 	bl	80054a8 <HAL_GetTick>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <Effect_FadeDown+0xf0>)
 8003fd2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		return END_CYCLE;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	e000      	b.n	8003fde <Effect_FadeDown+0xe6>
	}
	return 0;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd90      	pop	{r4, r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200033a8 	.word	0x200033a8
 8003fec:	20000062 	.word	0x20000062

08003ff0 <Effect_Train>:

int Effect_Train(WS2812B_t* layer, uint16_t begin, uint16_t end, uint8_t mirrored, uint16_t delay, uint8_t n_effect){
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	817b      	strh	r3, [r7, #10]
 8004002:	460b      	mov	r3, r1
 8004004:	813b      	strh	r3, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	71fb      	strb	r3, [r7, #7]
	static unsigned long T[16] = {0};
	static int counter[16] = {0};
	if((HAL_GetTick() - T[n_effect]) >= delay){
 800400a:	f001 fa4d 	bl	80054a8 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004014:	4944      	ldr	r1, [pc, #272]	; (8004128 <Effect_Train+0x138>)
 8004016:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800401a:	1ad2      	subs	r2, r2, r3
 800401c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800401e:	429a      	cmp	r2, r3
 8004020:	d37d      	bcc.n	800411e <Effect_Train+0x12e>
		if(!mirrored){
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d129      	bne.n	800407c <Effect_Train+0x8c>
			for(int i = end; i > begin; i--){
 8004028:	893b      	ldrh	r3, [r7, #8]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e011      	b.n	8004052 <Effect_Train+0x62>
				layer[i] = layer[i - 1];
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004034:	3b01      	subs	r3, #1
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	18d1      	adds	r1, r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	461a      	mov	r2, r3
 8004046:	460b      	mov	r3, r1
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6013      	str	r3, [r2, #0]
			for(int i = end; i > begin; i--){
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3b01      	subs	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	897b      	ldrh	r3, [r7, #10]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	429a      	cmp	r2, r3
 8004058:	dce9      	bgt.n	800402e <Effect_Train+0x3e>
			}
			WS2812B_SetPixelBrightness(layer, 0, begin);
 800405a:	897b      	ldrh	r3, [r7, #10]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	2100      	movs	r1, #0
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7fe f836 	bl	80020d4 <WS2812B_SetPixelBrightness>
			WS2812B_SetPixelRGB(layer, 0, 0, 0, begin);
 8004068:	897b      	ldrh	r3, [r7, #10]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2300      	movs	r3, #0
 8004070:	2200      	movs	r2, #0
 8004072:	2100      	movs	r1, #0
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7fe f8d3 	bl	8002220 <WS2812B_SetPixelRGB>
 800407a:	e026      	b.n	80040ca <Effect_Train+0xda>
		}
		else{
			for(int i = begin; i < end; i++){
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	e00f      	b.n	80040a2 <Effect_Train+0xb2>
				layer[i] = layer[i + 1];
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	3301      	adds	r3, #1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	18d1      	adds	r1, r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	461a      	mov	r2, r3
 8004096:	460b      	mov	r3, r1
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6013      	str	r3, [r2, #0]
			for(int i = begin; i < end; i++){
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	3301      	adds	r3, #1
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	893b      	ldrh	r3, [r7, #8]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	dbeb      	blt.n	8004082 <Effect_Train+0x92>
			}
			WS2812B_SetPixelBrightness(layer, 0, end);
 80040aa:	893b      	ldrh	r3, [r7, #8]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	2100      	movs	r1, #0
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7fe f80e 	bl	80020d4 <WS2812B_SetPixelBrightness>
			WS2812B_SetPixelRGB(layer, 0, 0, 0, end);
 80040b8:	893b      	ldrh	r3, [r7, #8]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2300      	movs	r3, #0
 80040c0:	2200      	movs	r2, #0
 80040c2:	2100      	movs	r1, #0
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7fe f8ab 	bl	8002220 <WS2812B_SetPixelRGB>
		}
		T[n_effect] = HAL_GetTick();
 80040ca:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 80040ce:	f001 f9eb 	bl	80054a8 <HAL_GetTick>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <Effect_Train+0x138>)
 80040d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		counter[n_effect]++;
 80040da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040de:	4a13      	ldr	r2, [pc, #76]	; (800412c <Effect_Train+0x13c>)
 80040e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040e4:	3201      	adds	r2, #1
 80040e6:	4911      	ldr	r1, [pc, #68]	; (800412c <Effect_Train+0x13c>)
 80040e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(counter[n_effect] >= (end - begin)){
 80040ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040f0:	4a0e      	ldr	r2, [pc, #56]	; (800412c <Effect_Train+0x13c>)
 80040f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040f6:	8939      	ldrh	r1, [r7, #8]
 80040f8:	897b      	ldrh	r3, [r7, #10]
 80040fa:	1acb      	subs	r3, r1, r3
 80040fc:	429a      	cmp	r2, r3
 80040fe:	db08      	blt.n	8004112 <Effect_Train+0x122>
			counter[n_effect] = 0;
 8004100:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004104:	4a09      	ldr	r2, [pc, #36]	; (800412c <Effect_Train+0x13c>)
 8004106:	2100      	movs	r1, #0
 8004108:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return END_CYCLE;
 800410c:	f04f 33ff 	mov.w	r3, #4294967295
 8004110:	e006      	b.n	8004120 <Effect_Train+0x130>
		}
		return counter[n_effect];
 8004112:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004116:	4a05      	ldr	r2, [pc, #20]	; (800412c <Effect_Train+0x13c>)
 8004118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411c:	e000      	b.n	8004120 <Effect_Train+0x130>
	}
	return 0;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd90      	pop	{r4, r7, pc}
 8004128:	200033e8 	.word	0x200033e8
 800412c:	20003428 	.word	0x20003428

08004130 <Preset_Rainbow>:

extern WS2812B_t leds[];
extern uint8_t NUM_LEDS;
extern uint8_t BRIGHTNESS;

void Preset_Rainbow(WS2812B_t* layer, uint16_t begin, uint16_t end, uint8_t mirrored){
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	461a      	mov	r2, r3
 800413e:	4603      	mov	r3, r0
 8004140:	817b      	strh	r3, [r7, #10]
 8004142:	460b      	mov	r3, r1
 8004144:	813b      	strh	r3, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	71fb      	strb	r3, [r7, #7]
	float step = (float)255 / (float)(end - begin);
 800414a:	893a      	ldrh	r2, [r7, #8]
 800414c:	897b      	ldrh	r3, [r7, #10]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc fd7b 	bl	8000c4c <__aeabi_i2f>
 8004156:	4603      	mov	r3, r0
 8004158:	4619      	mov	r1, r3
 800415a:	4826      	ldr	r0, [pc, #152]	; (80041f4 <Preset_Rainbow+0xc4>)
 800415c:	f7fc fe7e 	bl	8000e5c <__aeabi_fdiv>
 8004160:	4603      	mov	r3, r0
 8004162:	613b      	str	r3, [r7, #16]
	int j = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
	if(!mirrored){
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d11f      	bne.n	80041ae <Preset_Rainbow+0x7e>
		for(int i = begin; i <= end; i++){
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	e017      	b.n	80041a4 <Preset_Rainbow+0x74>
			WS2812B_SetPixelHSV(layer, j * (uint8_t)step, 255, 255, i);
 8004174:	6938      	ldr	r0, [r7, #16]
 8004176:	f7fc ffa9 	bl	80010cc <__aeabi_f2uiz>
 800417a:	4603      	mov	r3, r0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	b2d9      	uxtb	r1, r3
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	23ff      	movs	r3, #255	; 0xff
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7fe f868 	bl	8002268 <WS2812B_SetPixelHSV>
			j++;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	3301      	adds	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
		for(int i = begin; i <= end; i++){
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	3301      	adds	r3, #1
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	dde3      	ble.n	8004174 <Preset_Rainbow+0x44>
		for(int i = end; i >= begin; i--){
			WS2812B_SetPixelHSV(layer, j * (uint8_t)step, 255, 255, i);
			j++;
		}
	}
}
 80041ac:	e01e      	b.n	80041ec <Preset_Rainbow+0xbc>
		for(int i = end; i >= begin; i--){
 80041ae:	893b      	ldrh	r3, [r7, #8]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e017      	b.n	80041e4 <Preset_Rainbow+0xb4>
			WS2812B_SetPixelHSV(layer, j * (uint8_t)step, 255, 255, i);
 80041b4:	6938      	ldr	r0, [r7, #16]
 80041b6:	f7fc ff89 	bl	80010cc <__aeabi_f2uiz>
 80041ba:	4603      	mov	r3, r0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	b2d9      	uxtb	r1, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	23ff      	movs	r3, #255	; 0xff
 80041d0:	22ff      	movs	r2, #255	; 0xff
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7fe f848 	bl	8002268 <WS2812B_SetPixelHSV>
			j++;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3301      	adds	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
		for(int i = end; i >= begin; i--){
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	897b      	ldrh	r3, [r7, #10]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	dae3      	bge.n	80041b4 <Preset_Rainbow+0x84>
}
 80041ec:	bf00      	nop
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	437f0000 	.word	0x437f0000

080041f8 <Preset_Raindrop>:

void Preset_Raindrop(WS2812B_t* layer, uint16_t begin, uint16_t end, uint8_t mirrored){
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	817b      	strh	r3, [r7, #10]
 800420a:	460b      	mov	r3, r1
 800420c:	813b      	strh	r3, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	71fb      	strb	r3, [r7, #7]
	float step = (float)BRIGHTNESS/ (float)(end - begin);
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <Preset_Raindrop+0xf4>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc fd14 	bl	8000c44 <__aeabi_ui2f>
 800421c:	4604      	mov	r4, r0
 800421e:	893a      	ldrh	r2, [r7, #8]
 8004220:	897b      	ldrh	r3, [r7, #10]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc fd11 	bl	8000c4c <__aeabi_i2f>
 800422a:	4603      	mov	r3, r0
 800422c:	4619      	mov	r1, r3
 800422e:	4620      	mov	r0, r4
 8004230:	f7fc fe14 	bl	8000e5c <__aeabi_fdiv>
 8004234:	4603      	mov	r3, r0
 8004236:	613b      	str	r3, [r7, #16]
	float j = 0;
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
	if(!mirrored){
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d127      	bne.n	8004294 <Preset_Raindrop+0x9c>
		for(int i = begin; i <= end; i++){
 8004244:	897b      	ldrh	r3, [r7, #10]
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	e01f      	b.n	800428a <Preset_Raindrop+0x92>
			WS2812B_SetPixelBrightness(layer, (uint8_t)(j * step + 1), i);
 800424a:	6939      	ldr	r1, [r7, #16]
 800424c:	69f8      	ldr	r0, [r7, #28]
 800424e:	f7fc fd51 	bl	8000cf4 <__aeabi_fmul>
 8004252:	4603      	mov	r3, r0
 8004254:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc fc43 	bl	8000ae4 <__addsf3>
 800425e:	4603      	mov	r3, r0
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc ff33 	bl	80010cc <__aeabi_f2uiz>
 8004266:	4603      	mov	r3, r0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	4619      	mov	r1, r3
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7fd ff2f 	bl	80020d4 <WS2812B_SetPixelBrightness>
			j++;
 8004276:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800427a:	69f8      	ldr	r0, [r7, #28]
 800427c:	f7fc fc32 	bl	8000ae4 <__addsf3>
 8004280:	4603      	mov	r3, r0
 8004282:	61fb      	str	r3, [r7, #28]
		for(int i = begin; i <= end; i++){
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	3301      	adds	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	429a      	cmp	r2, r3
 8004290:	dddb      	ble.n	800424a <Preset_Raindrop+0x52>
		for(int i = end; i >= begin; i--){
			WS2812B_SetPixelBrightness(layer, (uint8_t)(j * step + 1), i);
			j++;
		}
	}
}
 8004292:	e026      	b.n	80042e2 <Preset_Raindrop+0xea>
		for(int i = end; i >= begin; i--){
 8004294:	893b      	ldrh	r3, [r7, #8]
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e01f      	b.n	80042da <Preset_Raindrop+0xe2>
			WS2812B_SetPixelBrightness(layer, (uint8_t)(j * step + 1), i);
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	69f8      	ldr	r0, [r7, #28]
 800429e:	f7fc fd29 	bl	8000cf4 <__aeabi_fmul>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fc fc1b 	bl	8000ae4 <__addsf3>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc ff0b 	bl	80010cc <__aeabi_f2uiz>
 80042b6:	4603      	mov	r3, r0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f7fd ff07 	bl	80020d4 <WS2812B_SetPixelBrightness>
			j++;
 80042c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80042ca:	69f8      	ldr	r0, [r7, #28]
 80042cc:	f7fc fc0a 	bl	8000ae4 <__addsf3>
 80042d0:	4603      	mov	r3, r0
 80042d2:	61fb      	str	r3, [r7, #28]
		for(int i = end; i >= begin; i--){
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	429a      	cmp	r2, r3
 80042e0:	dadb      	bge.n	800429a <Preset_Raindrop+0xa2>
}
 80042e2:	bf00      	nop
 80042e4:	3724      	adds	r7, #36	; 0x24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd90      	pop	{r4, r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000062 	.word	0x20000062

080042f0 <Preset_OnOff>:

void Preset_OnOff(WS2812B_t* layer, uint16_t begin, uint16_t end, uint16_t state){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
	for(int i = begin; i <= end; i++){
 800430a:	897b      	ldrh	r3, [r7, #10]
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e015      	b.n	800433c <Preset_OnOff+0x4c>
		if(state == 0)
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d107      	bne.n	8004326 <Preset_OnOff+0x36>
			WS2812B_SetPixelBrightness(layer, 0, i);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	2100      	movs	r1, #0
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7fd fed8 	bl	80020d4 <WS2812B_SetPixelBrightness>
 8004324:	e007      	b.n	8004336 <Preset_OnOff+0x46>
		else WS2812B_SetPixelBrightness(layer, BRIGHTNESS, i);
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <Preset_OnOff+0x60>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	4619      	mov	r1, r3
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7fd fecf 	bl	80020d4 <WS2812B_SetPixelBrightness>
	for(int i = begin; i <= end; i++){
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3301      	adds	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	893b      	ldrh	r3, [r7, #8]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	dde5      	ble.n	8004310 <Preset_OnOff+0x20>
	}
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000062 	.word	0x20000062

08004354 <Preset_RandomColor>:

void Preset_RandomColor(WS2812B_t* layer, uint16_t begin, uint16_t end){
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	807b      	strh	r3, [r7, #2]
 8004360:	4613      	mov	r3, r2
 8004362:	803b      	strh	r3, [r7, #0]
	int hue = rand() % 255;
 8004364:	f005 f86c 	bl	8009440 <rand>
 8004368:	4602      	mov	r2, r0
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <Preset_RandomColor+0x60>)
 800436c:	fb83 1302 	smull	r1, r3, r3, r2
 8004370:	4413      	add	r3, r2
 8004372:	11d9      	asrs	r1, r3, #7
 8004374:	17d3      	asrs	r3, r2, #31
 8004376:	1ac9      	subs	r1, r1, r3
 8004378:	460b      	mov	r3, r1
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	1a5b      	subs	r3, r3, r1
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	60bb      	str	r3, [r7, #8]
	for(int i = begin; i <= end; i++)
 8004382:	887b      	ldrh	r3, [r7, #2]
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e00c      	b.n	80043a2 <Preset_RandomColor+0x4e>
		WS2812B_SetPixelHSV(layer, hue, 255, 255, i);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	b2d9      	uxtb	r1, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	23ff      	movs	r3, #255	; 0xff
 8004394:	22ff      	movs	r2, #255	; 0xff
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd ff66 	bl	8002268 <WS2812B_SetPixelHSV>
	for(int i = begin; i <= end; i++)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	883b      	ldrh	r3, [r7, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	ddee      	ble.n	8004388 <Preset_RandomColor+0x34>
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	80808081 	.word	0x80808081

080043b8 <Preset_Hue>:

void Preset_Hue(WS2812B_t* layer, uint16_t begin, uint16_t end, uint8_t hue){
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461a      	mov	r2, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	460b      	mov	r3, r1
 80043cc:	813b      	strh	r3, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	71fb      	strb	r3, [r7, #7]
	for(int i = begin; i <= end; i++)
 80043d2:	897b      	ldrh	r3, [r7, #10]
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e00b      	b.n	80043f0 <Preset_Hue+0x38>
		WS2812B_SetPixelHSV(layer, hue, 255, 255, i);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	79f9      	ldrb	r1, [r7, #7]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	23ff      	movs	r3, #255	; 0xff
 80043e2:	22ff      	movs	r2, #255	; 0xff
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7fd ff3f 	bl	8002268 <WS2812B_SetPixelHSV>
	for(int i = begin; i <= end; i++)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3301      	adds	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	ddef      	ble.n	80043d8 <Preset_Hue+0x20>
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004408:	f3bf 8f4f 	dsb	sy
}
 800440c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <__NVIC_SystemReset+0x24>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004416:	4904      	ldr	r1, [pc, #16]	; (8004428 <__NVIC_SystemReset+0x24>)
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <__NVIC_SystemReset+0x28>)
 800441a:	4313      	orrs	r3, r2
 800441c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800441e:	f3bf 8f4f 	dsb	sy
}
 8004422:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004424:	bf00      	nop
 8004426:	e7fd      	b.n	8004424 <__NVIC_SystemReset+0x20>
 8004428:	e000ed00 	.word	0xe000ed00
 800442c:	05fa0004 	.word	0x05fa0004

08004430 <saveData>:
	uint8_t on_off;
}Settings;
Settings settings = {0};
uint16_t settings_buff[SETTINGS_BUFFSIZE] = {0};

void saveData(){
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
	for(int i = 0; i < SETTINGS_BUFFSIZE; i++)
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	e00b      	b.n	8004454 <saveData+0x24>
		settings_buff[i] = *((uint8_t*)(&settings) + i);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0a      	ldr	r2, [pc, #40]	; (8004468 <saveData+0x38>)
 8004440:	4413      	add	r3, r2
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b299      	uxth	r1, r3
 8004446:	4a09      	ldr	r2, [pc, #36]	; (800446c <saveData+0x3c>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < SETTINGS_BUFFSIZE; i++)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3301      	adds	r3, #1
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b4c      	cmp	r3, #76	; 0x4c
 8004458:	d9f0      	bls.n	800443c <saveData+0xc>
	FlashPROM_Write16(settings_buff);
 800445a:	4804      	ldr	r0, [pc, #16]	; (800446c <saveData+0x3c>)
 800445c:	f7fd fd2a 	bl	8001eb4 <FlashPROM_Write16>
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200035f8 	.word	0x200035f8
 800446c:	20003648 	.word	0x20003648

08004470 <IPD_callback>:

void IPD_callback(char* esp_message_IDP){
 8004470:	b580      	push	{r7, lr}
 8004472:	b09a      	sub	sp, #104	; 0x68
 8004474:	af02      	add	r7, sp, #8
 8004476:	6078      	str	r0, [r7, #4]
	uint8_t rx_data[33] = {0};
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	221d      	movs	r2, #29
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f004 fee3 	bl	8009250 <memset>
	uint16_t data_length = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	877b      	strh	r3, [r7, #58]	; 0x3a
	char tmp[4] = {0};
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
	int j = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	65fb      	str	r3, [r7, #92]	; 0x5c
	int i = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	65bb      	str	r3, [r7, #88]	; 0x58
	while(esp_message_IDP[i] != ',')
 800449a:	e002      	b.n	80044a2 <IPD_callback+0x32>
		i++;
 800449c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800449e:	3301      	adds	r3, #1
 80044a0:	65bb      	str	r3, [r7, #88]	; 0x58
	while(esp_message_IDP[i] != ',')
 80044a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b2c      	cmp	r3, #44	; 0x2c
 80044ac:	d1f6      	bne.n	800449c <IPD_callback+0x2c>
	i++;
 80044ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b0:	3301      	adds	r3, #1
 80044b2:	65bb      	str	r3, [r7, #88]	; 0x58
	while(esp_message_IDP[i] != ',')
 80044b4:	e002      	b.n	80044bc <IPD_callback+0x4c>
		i++;
 80044b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b8:	3301      	adds	r3, #1
 80044ba:	65bb      	str	r3, [r7, #88]	; 0x58
	while(esp_message_IDP[i] != ',')
 80044bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b2c      	cmp	r3, #44	; 0x2c
 80044c6:	d1f6      	bne.n	80044b6 <IPD_callback+0x46>
	i++;
 80044c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ca:	3301      	adds	r3, #1
 80044cc:	65bb      	str	r3, [r7, #88]	; 0x58
	for(; esp_message_IDP[i] != ':'; i++){
 80044ce:	e00f      	b.n	80044f0 <IPD_callback+0x80>
		tmp[j] = esp_message_IDP[i];
 80044d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	7819      	ldrb	r1, [r3, #0]
 80044d8:	f107 0208 	add.w	r2, r7, #8
 80044dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044de:	4413      	add	r3, r2
 80044e0:	460a      	mov	r2, r1
 80044e2:	701a      	strb	r2, [r3, #0]
		j++;
 80044e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e6:	3301      	adds	r3, #1
 80044e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(; esp_message_IDP[i] != ':'; i++){
 80044ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ec:	3301      	adds	r3, #1
 80044ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b3a      	cmp	r3, #58	; 0x3a
 80044fa:	d1e9      	bne.n	80044d0 <IPD_callback+0x60>
	}
	data_length = atoi(tmp);
 80044fc:	f107 0308 	add.w	r3, r7, #8
 8004500:	4618      	mov	r0, r3
 8004502:	f004 fe51 	bl	80091a8 <atoi>
 8004506:	4603      	mov	r3, r0
 8004508:	877b      	strh	r3, [r7, #58]	; 0x3a
	j++;
 800450a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450c:	3301      	adds	r3, #1
 800450e:	65fb      	str	r3, [r7, #92]	; 0x5c
	i++;
 8004510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004512:	3301      	adds	r3, #1
 8004514:	65bb      	str	r3, [r7, #88]	; 0x58
	for(int k = 0; k < data_length; k++)
 8004516:	2300      	movs	r3, #0
 8004518:	657b      	str	r3, [r7, #84]	; 0x54
 800451a:	e00f      	b.n	800453c <IPD_callback+0xcc>
		rx_data[k] = esp_message_IDP[i + k];
 800451c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800451e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004520:	4413      	add	r3, r2
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	7819      	ldrb	r1, [r3, #0]
 800452a:	f107 020c 	add.w	r2, r7, #12
 800452e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004530:	4413      	add	r3, r2
 8004532:	460a      	mov	r2, r1
 8004534:	701a      	strb	r2, [r3, #0]
	for(int k = 0; k < data_length; k++)
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	3301      	adds	r3, #1
 800453a:	657b      	str	r3, [r7, #84]	; 0x54
 800453c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800453e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004540:	429a      	cmp	r2, r3
 8004542:	dbeb      	blt.n	800451c <IPD_callback+0xac>

	switch (rx_data[0])
 8004544:	7b3b      	ldrb	r3, [r7, #12]
 8004546:	2b0a      	cmp	r3, #10
 8004548:	f200 8131 	bhi.w	80047ae <IPD_callback+0x33e>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <IPD_callback+0xe4>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004581 	.word	0x08004581
 8004558:	08004593 	.word	0x08004593
 800455c:	080045d9 	.word	0x080045d9
 8004560:	080045e7 	.word	0x080045e7
 8004564:	080045f9 	.word	0x080045f9
 8004568:	08004607 	.word	0x08004607
 800456c:	08004619 	.word	0x08004619
 8004570:	0800464b 	.word	0x0800464b
 8004574:	08004665 	.word	0x08004665
 8004578:	080046d3 	.word	0x080046d3
 800457c:	08004745 	.word	0x08004745
	{
	case SET_BRIGHTNESS:
	{
		settings.brightness = rx_data[1];
 8004580:	7b7a      	ldrb	r2, [r7, #13]
 8004582:	4b8f      	ldr	r3, [pc, #572]	; (80047c0 <IPD_callback+0x350>)
 8004584:	701a      	strb	r2, [r3, #0]
		WS2812B_SetBrightness(settings.brightness);
 8004586:	4b8e      	ldr	r3, [pc, #568]	; (80047c0 <IPD_callback+0x350>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fdb6 	bl	80020fc <WS2812B_SetBrightness>
		break;
 8004590:	e10d      	b.n	80047ae <IPD_callback+0x33e>
	}
	case SET_COLOR:
	{
		settings.color_r = rx_data[1];
 8004592:	7b7a      	ldrb	r2, [r7, #13]
 8004594:	4b8a      	ldr	r3, [pc, #552]	; (80047c0 <IPD_callback+0x350>)
 8004596:	705a      	strb	r2, [r3, #1]
		settings.color_g = rx_data[2];
 8004598:	7bba      	ldrb	r2, [r7, #14]
 800459a:	4b89      	ldr	r3, [pc, #548]	; (80047c0 <IPD_callback+0x350>)
 800459c:	709a      	strb	r2, [r3, #2]
		settings.color_b = rx_data[3];
 800459e:	7bfa      	ldrb	r2, [r7, #15]
 80045a0:	4b87      	ldr	r3, [pc, #540]	; (80047c0 <IPD_callback+0x350>)
 80045a2:	70da      	strb	r2, [r3, #3]
		for(int i = 0; i < settings.num_leds; i++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	653b      	str	r3, [r7, #80]	; 0x50
 80045a8:	e00f      	b.n	80045ca <IPD_callback+0x15a>
			WS2812B_SetPixelRGB(leds, settings.color_r, settings.color_g, settings.color_b, i);
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <IPD_callback+0x350>)
 80045ac:	7859      	ldrb	r1, [r3, #1]
 80045ae:	4b84      	ldr	r3, [pc, #528]	; (80047c0 <IPD_callback+0x350>)
 80045b0:	789a      	ldrb	r2, [r3, #2]
 80045b2:	4b83      	ldr	r3, [pc, #524]	; (80047c0 <IPD_callback+0x350>)
 80045b4:	78d8      	ldrb	r0, [r3, #3]
 80045b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4603      	mov	r3, r0
 80045be:	4881      	ldr	r0, [pc, #516]	; (80047c4 <IPD_callback+0x354>)
 80045c0:	f7fd fe2e 	bl	8002220 <WS2812B_SetPixelRGB>
		for(int i = 0; i < settings.num_leds; i++)
 80045c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c6:	3301      	adds	r3, #1
 80045c8:	653b      	str	r3, [r7, #80]	; 0x50
 80045ca:	4b7d      	ldr	r3, [pc, #500]	; (80047c0 <IPD_callback+0x350>)
 80045cc:	7adb      	ldrb	r3, [r3, #11]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	4293      	cmp	r3, r2
 80045d4:	dbe9      	blt.n	80045aa <IPD_callback+0x13a>
		break;
 80045d6:	e0ea      	b.n	80047ae <IPD_callback+0x33e>
	}
	case SET_EFFECT:
	{
		settings.color_music = NOCOLORMUSIC;
 80045d8:	4b79      	ldr	r3, [pc, #484]	; (80047c0 <IPD_callback+0x350>)
 80045da:	2200      	movs	r2, #0
 80045dc:	719a      	strb	r2, [r3, #6]
		settings.effect = rx_data[1];
 80045de:	7b7a      	ldrb	r2, [r7, #13]
 80045e0:	4b77      	ldr	r3, [pc, #476]	; (80047c0 <IPD_callback+0x350>)
 80045e2:	711a      	strb	r2, [r3, #4]
		break;
 80045e4:	e0e3      	b.n	80047ae <IPD_callback+0x33e>
	}
	case SET_EFFECT_DELAY:
	{
		settings.effect_delay = rx_data[1];
 80045e6:	7b7a      	ldrb	r2, [r7, #13]
 80045e8:	4b75      	ldr	r3, [pc, #468]	; (80047c0 <IPD_callback+0x350>)
 80045ea:	715a      	strb	r2, [r3, #5]
		WS2812B_SetEffectDelay(settings.effect_delay);
 80045ec:	4b74      	ldr	r3, [pc, #464]	; (80047c0 <IPD_callback+0x350>)
 80045ee:	795b      	ldrb	r3, [r3, #5]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe f9b9 	bl	8002968 <WS2812B_SetEffectDelay>
		break;
 80045f6:	e0da      	b.n	80047ae <IPD_callback+0x33e>
	}
	case SET_COLOR_MUSIC:
	{
		settings.effect = NOEFFECT;
 80045f8:	4b71      	ldr	r3, [pc, #452]	; (80047c0 <IPD_callback+0x350>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	711a      	strb	r2, [r3, #4]
		settings.color_music = rx_data[1];
 80045fe:	7b7a      	ldrb	r2, [r7, #13]
 8004600:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <IPD_callback+0x350>)
 8004602:	719a      	strb	r2, [r3, #6]
		break;
 8004604:	e0d3      	b.n	80047ae <IPD_callback+0x33e>
	}
	case SET_COLOR_MUSIC_DELAY:
	{
		settings.color_music_delay = rx_data[1];
 8004606:	7b7a      	ldrb	r2, [r7, #13]
 8004608:	4b6d      	ldr	r3, [pc, #436]	; (80047c0 <IPD_callback+0x350>)
 800460a:	71da      	strb	r2, [r3, #7]
		WS2812B_SetColorMusicDelay(settings.color_music_delay);
 800460c:	4b6c      	ldr	r3, [pc, #432]	; (80047c0 <IPD_callback+0x350>)
 800460e:	79db      	ldrb	r3, [r3, #7]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fe f9b9 	bl	8002988 <WS2812B_SetColorMusicDelay>
		break;
 8004616:	e0ca      	b.n	80047ae <IPD_callback+0x33e>
	}
	case SET_COLOR_MUSIC_SENSIVITY:
	{
		settings.color_music_low_sensivity = rx_data[1];
 8004618:	7b7a      	ldrb	r2, [r7, #13]
 800461a:	4b69      	ldr	r3, [pc, #420]	; (80047c0 <IPD_callback+0x350>)
 800461c:	721a      	strb	r2, [r3, #8]
		settings.color_music_medium_sensivity = rx_data[2];
 800461e:	7bba      	ldrb	r2, [r7, #14]
 8004620:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <IPD_callback+0x350>)
 8004622:	725a      	strb	r2, [r3, #9]
		settings.color_music_high_sensivity = rx_data[3];
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <IPD_callback+0x350>)
 8004628:	729a      	strb	r2, [r3, #10]
		WS2812B_SetMaxAmplitudeL(settings.color_music_low_sensivity);
 800462a:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <IPD_callback+0x350>)
 800462c:	7a1b      	ldrb	r3, [r3, #8]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe f9ba 	bl	80029a8 <WS2812B_SetMaxAmplitudeL>
		WS2812B_SetMaxAmplitudeM(settings.color_music_medium_sensivity);
 8004634:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <IPD_callback+0x350>)
 8004636:	7a5b      	ldrb	r3, [r3, #9]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe f9c5 	bl	80029c8 <WS2812B_SetMaxAmplitudeM>
		WS2812B_SetMaxAmplitudeH(settings.color_music_high_sensivity);
 800463e:	4b60      	ldr	r3, [pc, #384]	; (80047c0 <IPD_callback+0x350>)
 8004640:	7a9b      	ldrb	r3, [r3, #10]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe f9d0 	bl	80029e8 <WS2812B_SetMaxAmplitudeH>
		break;
 8004648:	e0b1      	b.n	80047ae <IPD_callback+0x33e>
	}
	case SET_NUM_LEDS:
	{
		if(rx_data[1] <= MAX_NUM_LEDS){
 800464a:	7b7b      	ldrb	r3, [r7, #13]
 800464c:	2bb4      	cmp	r3, #180	; 0xb4
 800464e:	f200 80ab 	bhi.w	80047a8 <IPD_callback+0x338>
			settings.num_leds = rx_data[1];
 8004652:	7b7a      	ldrb	r2, [r7, #13]
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <IPD_callback+0x350>)
 8004656:	72da      	strb	r2, [r3, #11]
			WS2812B_SetNumLeds(settings.num_leds);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <IPD_callback+0x350>)
 800465a:	7adb      	ldrb	r3, [r3, #11]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fd fd73 	bl	8002148 <WS2812B_SetNumLeds>
		}
		break;
 8004662:	e0a1      	b.n	80047a8 <IPD_callback+0x338>
	}
	case SET_WIFI_SETTENGS:
	{
		for(int i = 1; i < sizeof(settings.ssid); i++)
 8004664:	2301      	movs	r3, #1
 8004666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004668:	e00d      	b.n	8004686 <IPD_callback+0x216>
			settings.ssid[i - 1] = rx_data[i];
 800466a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466c:	3b01      	subs	r3, #1
 800466e:	f107 010c 	add.w	r1, r7, #12
 8004672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004674:	440a      	add	r2, r1
 8004676:	7811      	ldrb	r1, [r2, #0]
 8004678:	4a51      	ldr	r2, [pc, #324]	; (80047c0 <IPD_callback+0x350>)
 800467a:	4413      	add	r3, r2
 800467c:	460a      	mov	r2, r1
 800467e:	731a      	strb	r2, [r3, #12]
		for(int i = 1; i < sizeof(settings.ssid); i++)
 8004680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004682:	3301      	adds	r3, #1
 8004684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d9ee      	bls.n	800466a <IPD_callback+0x1fa>
		for(int i = 1; i < sizeof(settings.pass); i++)
 800468c:	2301      	movs	r3, #1
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004690:	e00f      	b.n	80046b2 <IPD_callback+0x242>
			settings.pass[i - 1] = rx_data[i + sizeof(settings.ssid)];
 8004692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004694:	f103 0210 	add.w	r2, r3, #16
 8004698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469a:	3b01      	subs	r3, #1
 800469c:	3260      	adds	r2, #96	; 0x60
 800469e:	443a      	add	r2, r7
 80046a0:	f812 1c54 	ldrb.w	r1, [r2, #-84]
 80046a4:	4a46      	ldr	r2, [pc, #280]	; (80047c0 <IPD_callback+0x350>)
 80046a6:	4413      	add	r3, r2
 80046a8:	460a      	mov	r2, r1
 80046aa:	771a      	strb	r2, [r3, #28]
		for(int i = 1; i < sizeof(settings.pass); i++)
 80046ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ae:	3301      	adds	r3, #1
 80046b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b4:	2b0f      	cmp	r3, #15
 80046b6:	d9ec      	bls.n	8004692 <IPD_callback+0x222>

		saveData();
 80046b8:	f7ff feba 	bl	8004430 <saveData>
		HAL_Delay(5);
 80046bc:	2005      	movs	r0, #5
 80046be:	f000 fefd 	bl	80054bc <HAL_Delay>
 80046c2:	2301      	movs	r3, #1
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 80046c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c8:	f383 8813 	msr	FAULTMASK, r3
}
 80046cc:	bf00      	nop
		__set_FAULTMASK(1);
		NVIC_SystemReset();
 80046ce:	f7ff fe99 	bl	8004404 <__NVIC_SystemReset>
		break;
	}
	case SET_AP_SETTINGS:
	{
		for(int i = 1; i < sizeof(settings.ssid); i++)
 80046d2:	2301      	movs	r3, #1
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
 80046d6:	e00e      	b.n	80046f6 <IPD_callback+0x286>
			settings.ssidAP[i - 1] = rx_data[i];
 80046d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046da:	3b01      	subs	r3, #1
 80046dc:	f107 010c 	add.w	r1, r7, #12
 80046e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046e2:	440a      	add	r2, r1
 80046e4:	7811      	ldrb	r1, [r2, #0]
 80046e6:	4a36      	ldr	r2, [pc, #216]	; (80047c0 <IPD_callback+0x350>)
 80046e8:	4413      	add	r3, r2
 80046ea:	460a      	mov	r2, r1
 80046ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		for(int i = 1; i < sizeof(settings.ssid); i++)
 80046f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f2:	3301      	adds	r3, #1
 80046f4:	647b      	str	r3, [r7, #68]	; 0x44
 80046f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f8:	2b0f      	cmp	r3, #15
 80046fa:	d9ed      	bls.n	80046d8 <IPD_callback+0x268>
		for(int i = 1; i < sizeof(settings.pass); i++)
 80046fc:	2301      	movs	r3, #1
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004700:	e010      	b.n	8004724 <IPD_callback+0x2b4>
			settings.passAP[i - 1] = rx_data[i + sizeof(settings.ssid)];
 8004702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004704:	f103 0210 	add.w	r2, r3, #16
 8004708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470a:	3b01      	subs	r3, #1
 800470c:	3260      	adds	r2, #96	; 0x60
 800470e:	443a      	add	r2, r7
 8004710:	f812 1c54 	ldrb.w	r1, [r2, #-84]
 8004714:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <IPD_callback+0x350>)
 8004716:	4413      	add	r3, r2
 8004718:	460a      	mov	r2, r1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		for(int i = 1; i < sizeof(settings.pass); i++)
 800471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004720:	3301      	adds	r3, #1
 8004722:	643b      	str	r3, [r7, #64]	; 0x40
 8004724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d9eb      	bls.n	8004702 <IPD_callback+0x292>

		saveData();
 800472a:	f7ff fe81 	bl	8004430 <saveData>
		HAL_Delay(5);
 800472e:	2005      	movs	r0, #5
 8004730:	f000 fec4 	bl	80054bc <HAL_Delay>
 8004734:	2301      	movs	r3, #1
 8004736:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	f383 8813 	msr	FAULTMASK, r3
}
 800473e:	bf00      	nop
		__set_FAULTMASK(1);
		NVIC_SystemReset();
 8004740:	f7ff fe60 	bl	8004404 <__NVIC_SystemReset>
		break;
	}
	case ON_OFF:
	{
		settings.on_off = !settings.on_off;
 8004744:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <IPD_callback+0x350>)
 8004746:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <IPD_callback+0x350>)
 8004758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		if(!settings.on_off){
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <IPD_callback+0x350>)
 800475e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d122      	bne.n	80047ac <IPD_callback+0x33c>
			for(int i = 0; i < settings.num_leds; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476a:	e00b      	b.n	8004784 <IPD_callback+0x314>
				WS2812B_SetPixelRGB(leds, 0, 0, 0, i);
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	b2db      	uxtb	r3, r3
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	2200      	movs	r2, #0
 8004776:	2100      	movs	r1, #0
 8004778:	4812      	ldr	r0, [pc, #72]	; (80047c4 <IPD_callback+0x354>)
 800477a:	f7fd fd51 	bl	8002220 <WS2812B_SetPixelRGB>
			for(int i = 0; i < settings.num_leds; i++)
 800477e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004780:	3301      	adds	r3, #1
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <IPD_callback+0x350>)
 8004786:	7adb      	ldrb	r3, [r3, #11]
 8004788:	461a      	mov	r2, r3
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478c:	4293      	cmp	r3, r2
 800478e:	dbed      	blt.n	800476c <IPD_callback+0x2fc>
			while(WS2812B_Show() != SHOW_OK);
 8004790:	bf00      	nop
 8004792:	f7fd fd15 	bl	80021c0 <WS2812B_Show>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1fa      	bne.n	8004792 <IPD_callback+0x322>
			saveData();
 800479c:	f7ff fe48 	bl	8004430 <saveData>
			HAL_Delay(5);
 80047a0:	2005      	movs	r0, #5
 80047a2:	f000 fe8b 	bl	80054bc <HAL_Delay>
		}
		break;
 80047a6:	e001      	b.n	80047ac <IPD_callback+0x33c>
		break;
 80047a8:	bf00      	nop
 80047aa:	e000      	b.n	80047ae <IPD_callback+0x33e>
		break;
 80047ac:	bf00      	nop
	}
	}
	autosaveTimer = HAL_GetTick();
 80047ae:	f000 fe7b 	bl	80054a8 <HAL_GetTick>
 80047b2:	4603      	mov	r3, r0
 80047b4:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <IPD_callback+0x358>)
 80047b6:	6013      	str	r3, [r2, #0]
}
 80047b8:	bf00      	nop
 80047ba:	3760      	adds	r7, #96	; 0x60
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	200035f8 	.word	0x200035f8
 80047c4:	200026e4 	.word	0x200026e4
 80047c8:	20003468 	.word	0x20003468

080047cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047d2:	f000 fe11 	bl	80053f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047d6:	f000 f95f 	bl	8004a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047da:	f000 fb17 	bl	8004e0c <MX_GPIO_Init>
  MX_DMA_Init();
 80047de:	f000 faef 	bl	8004dc0 <MX_DMA_Init>
  MX_TIM1_Init();
 80047e2:	f000 f9f3 	bl	8004bcc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80047e6:	f000 fac1 	bl	8004d6c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80047ea:	f000 f9b1 	bl	8004b50 <MX_ADC1_Init>
  MX_TIM3_Init();
 80047ee:	f000 fa6f 	bl	8004cd0 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(100);
 80047f2:	2064      	movs	r0, #100	; 0x64
 80047f4:	f000 fe62 	bl	80054bc <HAL_Delay>

  FlashPROM_Init(SETTINGS_BUFFSIZE);
 80047f8:	204d      	movs	r0, #77	; 0x4d
 80047fa:	f7fd fb4b 	bl	8001e94 <FlashPROM_Init>
  FlashPROM_Read16(settings_buff);
 80047fe:	4898      	ldr	r0, [pc, #608]	; (8004a60 <main+0x294>)
 8004800:	f7fd fbb0 	bl	8001f64 <FlashPROM_Read16>
  if(settings_buff[0] == 0xFFFF){
 8004804:	4b96      	ldr	r3, [pc, #600]	; (8004a60 <main+0x294>)
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800480c:	4293      	cmp	r3, r2
 800480e:	d150      	bne.n	80048b2 <main+0xe6>
	  settings.brightness = 32;
 8004810:	4b94      	ldr	r3, [pc, #592]	; (8004a64 <main+0x298>)
 8004812:	2220      	movs	r2, #32
 8004814:	701a      	strb	r2, [r3, #0]
	  settings.num_leds = 60;
 8004816:	4b93      	ldr	r3, [pc, #588]	; (8004a64 <main+0x298>)
 8004818:	223c      	movs	r2, #60	; 0x3c
 800481a:	72da      	strb	r2, [r3, #11]
	  settings.effect_delay = 50;
 800481c:	4b91      	ldr	r3, [pc, #580]	; (8004a64 <main+0x298>)
 800481e:	2232      	movs	r2, #50	; 0x32
 8004820:	715a      	strb	r2, [r3, #5]
	  settings.color_r = 255;
 8004822:	4b90      	ldr	r3, [pc, #576]	; (8004a64 <main+0x298>)
 8004824:	22ff      	movs	r2, #255	; 0xff
 8004826:	705a      	strb	r2, [r3, #1]
	  settings.color_g = 0;
 8004828:	4b8e      	ldr	r3, [pc, #568]	; (8004a64 <main+0x298>)
 800482a:	2200      	movs	r2, #0
 800482c:	709a      	strb	r2, [r3, #2]
	  settings.color_b = 0;
 800482e:	4b8d      	ldr	r3, [pc, #564]	; (8004a64 <main+0x298>)
 8004830:	2200      	movs	r2, #0
 8004832:	70da      	strb	r2, [r3, #3]
	  settings.effect = 0;
 8004834:	4b8b      	ldr	r3, [pc, #556]	; (8004a64 <main+0x298>)
 8004836:	2200      	movs	r2, #0
 8004838:	711a      	strb	r2, [r3, #4]
	  settings.effect_delay = 50;
 800483a:	4b8a      	ldr	r3, [pc, #552]	; (8004a64 <main+0x298>)
 800483c:	2232      	movs	r2, #50	; 0x32
 800483e:	715a      	strb	r2, [r3, #5]
	  settings.color_music = 0;
 8004840:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <main+0x298>)
 8004842:	2200      	movs	r2, #0
 8004844:	719a      	strb	r2, [r3, #6]
	  settings.color_music_delay = 50;
 8004846:	4b87      	ldr	r3, [pc, #540]	; (8004a64 <main+0x298>)
 8004848:	2232      	movs	r2, #50	; 0x32
 800484a:	71da      	strb	r2, [r3, #7]
	  settings.color_music_low_sensivity = 35;
 800484c:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <main+0x298>)
 800484e:	2223      	movs	r2, #35	; 0x23
 8004850:	721a      	strb	r2, [r3, #8]
	  settings.color_music_medium_sensivity = 35;
 8004852:	4b84      	ldr	r3, [pc, #528]	; (8004a64 <main+0x298>)
 8004854:	2223      	movs	r2, #35	; 0x23
 8004856:	725a      	strb	r2, [r3, #9]
	  settings.color_music_high_sensivity = 35;
 8004858:	4b82      	ldr	r3, [pc, #520]	; (8004a64 <main+0x298>)
 800485a:	2223      	movs	r2, #35	; 0x23
 800485c:	729a      	strb	r2, [r3, #10]
	  sprintf((char*)settings.ssid, "none");
 800485e:	4982      	ldr	r1, [pc, #520]	; (8004a68 <main+0x29c>)
 8004860:	4882      	ldr	r0, [pc, #520]	; (8004a6c <main+0x2a0>)
 8004862:	f004 fe3b 	bl	80094dc <siprintf>
	  sprintf((char*)settings.pass, "none");
 8004866:	4980      	ldr	r1, [pc, #512]	; (8004a68 <main+0x29c>)
 8004868:	4881      	ldr	r0, [pc, #516]	; (8004a70 <main+0x2a4>)
 800486a:	f004 fe37 	bl	80094dc <siprintf>
	  sprintf((char*)settings.ssidAP, "MyLed");
 800486e:	4981      	ldr	r1, [pc, #516]	; (8004a74 <main+0x2a8>)
 8004870:	4881      	ldr	r0, [pc, #516]	; (8004a78 <main+0x2ac>)
 8004872:	f004 fe33 	bl	80094dc <siprintf>
	  sprintf((char*)settings.passAP, "myled1305");
 8004876:	4981      	ldr	r1, [pc, #516]	; (8004a7c <main+0x2b0>)
 8004878:	4881      	ldr	r0, [pc, #516]	; (8004a80 <main+0x2b4>)
 800487a:	f004 fe2f 	bl	80094dc <siprintf>
	  settings.on_off = 1;
 800487e:	4b79      	ldr	r3, [pc, #484]	; (8004a64 <main+0x298>)
 8004880:	2201      	movs	r2, #1
 8004882:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  for(int i = 0; i < SETTINGS_BUFFSIZE; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e00b      	b.n	80048a4 <main+0xd8>
		  settings_buff[i] = *((uint8_t*)(&settings) + i);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4a75      	ldr	r2, [pc, #468]	; (8004a64 <main+0x298>)
 8004890:	4413      	add	r3, r2
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b299      	uxth	r1, r3
 8004896:	4a72      	ldr	r2, [pc, #456]	; (8004a60 <main+0x294>)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = 0; i < SETTINGS_BUFFSIZE; i++)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3301      	adds	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b4c      	cmp	r3, #76	; 0x4c
 80048a8:	d9f0      	bls.n	800488c <main+0xc0>
	  FlashPROM_Write16(settings_buff);
 80048aa:	486d      	ldr	r0, [pc, #436]	; (8004a60 <main+0x294>)
 80048ac:	f7fd fb02 	bl	8001eb4 <FlashPROM_Write16>
 80048b0:	e011      	b.n	80048d6 <main+0x10a>
  }
  else{
	  for(int i = 0; i < SETTINGS_BUFFSIZE; i++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	e00b      	b.n	80048d0 <main+0x104>
		  *((uint8_t*)(&settings) + i) = settings_buff[i];
 80048b8:	4a69      	ldr	r2, [pc, #420]	; (8004a60 <main+0x294>)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4a68      	ldr	r2, [pc, #416]	; (8004a64 <main+0x298>)
 80048c4:	4413      	add	r3, r2
 80048c6:	b2ca      	uxtb	r2, r1
 80048c8:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < SETTINGS_BUFFSIZE; i++)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b4c      	cmp	r3, #76	; 0x4c
 80048d4:	d9f0      	bls.n	80048b8 <main+0xec>
  }

  ESP_AT_Init();
 80048d6:	f7fc fc19 	bl	800110c <ESP_AT_Init>
  AT_Execute();
 80048da:	f7fc fc2d 	bl	8001138 <AT_Execute>
  ATE0_Execute();
 80048de:	f7fc fc3d 	bl	800115c <ATE0_Execute>
  AT__CWMODE_CUR_Set(1);
 80048e2:	2001      	movs	r0, #1
 80048e4:	f7fc fc6c 	bl	80011c0 <AT__CWMODE_CUR_Set>
  AT__CIPSTA_CUR_Set("192.168.0.113", "192.168.0.1", "255.255.255.0");
 80048e8:	4a66      	ldr	r2, [pc, #408]	; (8004a84 <main+0x2b8>)
 80048ea:	4967      	ldr	r1, [pc, #412]	; (8004a88 <main+0x2bc>)
 80048ec:	4867      	ldr	r0, [pc, #412]	; (8004a8c <main+0x2c0>)
 80048ee:	f7fc fd19 	bl	8001324 <AT__CIPSTA_CUR_Set>
  if(AT__CWJAP_CUR_Set((char*)settings.ssid, (char*)settings.pass) != AT_OK)
 80048f2:	495f      	ldr	r1, [pc, #380]	; (8004a70 <main+0x2a4>)
 80048f4:	485d      	ldr	r0, [pc, #372]	; (8004a6c <main+0x2a0>)
 80048f6:	f7fc fd39 	bl	800136c <AT__CWJAP_CUR_Set>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <main+0x150>
  {
	  AT__CWMODE_CUR_Set(2);
 8004900:	2002      	movs	r0, #2
 8004902:	f7fc fc5d 	bl	80011c0 <AT__CWMODE_CUR_Set>
	  AT__CWSAP_CUR_Set((char*)settings.ssidAP, (char*)settings.passAP, 1, 2);
 8004906:	2302      	movs	r3, #2
 8004908:	2201      	movs	r2, #1
 800490a:	495d      	ldr	r1, [pc, #372]	; (8004a80 <main+0x2b4>)
 800490c:	485a      	ldr	r0, [pc, #360]	; (8004a78 <main+0x2ac>)
 800490e:	f7fc fc9b 	bl	8001248 <AT__CWSAP_CUR_Set>
	  AT__CIPAP_CUR_Set("192.168.0.113", "192.168.0.1", "255.255.255.0");
 8004912:	4a5c      	ldr	r2, [pc, #368]	; (8004a84 <main+0x2b8>)
 8004914:	495c      	ldr	r1, [pc, #368]	; (8004a88 <main+0x2bc>)
 8004916:	485d      	ldr	r0, [pc, #372]	; (8004a8c <main+0x2c0>)
 8004918:	f7fc fc72 	bl	8001200 <AT__CIPAP_CUR_Set>
  }
  AT__CIPMUX_Set(1);
 800491c:	2001      	movs	r0, #1
 800491e:	f7fc fcbd 	bl	800129c <AT__CIPMUX_Set>
  AT__CIPSERVER_Set(1, 1305);
 8004922:	f240 5119 	movw	r1, #1305	; 0x519
 8004926:	2001      	movs	r0, #1
 8004928:	f7fc fcd8 	bl	80012dc <AT__CIPSERVER_Set>


  WS2812B_Init(settings.num_leds, settings.brightness);
 800492c:	4b4d      	ldr	r3, [pc, #308]	; (8004a64 <main+0x298>)
 800492e:	7adb      	ldrb	r3, [r3, #11]
 8004930:	4a4c      	ldr	r2, [pc, #304]	; (8004a64 <main+0x298>)
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd fb86 	bl	8002048 <WS2812B_Init>
  WS2812B_SetEffectDelay(settings.effect_delay);
 800493c:	4b49      	ldr	r3, [pc, #292]	; (8004a64 <main+0x298>)
 800493e:	795b      	ldrb	r3, [r3, #5]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe f811 	bl	8002968 <WS2812B_SetEffectDelay>
  WS2812B_SetColorMusicDelay(settings.color_music_delay);
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <main+0x298>)
 8004948:	79db      	ldrb	r3, [r3, #7]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe f81c 	bl	8002988 <WS2812B_SetColorMusicDelay>
  WS2812B_SetMaxAmplitudeL(settings.color_music_low_sensivity);
 8004950:	4b44      	ldr	r3, [pc, #272]	; (8004a64 <main+0x298>)
 8004952:	7a1b      	ldrb	r3, [r3, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe f827 	bl	80029a8 <WS2812B_SetMaxAmplitudeL>
  WS2812B_SetMaxAmplitudeM(settings.color_music_medium_sensivity);
 800495a:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <main+0x298>)
 800495c:	7a5b      	ldrb	r3, [r3, #9]
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe f832 	bl	80029c8 <WS2812B_SetMaxAmplitudeM>
  WS2812B_SetMaxAmplitudeH(settings.color_music_high_sensivity);
 8004964:	4b3f      	ldr	r3, [pc, #252]	; (8004a64 <main+0x298>)
 8004966:	7a9b      	ldrb	r3, [r3, #10]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe f83d 	bl	80029e8 <WS2812B_SetMaxAmplitudeH>
  WS2812B_SetBrightness(settings.brightness);
 800496e:	4b3d      	ldr	r3, [pc, #244]	; (8004a64 <main+0x298>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd fbc2 	bl	80020fc <WS2812B_SetBrightness>
  WS2812B_SetNumLeds(settings.num_leds);
 8004978:	4b3a      	ldr	r3, [pc, #232]	; (8004a64 <main+0x298>)
 800497a:	7adb      	ldrb	r3, [r3, #11]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fd fbe3 	bl	8002148 <WS2812B_SetNumLeds>
  WS2812B_SetDelay(5);
 8004982:	2005      	movs	r0, #5
 8004984:	f7fd fb96 	bl	80020b4 <WS2812B_SetDelay>
  WS2812B_CM_Init();
 8004988:	f7fe fbda 	bl	8003140 <WS2812B_CM_Init>

  for(int i = 0; i < settings.num_leds; i++)
 800498c:	2300      	movs	r3, #0
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	e00f      	b.n	80049b2 <main+0x1e6>
	  WS2812B_SetPixelRGB(leds, settings.color_r, settings.color_g, settings.color_b, i);
 8004992:	4b34      	ldr	r3, [pc, #208]	; (8004a64 <main+0x298>)
 8004994:	7859      	ldrb	r1, [r3, #1]
 8004996:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <main+0x298>)
 8004998:	789a      	ldrb	r2, [r3, #2]
 800499a:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <main+0x298>)
 800499c:	78d8      	ldrb	r0, [r3, #3]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4603      	mov	r3, r0
 80049a6:	483a      	ldr	r0, [pc, #232]	; (8004a90 <main+0x2c4>)
 80049a8:	f7fd fc3a 	bl	8002220 <WS2812B_SetPixelRGB>
  for(int i = 0; i < settings.num_leds; i++)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3301      	adds	r3, #1
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <main+0x298>)
 80049b4:	7adb      	ldrb	r3, [r3, #11]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4293      	cmp	r3, r2
 80049bc:	dbe9      	blt.n	8004992 <main+0x1c6>
  while (1)
  {
	  ESP_CheckMessage();
 80049be:	f7fc fd23 	bl	8001408 <ESP_CheckMessage>
	  if(settings.on_off){
 80049c2:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <main+0x298>)
 80049c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f8      	beq.n	80049be <main+0x1f2>
		  if(!settings.effect && !settings.color_music)
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <main+0x298>)
 80049ce:	791b      	ldrb	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d124      	bne.n	8004a1e <main+0x252>
 80049d4:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <main+0x298>)
 80049d6:	799b      	ldrb	r3, [r3, #6]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d120      	bne.n	8004a1e <main+0x252>
			  for(int i = 0; i < settings.num_leds; i++){
 80049dc:	2300      	movs	r3, #0
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	e017      	b.n	8004a12 <main+0x246>
				  WS2812B_SetPixelRGB(leds, settings.color_r, settings.color_g, settings.color_b, i);
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <main+0x298>)
 80049e4:	7859      	ldrb	r1, [r3, #1]
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <main+0x298>)
 80049e8:	789a      	ldrb	r2, [r3, #2]
 80049ea:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <main+0x298>)
 80049ec:	78d8      	ldrb	r0, [r3, #3]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4603      	mov	r3, r0
 80049f6:	4826      	ldr	r0, [pc, #152]	; (8004a90 <main+0x2c4>)
 80049f8:	f7fd fc12 	bl	8002220 <WS2812B_SetPixelRGB>
				  WS2812B_SetPixelBrightness(leds, settings.brightness, i);
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <main+0x298>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	4822      	ldr	r0, [pc, #136]	; (8004a90 <main+0x2c4>)
 8004a08:	f7fd fb64 	bl	80020d4 <WS2812B_SetPixelBrightness>
			  for(int i = 0; i < settings.num_leds; i++){
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <main+0x298>)
 8004a14:	7adb      	ldrb	r3, [r3, #11]
 8004a16:	461a      	mov	r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	dbe1      	blt.n	80049e2 <main+0x216>
			  }
		  WS2812B_MakeEffect(settings.effect);
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <main+0x298>)
 8004a20:	791b      	ldrb	r3, [r3, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd ff2e 	bl	8002884 <WS2812B_MakeEffect>
		  WS2812B_MakeColorMusic(settings.color_music);
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <main+0x298>)
 8004a2a:	799b      	ldrb	r3, [r3, #6]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fd ff6f 	bl	8002910 <WS2812B_MakeColorMusic>
		  WS2812B_Show();
 8004a32:	f7fd fbc5 	bl	80021c0 <WS2812B_Show>

		  if(autosaveTimer > 0){
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <main+0x2c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0bf      	beq.n	80049be <main+0x1f2>
			  if(HAL_GetTick() - autosaveTimer > AUTOSAVE_PERIOD){
 8004a3e:	f000 fd33 	bl	80054a8 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <main+0x2c8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d9b5      	bls.n	80049be <main+0x1f2>
				  saveData();
 8004a52:	f7ff fced 	bl	8004430 <saveData>
				  autosaveTimer = 0;
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <main+0x2c8>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
	  ESP_CheckMessage();
 8004a5c:	e7af      	b.n	80049be <main+0x1f2>
 8004a5e:	bf00      	nop
 8004a60:	20003648 	.word	0x20003648
 8004a64:	200035f8 	.word	0x200035f8
 8004a68:	0800abc8 	.word	0x0800abc8
 8004a6c:	20003604 	.word	0x20003604
 8004a70:	20003614 	.word	0x20003614
 8004a74:	0800abd0 	.word	0x0800abd0
 8004a78:	20003624 	.word	0x20003624
 8004a7c:	0800abd8 	.word	0x0800abd8
 8004a80:	20003634 	.word	0x20003634
 8004a84:	0800abe4 	.word	0x0800abe4
 8004a88:	0800abf4 	.word	0x0800abf4
 8004a8c:	0800ac00 	.word	0x0800ac00
 8004a90:	200026e4 	.word	0x200026e4
 8004a94:	20003468 	.word	0x20003468

08004a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b094      	sub	sp, #80	; 0x50
 8004a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aa2:	2228      	movs	r2, #40	; 0x28
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f004 fbd2 	bl	8009250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004abc:	1d3b      	adds	r3, r7, #4
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
 8004ac6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ada:	2302      	movs	r3, #2
 8004adc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004ae4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aee:	4618      	mov	r0, r3
 8004af0:	f002 f83a 	bl	8006b68 <HAL_RCC_OscConfig>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004afa:	f000 f9a9 	bl	8004e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004afe:	230f      	movs	r3, #15
 8004b00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b02:	2302      	movs	r3, #2
 8004b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b10:	2300      	movs	r3, #0
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	2102      	movs	r1, #2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f002 faa6 	bl	800706c <HAL_RCC_ClockConfig>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004b26:	f000 f993 	bl	8004e50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b34:	1d3b      	adds	r3, r7, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f002 fc30 	bl	800739c <HAL_RCCEx_PeriphCLKConfig>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004b42:	f000 f985 	bl	8004e50 <Error_Handler>
  }
}
 8004b46:	bf00      	nop
 8004b48:	3750      	adds	r7, #80	; 0x50
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004b60:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004b62:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <MX_ADC1_Init+0x78>)
 8004b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004b66:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004b6c:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004b7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b80:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b8c:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004b8e:	f000 fcb9 	bl	8005504 <HAL_ADC_Init>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8004b98:	f000 f95a 	bl	8004e50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8004ba4:	2306      	movs	r3, #6
 8004ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ba8:	1d3b      	adds	r3, r7, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <MX_ADC1_Init+0x74>)
 8004bae:	f000 ff0f 	bl	80059d0 <HAL_ADC_ConfigChannel>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8004bb8:	f000 f94a 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	2000346c 	.word	0x2000346c
 8004bc8:	40012400 	.word	0x40012400

08004bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b092      	sub	sp, #72	; 0x48
 8004bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	611a      	str	r2, [r3, #16]
 8004bec:	615a      	str	r2, [r3, #20]
 8004bee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bf0:	1d3b      	adds	r3, r7, #4
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f004 fb2a 	bl	8009250 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bfc:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004bfe:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <MX_TIM1_Init+0x100>)
 8004c00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004c02:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c08:	4b2f      	ldr	r3, [pc, #188]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8004c0e:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c10:	2259      	movs	r2, #89	; 0x59
 8004c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c14:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c26:	4828      	ldr	r0, [pc, #160]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c28:	f002 fd08 	bl	800763c <HAL_TIM_PWM_Init>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8004c32:	f000 f90d 	bl	8004e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c36:	2300      	movs	r3, #0
 8004c38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c42:	4619      	mov	r1, r3
 8004c44:	4820      	ldr	r0, [pc, #128]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c46:	f003 fcab 	bl	80085a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8004c50:	f000 f8fe 	bl	8004e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c54:	2360      	movs	r3, #96	; 0x60
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c60:	2300      	movs	r3, #0
 8004c62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c74:	2200      	movs	r2, #0
 8004c76:	4619      	mov	r1, r3
 8004c78:	4813      	ldr	r0, [pc, #76]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004c7a:	f002 ff87 	bl	8007b8c <HAL_TIM_PWM_ConfigChannel>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8004c84:	f000 f8e4 	bl	8004e50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ca6:	1d3b      	adds	r3, r7, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4807      	ldr	r0, [pc, #28]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004cac:	f003 fcd6 	bl	800865c <HAL_TIMEx_ConfigBreakDeadTime>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8004cb6:	f000 f8cb 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004cba:	4803      	ldr	r0, [pc, #12]	; (8004cc8 <MX_TIM1_Init+0xfc>)
 8004cbc:	f000 f9ac 	bl	8005018 <HAL_TIM_MspPostInit>

}
 8004cc0:	bf00      	nop
 8004cc2:	3748      	adds	r7, #72	; 0x48
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	2000349c 	.word	0x2000349c
 8004ccc:	40012c00 	.word	0x40012c00

08004cd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	609a      	str	r2, [r3, #8]
 8004ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004cee:	4a1e      	ldr	r2, [pc, #120]	; (8004d68 <MX_TIM3_Init+0x98>)
 8004cf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4500-1;
 8004cfe:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004d00:	f241 1293 	movw	r2, #4499	; 0x1193
 8004d04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d0c:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d12:	4814      	ldr	r0, [pc, #80]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004d14:	f002 fbf8 	bl	8007508 <HAL_TIM_Base_Init>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004d1e:	f000 f897 	bl	8004e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d28:	f107 0308 	add.w	r3, r7, #8
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	480d      	ldr	r0, [pc, #52]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004d30:	f002 ffea 	bl	8007d08 <HAL_TIM_ConfigClockSource>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004d3a:	f000 f889 	bl	8004e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d3e:	2320      	movs	r3, #32
 8004d40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d46:	463b      	mov	r3, r7
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4806      	ldr	r0, [pc, #24]	; (8004d64 <MX_TIM3_Init+0x94>)
 8004d4c:	f003 fc28 	bl	80085a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004d56:	f000 f87b 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	200034e4 	.word	0x200034e4
 8004d68:	40000400 	.word	0x40000400

08004d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004d72:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <MX_USART1_UART_Init+0x50>)
 8004d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d90:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004d92:	220c      	movs	r2, #12
 8004d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004da2:	4805      	ldr	r0, [pc, #20]	; (8004db8 <MX_USART1_UART_Init+0x4c>)
 8004da4:	f003 fcab 	bl	80086fe <HAL_UART_Init>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004dae:	f000 f84f 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004db2:	bf00      	nop
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20003570 	.word	0x20003570
 8004dbc:	40013800 	.word	0x40013800

08004dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <MX_DMA_Init+0x48>)
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <MX_DMA_Init+0x48>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	6153      	str	r3, [r2, #20]
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <MX_DMA_Init+0x48>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004dde:	2200      	movs	r2, #0
 8004de0:	2100      	movs	r1, #0
 8004de2:	200c      	movs	r0, #12
 8004de4:	f001 f867 	bl	8005eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004de8:	200c      	movs	r0, #12
 8004dea:	f001 f880 	bl	8005eee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004dee:	2200      	movs	r2, #0
 8004df0:	2100      	movs	r1, #0
 8004df2:	200f      	movs	r0, #15
 8004df4:	f001 f85f 	bl	8005eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004df8:	200f      	movs	r0, #15
 8004dfa:	f001 f878 	bl	8005eee <HAL_NVIC_EnableIRQ>

}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000

08004e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e12:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <MX_GPIO_Init+0x40>)
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <MX_GPIO_Init+0x40>)
 8004e18:	f043 0320 	orr.w	r3, r3, #32
 8004e1c:	6193      	str	r3, [r2, #24]
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <MX_GPIO_Init+0x40>)
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <MX_GPIO_Init+0x40>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <MX_GPIO_Init+0x40>)
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	6193      	str	r3, [r2, #24]
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <MX_GPIO_Init+0x40>)
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]

}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	40021000 	.word	0x40021000

08004e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004e54:	b672      	cpsid	i
}
 8004e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e58:	e7fe      	b.n	8004e58 <Error_Handler+0x8>
	...

08004e5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <HAL_MspInit+0x5c>)
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <HAL_MspInit+0x5c>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6193      	str	r3, [r2, #24]
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_MspInit+0x5c>)
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <HAL_MspInit+0x5c>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <HAL_MspInit+0x5c>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e84:	61d3      	str	r3, [r2, #28]
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <HAL_MspInit+0x5c>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <HAL_MspInit+0x60>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <HAL_MspInit+0x60>)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	40010000 	.word	0x40010000

08004ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec8:	f107 0310 	add.w	r3, r7, #16
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <HAL_ADC_MspInit+0x7c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d129      	bne.n	8004f34 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_ADC_MspInit+0x80>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <HAL_ADC_MspInit+0x80>)
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eea:	6193      	str	r3, [r2, #24]
 8004eec:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <HAL_ADC_MspInit+0x80>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <HAL_ADC_MspInit+0x80>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <HAL_ADC_MspInit+0x80>)
 8004efe:	f043 0304 	orr.w	r3, r3, #4
 8004f02:	6193      	str	r3, [r2, #24]
 8004f04:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <HAL_ADC_MspInit+0x80>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004f10:	2301      	movs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f14:	2303      	movs	r3, #3
 8004f16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f18:	f107 0310 	add.w	r3, r7, #16
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4809      	ldr	r0, [pc, #36]	; (8004f44 <HAL_ADC_MspInit+0x84>)
 8004f20:	f001 fc9e 	bl	8006860 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004f24:	2200      	movs	r2, #0
 8004f26:	2100      	movs	r1, #0
 8004f28:	2012      	movs	r0, #18
 8004f2a:	f000 ffc4 	bl	8005eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004f2e:	2012      	movs	r0, #18
 8004f30:	f000 ffdd 	bl	8005eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004f34:	bf00      	nop
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40012400 	.word	0x40012400
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40010800 	.word	0x40010800

08004f48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <HAL_TIM_PWM_MspInit+0x84>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d133      	bne.n	8004fc2 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <HAL_TIM_PWM_MspInit+0x88>)
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <HAL_TIM_PWM_MspInit+0x88>)
 8004f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f64:	6193      	str	r3, [r2, #24]
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <HAL_TIM_PWM_MspInit+0x88>)
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004f74:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <HAL_TIM_PWM_MspInit+0x90>)
 8004f76:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f78:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f90:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f92:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f98:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004fa6:	480b      	ldr	r0, [pc, #44]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004fa8:	f000 ffbc 	bl	8005f24 <HAL_DMA_Init>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8004fb2:	f7ff ff4d 	bl	8004e50 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a06      	ldr	r2, [pc, #24]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24
 8004fbc:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	2000352c 	.word	0x2000352c
 8004fd8:	4002001c 	.word	0x4002001c

08004fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a09      	ldr	r2, [pc, #36]	; (8005010 <HAL_TIM_Base_MspInit+0x34>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10b      	bne.n	8005006 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fee:	4b09      	ldr	r3, [pc, #36]	; (8005014 <HAL_TIM_Base_MspInit+0x38>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	4a08      	ldr	r2, [pc, #32]	; (8005014 <HAL_TIM_Base_MspInit+0x38>)
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	61d3      	str	r3, [r2, #28]
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_TIM_Base_MspInit+0x38>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	40000400 	.word	0x40000400
 8005014:	40021000 	.word	0x40021000

08005018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a10      	ldr	r2, [pc, #64]	; (8005074 <HAL_TIM_MspPostInit+0x5c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d118      	bne.n	800506a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005038:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <HAL_TIM_MspPostInit+0x60>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	4a0e      	ldr	r2, [pc, #56]	; (8005078 <HAL_TIM_MspPostInit+0x60>)
 800503e:	f043 0304 	orr.w	r3, r3, #4
 8005042:	6193      	str	r3, [r2, #24]
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <HAL_TIM_MspPostInit+0x60>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005054:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	2302      	movs	r3, #2
 8005058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800505a:	2303      	movs	r3, #3
 800505c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505e:	f107 0310 	add.w	r3, r7, #16
 8005062:	4619      	mov	r1, r3
 8005064:	4805      	ldr	r0, [pc, #20]	; (800507c <HAL_TIM_MspPostInit+0x64>)
 8005066:	f001 fbfb 	bl	8006860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800506a:	bf00      	nop
 800506c:	3720      	adds	r7, #32
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40021000 	.word	0x40021000
 800507c:	40010800 	.word	0x40010800

08005080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005088:	f107 0310 	add.w	r3, r7, #16
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	605a      	str	r2, [r3, #4]
 8005092:	609a      	str	r2, [r3, #8]
 8005094:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a34      	ldr	r2, [pc, #208]	; (800516c <HAL_UART_MspInit+0xec>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d160      	bne.n	8005162 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050a0:	4b33      	ldr	r3, [pc, #204]	; (8005170 <HAL_UART_MspInit+0xf0>)
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	4a32      	ldr	r2, [pc, #200]	; (8005170 <HAL_UART_MspInit+0xf0>)
 80050a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050aa:	6193      	str	r3, [r2, #24]
 80050ac:	4b30      	ldr	r3, [pc, #192]	; (8005170 <HAL_UART_MspInit+0xf0>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b8:	4b2d      	ldr	r3, [pc, #180]	; (8005170 <HAL_UART_MspInit+0xf0>)
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <HAL_UART_MspInit+0xf0>)
 80050be:	f043 0304 	orr.w	r3, r3, #4
 80050c2:	6193      	str	r3, [r2, #24]
 80050c4:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <HAL_UART_MspInit+0xf0>)
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d6:	2302      	movs	r3, #2
 80050d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050da:	2303      	movs	r3, #3
 80050dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050de:	f107 0310 	add.w	r3, r7, #16
 80050e2:	4619      	mov	r1, r3
 80050e4:	4823      	ldr	r0, [pc, #140]	; (8005174 <HAL_UART_MspInit+0xf4>)
 80050e6:	f001 fbbb 	bl	8006860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f8:	f107 0310 	add.w	r3, r7, #16
 80050fc:	4619      	mov	r1, r3
 80050fe:	481d      	ldr	r0, [pc, #116]	; (8005174 <HAL_UART_MspInit+0xf4>)
 8005100:	f001 fbae 	bl	8006860 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005104:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <HAL_UART_MspInit+0xf8>)
 8005106:	4a1d      	ldr	r2, [pc, #116]	; (800517c <HAL_UART_MspInit+0xfc>)
 8005108:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800510a:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <HAL_UART_MspInit+0xf8>)
 800510c:	2200      	movs	r2, #0
 800510e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <HAL_UART_MspInit+0xf8>)
 8005112:	2200      	movs	r2, #0
 8005114:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005116:	4b18      	ldr	r3, [pc, #96]	; (8005178 <HAL_UART_MspInit+0xf8>)
 8005118:	2280      	movs	r2, #128	; 0x80
 800511a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800511c:	4b16      	ldr	r3, [pc, #88]	; (8005178 <HAL_UART_MspInit+0xf8>)
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005122:	4b15      	ldr	r3, [pc, #84]	; (8005178 <HAL_UART_MspInit+0xf8>)
 8005124:	2200      	movs	r2, #0
 8005126:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <HAL_UART_MspInit+0xf8>)
 800512a:	2200      	movs	r2, #0
 800512c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_UART_MspInit+0xf8>)
 8005130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005134:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005136:	4810      	ldr	r0, [pc, #64]	; (8005178 <HAL_UART_MspInit+0xf8>)
 8005138:	f000 fef4 	bl	8005f24 <HAL_DMA_Init>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8005142:	f7ff fe85 	bl	8004e50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a0b      	ldr	r2, [pc, #44]	; (8005178 <HAL_UART_MspInit+0xf8>)
 800514a:	639a      	str	r2, [r3, #56]	; 0x38
 800514c:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <HAL_UART_MspInit+0xf8>)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	2025      	movs	r0, #37	; 0x25
 8005158:	f000 fead 	bl	8005eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800515c:	2025      	movs	r0, #37	; 0x25
 800515e:	f000 fec6 	bl	8005eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005162:	bf00      	nop
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40013800 	.word	0x40013800
 8005170:	40021000 	.word	0x40021000
 8005174:	40010800 	.word	0x40010800
 8005178:	200035b4 	.word	0x200035b4
 800517c:	40020058 	.word	0x40020058

08005180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005184:	e7fe      	b.n	8005184 <NMI_Handler+0x4>

08005186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005186:	b480      	push	{r7}
 8005188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800518a:	e7fe      	b.n	800518a <HardFault_Handler+0x4>

0800518c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005190:	e7fe      	b.n	8005190 <MemManage_Handler+0x4>

08005192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005192:	b480      	push	{r7}
 8005194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005196:	e7fe      	b.n	8005196 <BusFault_Handler+0x4>

08005198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800519c:	e7fe      	b.n	800519c <UsageFault_Handler+0x4>

0800519e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051b6:	b480      	push	{r7}
 80051b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051c6:	f000 f95d 	bl	8005484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80051d4:	4802      	ldr	r0, [pc, #8]	; (80051e0 <DMA1_Channel2_IRQHandler+0x10>)
 80051d6:	f001 f80f 	bl	80061f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	2000352c 	.word	0x2000352c

080051e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80051e8:	4802      	ldr	r0, [pc, #8]	; (80051f4 <DMA1_Channel5_IRQHandler+0x10>)
 80051ea:	f001 f805 	bl	80061f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	200035b4 	.word	0x200035b4

080051f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80051fc:	4802      	ldr	r0, [pc, #8]	; (8005208 <ADC1_2_IRQHandler+0x10>)
 80051fe:	f000 fb1b 	bl	8005838 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	2000346c 	.word	0x2000346c

0800520c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005210:	4802      	ldr	r0, [pc, #8]	; (800521c <USART1_IRQHandler+0x10>)
 8005212:	f003 fba3 	bl	800895c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005216:	bf00      	nop
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20003570 	.word	0x20003570

08005220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
	return 1;
 8005224:	2301      	movs	r3, #1
}
 8005226:	4618      	mov	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <_kill>:

int _kill(int pid, int sig)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005238:	f003 ffc2 	bl	80091c0 <__errno>
 800523c:	4603      	mov	r3, r0
 800523e:	2216      	movs	r2, #22
 8005240:	601a      	str	r2, [r3, #0]
	return -1;
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <_exit>:

void _exit (int status)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005256:	f04f 31ff 	mov.w	r1, #4294967295
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ffe7 	bl	800522e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005260:	e7fe      	b.n	8005260 <_exit+0x12>

08005262 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e00a      	b.n	800528a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005274:	f3af 8000 	nop.w
 8005278:	4601      	mov	r1, r0
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	60ba      	str	r2, [r7, #8]
 8005280:	b2ca      	uxtb	r2, r1
 8005282:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3301      	adds	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	dbf0      	blt.n	8005274 <_read+0x12>
	}

return len;
 8005292:	687b      	ldr	r3, [r7, #4]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e009      	b.n	80052c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	60ba      	str	r2, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	3301      	adds	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	dbf1      	blt.n	80052ae <_write+0x12>
	}
	return len;
 80052ca:	687b      	ldr	r3, [r7, #4]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <_close>:

int _close(int file)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	return -1;
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr

080052ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052fa:	605a      	str	r2, [r3, #4]
	return 0;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <_isatty>:

int _isatty(int file)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	return 1;
 8005310:	2301      	movs	r3, #1
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
	return 0;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800533c:	4a14      	ldr	r2, [pc, #80]	; (8005390 <_sbrk+0x5c>)
 800533e:	4b15      	ldr	r3, [pc, #84]	; (8005394 <_sbrk+0x60>)
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005348:	4b13      	ldr	r3, [pc, #76]	; (8005398 <_sbrk+0x64>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <_sbrk+0x64>)
 8005352:	4a12      	ldr	r2, [pc, #72]	; (800539c <_sbrk+0x68>)
 8005354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <_sbrk+0x64>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	429a      	cmp	r2, r3
 8005362:	d207      	bcs.n	8005374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005364:	f003 ff2c 	bl	80091c0 <__errno>
 8005368:	4603      	mov	r3, r0
 800536a:	220c      	movs	r2, #12
 800536c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	e009      	b.n	8005388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <_sbrk+0x64>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800537a:	4b07      	ldr	r3, [pc, #28]	; (8005398 <_sbrk+0x64>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4413      	add	r3, r2
 8005382:	4a05      	ldr	r2, [pc, #20]	; (8005398 <_sbrk+0x64>)
 8005384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005386:	68fb      	ldr	r3, [r7, #12]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20005000 	.word	0x20005000
 8005394:	00000400 	.word	0x00000400
 8005398:	200036e4 	.word	0x200036e4
 800539c:	20003720 	.word	0x20003720

080053a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053ac:	480c      	ldr	r0, [pc, #48]	; (80053e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80053ae:	490d      	ldr	r1, [pc, #52]	; (80053e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80053b0:	4a0d      	ldr	r2, [pc, #52]	; (80053e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80053b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053b4:	e002      	b.n	80053bc <LoopCopyDataInit>

080053b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053ba:	3304      	adds	r3, #4

080053bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053c0:	d3f9      	bcc.n	80053b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80053c4:	4c0a      	ldr	r4, [pc, #40]	; (80053f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80053c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053c8:	e001      	b.n	80053ce <LoopFillZerobss>

080053ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053cc:	3204      	adds	r2, #4

080053ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053d0:	d3fb      	bcc.n	80053ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80053d2:	f7ff ffe5 	bl	80053a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053d6:	f003 fef9 	bl	80091cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80053da:	f7ff f9f7 	bl	80047cc <main>
  bx lr
 80053de:	4770      	bx	lr
  ldr r0, =_sdata
 80053e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053e4:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80053e8:	0800ae88 	.word	0x0800ae88
  ldr r2, =_sbss
 80053ec:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80053f0:	20003720 	.word	0x20003720

080053f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80053f4:	e7fe      	b.n	80053f4 <CAN1_RX1_IRQHandler>
	...

080053f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053fc:	4b08      	ldr	r3, [pc, #32]	; (8005420 <HAL_Init+0x28>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a07      	ldr	r2, [pc, #28]	; (8005420 <HAL_Init+0x28>)
 8005402:	f043 0310 	orr.w	r3, r3, #16
 8005406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005408:	2003      	movs	r0, #3
 800540a:	f000 fd49 	bl	8005ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800540e:	200f      	movs	r0, #15
 8005410:	f000 f808 	bl	8005424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005414:	f7ff fd22 	bl	8004e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40022000 	.word	0x40022000

08005424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800542c:	4b12      	ldr	r3, [pc, #72]	; (8005478 <HAL_InitTick+0x54>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <HAL_InitTick+0x58>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800543a:	fbb3 f3f1 	udiv	r3, r3, r1
 800543e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fd61 	bl	8005f0a <HAL_SYSTICK_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e00e      	b.n	8005470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b0f      	cmp	r3, #15
 8005456:	d80a      	bhi.n	800546e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005458:	2200      	movs	r2, #0
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	f000 fd29 	bl	8005eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005464:	4a06      	ldr	r2, [pc, #24]	; (8005480 <HAL_InitTick+0x5c>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e000      	b.n	8005470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	200000f0 	.word	0x200000f0
 800547c:	200000f8 	.word	0x200000f8
 8005480:	200000f4 	.word	0x200000f4

08005484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_IncTick+0x1c>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_IncTick+0x20>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4413      	add	r3, r2
 8005494:	4a03      	ldr	r2, [pc, #12]	; (80054a4 <HAL_IncTick+0x20>)
 8005496:	6013      	str	r3, [r2, #0]
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr
 80054a0:	200000f8 	.word	0x200000f8
 80054a4:	200036e8 	.word	0x200036e8

080054a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return uwTick;
 80054ac:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <HAL_GetTick+0x10>)
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	200036e8 	.word	0x200036e8

080054bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054c4:	f7ff fff0 	bl	80054a8 <HAL_GetTick>
 80054c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d005      	beq.n	80054e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <HAL_Delay+0x44>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054e2:	bf00      	nop
 80054e4:	f7ff ffe0 	bl	80054a8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d8f7      	bhi.n	80054e4 <HAL_Delay+0x28>
  {
  }
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	200000f8 	.word	0x200000f8

08005504 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e0be      	b.n	80056a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fcbc 	bl	8004ec0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fb93 	bl	8005c74 <ADC_ConversionStop_Disable>
 800554e:	4603      	mov	r3, r0
 8005550:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 8099 	bne.w	8005692 <HAL_ADC_Init+0x18e>
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 8095 	bne.w	8005692 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005570:	f023 0302 	bic.w	r3, r3, #2
 8005574:	f043 0202 	orr.w	r2, r3, #2
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005584:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	7b1b      	ldrb	r3, [r3, #12]
 800558a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800558c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4313      	orrs	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559c:	d003      	beq.n	80055a6 <HAL_ADC_Init+0xa2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d102      	bne.n	80055ac <HAL_ADC_Init+0xa8>
 80055a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055aa:	e000      	b.n	80055ae <HAL_ADC_Init+0xaa>
 80055ac:	2300      	movs	r3, #0
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	7d1b      	ldrb	r3, [r3, #20]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d119      	bne.n	80055f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	7b1b      	ldrb	r3, [r3, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	035a      	lsls	r2, r3, #13
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	e00b      	b.n	80055f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f043 0201 	orr.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	430a      	orrs	r2, r1
 8005602:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	4b28      	ldr	r3, [pc, #160]	; (80056ac <HAL_ADC_Init+0x1a8>)
 800560c:	4013      	ands	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	430b      	orrs	r3, r1
 8005616:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005620:	d003      	beq.n	800562a <HAL_ADC_Init+0x126>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d104      	bne.n	8005634 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	3b01      	subs	r3, #1
 8005630:	051b      	lsls	r3, r3, #20
 8005632:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	430a      	orrs	r2, r1
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <HAL_ADC_Init+0x1ac>)
 8005650:	4013      	ands	r3, r2
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d10b      	bne.n	8005670 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	f043 0201 	orr.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800566e:	e018      	b.n	80056a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	f023 0312 	bic.w	r3, r3, #18
 8005678:	f043 0210 	orr.w	r2, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	f043 0201 	orr.w	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005690:	e007      	b.n	80056a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	f043 0210 	orr.w	r2, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	ffe1f7fd 	.word	0xffe1f7fd
 80056b0:	ff1f0efe 	.word	0xff1f0efe

080056b4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_ADC_Start_IT+0x1a>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e0a0      	b.n	8005810 <HAL_ADC_Start_IT+0x15c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa72 	bl	8005bc0 <ADC_Enable>
 80056dc:	4603      	mov	r3, r0
 80056de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 808f 	bne.w	8005806 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a45      	ldr	r2, [pc, #276]	; (8005818 <HAL_ADC_Start_IT+0x164>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d105      	bne.n	8005712 <HAL_ADC_Start_IT+0x5e>
 8005706:	4b45      	ldr	r3, [pc, #276]	; (800581c <HAL_ADC_Start_IT+0x168>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d115      	bne.n	800573e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d026      	beq.n	800577a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005734:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800573c:	e01d      	b.n	800577a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a33      	ldr	r2, [pc, #204]	; (800581c <HAL_ADC_Start_IT+0x168>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_ADC_Start_IT+0xaa>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <HAL_ADC_Start_IT+0x164>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d10d      	bne.n	800577a <HAL_ADC_Start_IT+0xc6>
 800575e:	4b2f      	ldr	r3, [pc, #188]	; (800581c <HAL_ADC_Start_IT+0x168>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005772:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f023 0206 	bic.w	r2, r3, #6
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	62da      	str	r2, [r3, #44]	; 0x2c
 8005792:	e002      	b.n	800579a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f06f 0202 	mvn.w	r2, #2
 80057aa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0220 	orr.w	r2, r2, #32
 80057ba:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80057c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80057ca:	d113      	bne.n	80057f4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80057d0:	4a11      	ldr	r2, [pc, #68]	; (8005818 <HAL_ADC_Start_IT+0x164>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d105      	bne.n	80057e2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80057d6:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_ADC_Start_IT+0x168>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d108      	bne.n	80057f4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80057f0:	609a      	str	r2, [r3, #8]
 80057f2:	e00c      	b.n	800580e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	e003      	b.n	800580e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40012800 	.word	0x40012800
 800581c:	40012400 	.word	0x40012400

08005820 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b20      	cmp	r3, #32
 800584c:	d140      	bne.n	80058d0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d139      	bne.n	80058d0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800587e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005882:	d11d      	bne.n	80058c0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005888:	2b00      	cmp	r3, #0
 800588a:	d119      	bne.n	80058c0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0220 	bic.w	r2, r2, #32
 800589a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d105      	bne.n	80058c0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f043 0201 	orr.w	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fe f88b 	bl	80039dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f06f 0212 	mvn.w	r2, #18
 80058ce:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b80      	cmp	r3, #128	; 0x80
 80058dc:	d14f      	bne.n	800597e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d148      	bne.n	800597e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d105      	bne.n	8005904 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800590e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005912:	d012      	beq.n	800593a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800591e:	2b00      	cmp	r3, #0
 8005920:	d125      	bne.n	800596e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800592c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005930:	d11d      	bne.n	800596e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005936:	2b00      	cmp	r3, #0
 8005938:	d119      	bne.n	800596e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005948:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	f043 0201 	orr.w	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f9c1 	bl	8005cf6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 020c 	mvn.w	r2, #12
 800597c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d114      	bne.n	80059b6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b01      	cmp	r3, #1
 8005998:	d10d      	bne.n	80059b6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f809 	bl	80059be <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0201 	mvn.w	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x20>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e0dc      	b.n	8005baa <HAL_ADC_ConfigChannel+0x1da>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d81c      	bhi.n	8005a3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	3b05      	subs	r3, #5
 8005a12:	221f      	movs	r2, #31
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	4019      	ands	r1, r3
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	3b05      	subs	r3, #5
 8005a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	635a      	str	r2, [r3, #52]	; 0x34
 8005a38:	e03c      	b.n	8005ab4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d81c      	bhi.n	8005a7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	3b23      	subs	r3, #35	; 0x23
 8005a54:	221f      	movs	r2, #31
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	4019      	ands	r1, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3b23      	subs	r3, #35	; 0x23
 8005a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
 8005a7a:	e01b      	b.n	8005ab4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3b41      	subs	r3, #65	; 0x41
 8005a8e:	221f      	movs	r2, #31
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	4019      	ands	r1, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3b41      	subs	r3, #65	; 0x41
 8005aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b09      	cmp	r3, #9
 8005aba:	d91c      	bls.n	8005af6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68d9      	ldr	r1, [r3, #12]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	3b1e      	subs	r3, #30
 8005ace:	2207      	movs	r2, #7
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	4019      	ands	r1, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	6898      	ldr	r0, [r3, #8]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3b1e      	subs	r3, #30
 8005ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	60da      	str	r2, [r3, #12]
 8005af4:	e019      	b.n	8005b2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6919      	ldr	r1, [r3, #16]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	4413      	add	r3, r2
 8005b06:	2207      	movs	r2, #7
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	4019      	ands	r1, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6898      	ldr	r0, [r3, #8]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d003      	beq.n	8005b3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005b36:	2b11      	cmp	r3, #17
 8005b38:	d132      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d125      	bne.n	8005b90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d126      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d11a      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b6a:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <HAL_ADC_ConfigChannel+0x1ec>)
 8005b70:	fba2 2303 	umull	r2, r3, r2, r3
 8005b74:	0c9a      	lsrs	r2, r3, #18
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b80:	e002      	b.n	8005b88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f9      	bne.n	8005b82 <HAL_ADC_ConfigChannel+0x1b2>
 8005b8e:	e007      	b.n	8005ba0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr
 8005bb4:	40012400 	.word	0x40012400
 8005bb8:	200000f0 	.word	0x200000f0
 8005bbc:	431bde83 	.word	0x431bde83

08005bc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d040      	beq.n	8005c60 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005bee:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <ADC_Enable+0xac>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <ADC_Enable+0xb0>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	0c9b      	lsrs	r3, r3, #18
 8005bfa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005bfc:	e002      	b.n	8005c04 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f9      	bne.n	8005bfe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c0a:	f7ff fc4d 	bl	80054a8 <HAL_GetTick>
 8005c0e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005c10:	e01f      	b.n	8005c52 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c12:	f7ff fc49 	bl	80054a8 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d918      	bls.n	8005c52 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d011      	beq.n	8005c52 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	f043 0210 	orr.w	r2, r3, #16
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e007      	b.n	8005c62 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d1d8      	bne.n	8005c12 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200000f0 	.word	0x200000f0
 8005c70:	431bde83 	.word	0x431bde83

08005c74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d12e      	bne.n	8005cec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c9e:	f7ff fc03 	bl	80054a8 <HAL_GetTick>
 8005ca2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005ca4:	e01b      	b.n	8005cde <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005ca6:	f7ff fbff 	bl	80054a8 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d914      	bls.n	8005cde <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10d      	bne.n	8005cde <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	f043 0210 	orr.w	r2, r3, #16
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	f043 0201 	orr.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e007      	b.n	8005cee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d0dc      	beq.n	8005ca6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <__NVIC_SetPriorityGrouping>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <__NVIC_SetPriorityGrouping+0x44>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d24:	4013      	ands	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d3a:	4a04      	ldr	r2, [pc, #16]	; (8005d4c <__NVIC_SetPriorityGrouping+0x44>)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	60d3      	str	r3, [r2, #12]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	e000ed00 	.word	0xe000ed00

08005d50 <__NVIC_GetPriorityGrouping>:
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <__NVIC_GetPriorityGrouping+0x18>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	f003 0307 	and.w	r3, r3, #7
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	e000ed00 	.word	0xe000ed00

08005d6c <__NVIC_EnableIRQ>:
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	db0b      	blt.n	8005d96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	f003 021f 	and.w	r2, r3, #31
 8005d84:	4906      	ldr	r1, [pc, #24]	; (8005da0 <__NVIC_EnableIRQ+0x34>)
 8005d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr
 8005da0:	e000e100 	.word	0xe000e100

08005da4 <__NVIC_SetPriority>:
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	6039      	str	r1, [r7, #0]
 8005dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db0a      	blt.n	8005dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	490c      	ldr	r1, [pc, #48]	; (8005df0 <__NVIC_SetPriority+0x4c>)
 8005dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc2:	0112      	lsls	r2, r2, #4
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005dcc:	e00a      	b.n	8005de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	4908      	ldr	r1, [pc, #32]	; (8005df4 <__NVIC_SetPriority+0x50>)
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	3b04      	subs	r3, #4
 8005ddc:	0112      	lsls	r2, r2, #4
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	440b      	add	r3, r1
 8005de2:	761a      	strb	r2, [r3, #24]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	e000e100 	.word	0xe000e100
 8005df4:	e000ed00 	.word	0xe000ed00

08005df8 <NVIC_EncodePriority>:
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b089      	sub	sp, #36	; 0x24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f1c3 0307 	rsb	r3, r3, #7
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	bf28      	it	cs
 8005e16:	2304      	movcs	r3, #4
 8005e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	2b06      	cmp	r3, #6
 8005e20:	d902      	bls.n	8005e28 <NVIC_EncodePriority+0x30>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3b03      	subs	r3, #3
 8005e26:	e000      	b.n	8005e2a <NVIC_EncodePriority+0x32>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43da      	mvns	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e40:	f04f 31ff 	mov.w	r1, #4294967295
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4a:	43d9      	mvns	r1, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e50:	4313      	orrs	r3, r2
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3724      	adds	r7, #36	; 0x24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e6c:	d301      	bcc.n	8005e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e00f      	b.n	8005e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <SysTick_Config+0x40>)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e7a:	210f      	movs	r1, #15
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	f7ff ff90 	bl	8005da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <SysTick_Config+0x40>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e8a:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <SysTick_Config+0x40>)
 8005e8c:	2207      	movs	r2, #7
 8005e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	e000e010 	.word	0xe000e010

08005ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ff2d 	bl	8005d08 <__NVIC_SetPriorityGrouping>
}
 8005eae:	bf00      	nop
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b086      	sub	sp, #24
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ec8:	f7ff ff42 	bl	8005d50 <__NVIC_GetPriorityGrouping>
 8005ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	6978      	ldr	r0, [r7, #20]
 8005ed4:	f7ff ff90 	bl	8005df8 <NVIC_EncodePriority>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff ff5f 	bl	8005da4 <__NVIC_SetPriority>
}
 8005ee6:	bf00      	nop
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff ff35 	bl	8005d6c <__NVIC_EnableIRQ>
}
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff ffa2 	bl	8005e5c <SysTick_Config>
 8005f18:	4603      	mov	r3, r0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e043      	b.n	8005fc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4b22      	ldr	r3, [pc, #136]	; (8005fcc <HAL_DMA_Init+0xa8>)
 8005f42:	4413      	add	r3, r2
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <HAL_DMA_Init+0xac>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	009a      	lsls	r2, r3, #2
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <HAL_DMA_Init+0xb0>)
 8005f56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr
 8005fcc:	bffdfff8 	.word	0xbffdfff8
 8005fd0:	cccccccd 	.word	0xcccccccd
 8005fd4:	40020000 	.word	0x40020000

08005fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_DMA_Start_IT+0x20>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e04a      	b.n	800608e <HAL_DMA_Start_IT+0xb6>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006006:	2b01      	cmp	r3, #1
 8006008:	d13a      	bne.n	8006080 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2202      	movs	r2, #2
 800600e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f9e8 	bl	8006404 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 020e 	orr.w	r2, r2, #14
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e00f      	b.n	800606e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0204 	bic.w	r2, r2, #4
 800605c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 020a 	orr.w	r2, r2, #10
 800606c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e005      	b.n	800608c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006088:	2302      	movs	r3, #2
 800608a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d008      	beq.n	80060be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2204      	movs	r2, #4
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e020      	b.n	8006100 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 020e 	bic.w	r2, r2, #14
 80060cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	2101      	movs	r1, #1
 80060e8:	fa01 f202 	lsl.w	r2, r1, r2
 80060ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr
	...

0800610c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800611e:	2b02      	cmp	r3, #2
 8006120:	d005      	beq.n	800612e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2204      	movs	r2, #4
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
 800612c:	e051      	b.n	80061d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 020e 	bic.w	r2, r2, #14
 800613c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a22      	ldr	r2, [pc, #136]	; (80061dc <HAL_DMA_Abort_IT+0xd0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d029      	beq.n	80061ac <HAL_DMA_Abort_IT+0xa0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a20      	ldr	r2, [pc, #128]	; (80061e0 <HAL_DMA_Abort_IT+0xd4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d022      	beq.n	80061a8 <HAL_DMA_Abort_IT+0x9c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1f      	ldr	r2, [pc, #124]	; (80061e4 <HAL_DMA_Abort_IT+0xd8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d01a      	beq.n	80061a2 <HAL_DMA_Abort_IT+0x96>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <HAL_DMA_Abort_IT+0xdc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d012      	beq.n	800619c <HAL_DMA_Abort_IT+0x90>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <HAL_DMA_Abort_IT+0xe0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00a      	beq.n	8006196 <HAL_DMA_Abort_IT+0x8a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_DMA_Abort_IT+0xe4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d102      	bne.n	8006190 <HAL_DMA_Abort_IT+0x84>
 800618a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800618e:	e00e      	b.n	80061ae <HAL_DMA_Abort_IT+0xa2>
 8006190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006194:	e00b      	b.n	80061ae <HAL_DMA_Abort_IT+0xa2>
 8006196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800619a:	e008      	b.n	80061ae <HAL_DMA_Abort_IT+0xa2>
 800619c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061a0:	e005      	b.n	80061ae <HAL_DMA_Abort_IT+0xa2>
 80061a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061a6:	e002      	b.n	80061ae <HAL_DMA_Abort_IT+0xa2>
 80061a8:	2310      	movs	r3, #16
 80061aa:	e000      	b.n	80061ae <HAL_DMA_Abort_IT+0xa2>
 80061ac:	2301      	movs	r3, #1
 80061ae:	4a11      	ldr	r2, [pc, #68]	; (80061f4 <HAL_DMA_Abort_IT+0xe8>)
 80061b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
    } 
  }
  return status;
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40020008 	.word	0x40020008
 80061e0:	4002001c 	.word	0x4002001c
 80061e4:	40020030 	.word	0x40020030
 80061e8:	40020044 	.word	0x40020044
 80061ec:	40020058 	.word	0x40020058
 80061f0:	4002006c 	.word	0x4002006c
 80061f4:	40020000 	.word	0x40020000

080061f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	2204      	movs	r2, #4
 8006216:	409a      	lsls	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d04f      	beq.n	80062c0 <HAL_DMA_IRQHandler+0xc8>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d04a      	beq.n	80062c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0204 	bic.w	r2, r2, #4
 8006246:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a66      	ldr	r2, [pc, #408]	; (80063e8 <HAL_DMA_IRQHandler+0x1f0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d029      	beq.n	80062a6 <HAL_DMA_IRQHandler+0xae>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a65      	ldr	r2, [pc, #404]	; (80063ec <HAL_DMA_IRQHandler+0x1f4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xaa>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a63      	ldr	r2, [pc, #396]	; (80063f0 <HAL_DMA_IRQHandler+0x1f8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01a      	beq.n	800629c <HAL_DMA_IRQHandler+0xa4>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a62      	ldr	r2, [pc, #392]	; (80063f4 <HAL_DMA_IRQHandler+0x1fc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d012      	beq.n	8006296 <HAL_DMA_IRQHandler+0x9e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a60      	ldr	r2, [pc, #384]	; (80063f8 <HAL_DMA_IRQHandler+0x200>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00a      	beq.n	8006290 <HAL_DMA_IRQHandler+0x98>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a5f      	ldr	r2, [pc, #380]	; (80063fc <HAL_DMA_IRQHandler+0x204>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d102      	bne.n	800628a <HAL_DMA_IRQHandler+0x92>
 8006284:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006288:	e00e      	b.n	80062a8 <HAL_DMA_IRQHandler+0xb0>
 800628a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800628e:	e00b      	b.n	80062a8 <HAL_DMA_IRQHandler+0xb0>
 8006290:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006294:	e008      	b.n	80062a8 <HAL_DMA_IRQHandler+0xb0>
 8006296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800629a:	e005      	b.n	80062a8 <HAL_DMA_IRQHandler+0xb0>
 800629c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a0:	e002      	b.n	80062a8 <HAL_DMA_IRQHandler+0xb0>
 80062a2:	2340      	movs	r3, #64	; 0x40
 80062a4:	e000      	b.n	80062a8 <HAL_DMA_IRQHandler+0xb0>
 80062a6:	2304      	movs	r3, #4
 80062a8:	4a55      	ldr	r2, [pc, #340]	; (8006400 <HAL_DMA_IRQHandler+0x208>)
 80062aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8094 	beq.w	80063de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80062be:	e08e      	b.n	80063de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	2202      	movs	r2, #2
 80062c6:	409a      	lsls	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d056      	beq.n	800637e <HAL_DMA_IRQHandler+0x186>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d051      	beq.n	800637e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 020a 	bic.w	r2, r2, #10
 80062f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a38      	ldr	r2, [pc, #224]	; (80063e8 <HAL_DMA_IRQHandler+0x1f0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d029      	beq.n	800635e <HAL_DMA_IRQHandler+0x166>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a37      	ldr	r2, [pc, #220]	; (80063ec <HAL_DMA_IRQHandler+0x1f4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <HAL_DMA_IRQHandler+0x162>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a35      	ldr	r2, [pc, #212]	; (80063f0 <HAL_DMA_IRQHandler+0x1f8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01a      	beq.n	8006354 <HAL_DMA_IRQHandler+0x15c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a34      	ldr	r2, [pc, #208]	; (80063f4 <HAL_DMA_IRQHandler+0x1fc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d012      	beq.n	800634e <HAL_DMA_IRQHandler+0x156>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a32      	ldr	r2, [pc, #200]	; (80063f8 <HAL_DMA_IRQHandler+0x200>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00a      	beq.n	8006348 <HAL_DMA_IRQHandler+0x150>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a31      	ldr	r2, [pc, #196]	; (80063fc <HAL_DMA_IRQHandler+0x204>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d102      	bne.n	8006342 <HAL_DMA_IRQHandler+0x14a>
 800633c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006340:	e00e      	b.n	8006360 <HAL_DMA_IRQHandler+0x168>
 8006342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006346:	e00b      	b.n	8006360 <HAL_DMA_IRQHandler+0x168>
 8006348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800634c:	e008      	b.n	8006360 <HAL_DMA_IRQHandler+0x168>
 800634e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006352:	e005      	b.n	8006360 <HAL_DMA_IRQHandler+0x168>
 8006354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006358:	e002      	b.n	8006360 <HAL_DMA_IRQHandler+0x168>
 800635a:	2320      	movs	r3, #32
 800635c:	e000      	b.n	8006360 <HAL_DMA_IRQHandler+0x168>
 800635e:	2302      	movs	r3, #2
 8006360:	4a27      	ldr	r2, [pc, #156]	; (8006400 <HAL_DMA_IRQHandler+0x208>)
 8006362:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d034      	beq.n	80063de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800637c:	e02f      	b.n	80063de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2208      	movs	r2, #8
 8006384:	409a      	lsls	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d028      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x1e8>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d023      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 020e 	bic.w	r2, r2, #14
 80063a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f202 	lsl.w	r2, r1, r2
 80063b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
    }
  }
  return;
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
}
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40020008 	.word	0x40020008
 80063ec:	4002001c 	.word	0x4002001c
 80063f0:	40020030 	.word	0x40020030
 80063f4:	40020044 	.word	0x40020044
 80063f8:	40020058 	.word	0x40020058
 80063fc:	4002006c 	.word	0x4002006c
 8006400:	40020000 	.word	0x40020000

08006404 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	2101      	movs	r1, #1
 800641c:	fa01 f202 	lsl.w	r2, r1, r2
 8006420:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b10      	cmp	r3, #16
 8006430:	d108      	bne.n	8006444 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006442:	e007      	b.n	8006454 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]
}
 8006454:	bf00      	nop
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr
	...

08006460 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <HAL_FLASH_Program+0xd8>)
 800647c:	7e1b      	ldrb	r3, [r3, #24]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_FLASH_Program+0x26>
 8006482:	2302      	movs	r3, #2
 8006484:	e054      	b.n	8006530 <HAL_FLASH_Program+0xd0>
 8006486:	4b2c      	ldr	r3, [pc, #176]	; (8006538 <HAL_FLASH_Program+0xd8>)
 8006488:	2201      	movs	r2, #1
 800648a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800648c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006490:	f000 f8a8 	bl	80065e4 <FLASH_WaitForLastOperation>
 8006494:	4603      	mov	r3, r0
 8006496:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8006498:	7dfb      	ldrb	r3, [r7, #23]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d144      	bne.n	8006528 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d102      	bne.n	80064aa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80064a4:	2301      	movs	r3, #1
 80064a6:	757b      	strb	r3, [r7, #21]
 80064a8:	e007      	b.n	80064ba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d102      	bne.n	80064b6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80064b0:	2302      	movs	r3, #2
 80064b2:	757b      	strb	r3, [r7, #21]
 80064b4:	e001      	b.n	80064ba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80064b6:	2304      	movs	r3, #4
 80064b8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80064ba:	2300      	movs	r3, #0
 80064bc:	75bb      	strb	r3, [r7, #22]
 80064be:	e02d      	b.n	800651c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80064c0:	7dbb      	ldrb	r3, [r7, #22]
 80064c2:	005a      	lsls	r2, r3, #1
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	eb02 0c03 	add.w	ip, r2, r3
 80064ca:	7dbb      	ldrb	r3, [r7, #22]
 80064cc:	0119      	lsls	r1, r3, #4
 80064ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d2:	f1c1 0620 	rsb	r6, r1, #32
 80064d6:	f1a1 0020 	sub.w	r0, r1, #32
 80064da:	fa22 f401 	lsr.w	r4, r2, r1
 80064de:	fa03 f606 	lsl.w	r6, r3, r6
 80064e2:	4334      	orrs	r4, r6
 80064e4:	fa23 f000 	lsr.w	r0, r3, r0
 80064e8:	4304      	orrs	r4, r0
 80064ea:	fa23 f501 	lsr.w	r5, r3, r1
 80064ee:	b2a3      	uxth	r3, r4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4660      	mov	r0, ip
 80064f4:	f000 f85a 	bl	80065ac <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064fc:	f000 f872 	bl	80065e4 <FLASH_WaitForLastOperation>
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006504:	4b0d      	ldr	r3, [pc, #52]	; (800653c <HAL_FLASH_Program+0xdc>)
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	4a0c      	ldr	r2, [pc, #48]	; (800653c <HAL_FLASH_Program+0xdc>)
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8006516:	7dbb      	ldrb	r3, [r7, #22]
 8006518:	3301      	adds	r3, #1
 800651a:	75bb      	strb	r3, [r7, #22]
 800651c:	7dba      	ldrb	r2, [r7, #22]
 800651e:	7d7b      	ldrb	r3, [r7, #21]
 8006520:	429a      	cmp	r2, r3
 8006522:	d3cd      	bcc.n	80064c0 <HAL_FLASH_Program+0x60>
 8006524:	e000      	b.n	8006528 <HAL_FLASH_Program+0xc8>
      {
        break;
 8006526:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_FLASH_Program+0xd8>)
 800652a:	2200      	movs	r2, #0
 800652c:	761a      	strb	r2, [r3, #24]

  return status;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006530:	4618      	mov	r0, r3
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006538:	200036f0 	.word	0x200036f0
 800653c:	40022000 	.word	0x40022000

08006540 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800654a:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <HAL_FLASH_Unlock+0x40>)
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006556:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <HAL_FLASH_Unlock+0x40>)
 8006558:	4a0a      	ldr	r2, [pc, #40]	; (8006584 <HAL_FLASH_Unlock+0x44>)
 800655a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <HAL_FLASH_Unlock+0x40>)
 800655e:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <HAL_FLASH_Unlock+0x48>)
 8006560:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006562:	4b07      	ldr	r3, [pc, #28]	; (8006580 <HAL_FLASH_Unlock+0x40>)
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8006572:	79fb      	ldrb	r3, [r7, #7]
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40022000 	.word	0x40022000
 8006584:	45670123 	.word	0x45670123
 8006588:	cdef89ab 	.word	0xcdef89ab

0800658c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_FLASH_Lock+0x1c>)
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <HAL_FLASH_Lock+0x1c>)
 8006596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40022000 	.word	0x40022000

080065ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80065b8:	4b08      	ldr	r3, [pc, #32]	; (80065dc <FLASH_Program_HalfWord+0x30>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80065be:	4b08      	ldr	r3, [pc, #32]	; (80065e0 <FLASH_Program_HalfWord+0x34>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	4a07      	ldr	r2, [pc, #28]	; (80065e0 <FLASH_Program_HalfWord+0x34>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	887a      	ldrh	r2, [r7, #2]
 80065ce:	801a      	strh	r2, [r3, #0]
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	200036f0 	.word	0x200036f0
 80065e0:	40022000 	.word	0x40022000

080065e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80065ec:	f7fe ff5c 	bl	80054a8 <HAL_GetTick>
 80065f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80065f2:	e010      	b.n	8006616 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d00c      	beq.n	8006616 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <FLASH_WaitForLastOperation+0x2e>
 8006602:	f7fe ff51 	bl	80054a8 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	429a      	cmp	r2, r3
 8006610:	d201      	bcs.n	8006616 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e025      	b.n	8006662 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006616:	4b15      	ldr	r3, [pc, #84]	; (800666c <FLASH_WaitForLastOperation+0x88>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e8      	bne.n	80065f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006622:	4b12      	ldr	r3, [pc, #72]	; (800666c <FLASH_WaitForLastOperation+0x88>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <FLASH_WaitForLastOperation+0x88>)
 8006630:	2220      	movs	r2, #32
 8006632:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006634:	4b0d      	ldr	r3, [pc, #52]	; (800666c <FLASH_WaitForLastOperation+0x88>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <FLASH_WaitForLastOperation+0x88>)
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <FLASH_WaitForLastOperation+0x88>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006658:	f000 f80a 	bl	8006670 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40022000 	.word	0x40022000

08006670 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800667a:	4b23      	ldr	r3, [pc, #140]	; (8006708 <FLASH_SetErrorCode+0x98>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0310 	and.w	r3, r3, #16
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006686:	4b21      	ldr	r3, [pc, #132]	; (800670c <FLASH_SetErrorCode+0x9c>)
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f043 0302 	orr.w	r3, r3, #2
 800668e:	4a1f      	ldr	r2, [pc, #124]	; (800670c <FLASH_SetErrorCode+0x9c>)
 8006690:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f043 0310 	orr.w	r3, r3, #16
 8006698:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800669a:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <FLASH_SetErrorCode+0x98>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d009      	beq.n	80066ba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80066a6:	4b19      	ldr	r3, [pc, #100]	; (800670c <FLASH_SetErrorCode+0x9c>)
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <FLASH_SetErrorCode+0x9c>)
 80066b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f043 0304 	orr.w	r3, r3, #4
 80066b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80066ba:	4b13      	ldr	r3, [pc, #76]	; (8006708 <FLASH_SetErrorCode+0x98>)
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00b      	beq.n	80066de <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80066c6:	4b11      	ldr	r3, [pc, #68]	; (800670c <FLASH_SetErrorCode+0x9c>)
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f043 0304 	orr.w	r3, r3, #4
 80066ce:	4a0f      	ldr	r2, [pc, #60]	; (800670c <FLASH_SetErrorCode+0x9c>)
 80066d0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80066d2:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <FLASH_SetErrorCode+0x98>)
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	4a0c      	ldr	r2, [pc, #48]	; (8006708 <FLASH_SetErrorCode+0x98>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f240 1201 	movw	r2, #257	; 0x101
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d106      	bne.n	80066f6 <FLASH_SetErrorCode+0x86>
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <FLASH_SetErrorCode+0x98>)
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4a06      	ldr	r2, [pc, #24]	; (8006708 <FLASH_SetErrorCode+0x98>)
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	61d3      	str	r3, [r2, #28]
}  
 80066f4:	e002      	b.n	80066fc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80066f6:	4a04      	ldr	r2, [pc, #16]	; (8006708 <FLASH_SetErrorCode+0x98>)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60d3      	str	r3, [r2, #12]
}  
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40022000 	.word	0x40022000
 800670c:	200036f0 	.word	0x200036f0

08006710 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006722:	4b2f      	ldr	r3, [pc, #188]	; (80067e0 <HAL_FLASHEx_Erase+0xd0>)
 8006724:	7e1b      	ldrb	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_FLASHEx_Erase+0x1e>
 800672a:	2302      	movs	r3, #2
 800672c:	e053      	b.n	80067d6 <HAL_FLASHEx_Erase+0xc6>
 800672e:	4b2c      	ldr	r3, [pc, #176]	; (80067e0 <HAL_FLASHEx_Erase+0xd0>)
 8006730:	2201      	movs	r2, #1
 8006732:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d116      	bne.n	800676a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800673c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006740:	f7ff ff50 	bl	80065e4 <FLASH_WaitForLastOperation>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d141      	bne.n	80067ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800674a:	2001      	movs	r0, #1
 800674c:	f000 f84c 	bl	80067e8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006750:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006754:	f7ff ff46 	bl	80065e4 <FLASH_WaitForLastOperation>
 8006758:	4603      	mov	r3, r0
 800675a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800675c:	4b21      	ldr	r3, [pc, #132]	; (80067e4 <HAL_FLASHEx_Erase+0xd4>)
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	4a20      	ldr	r2, [pc, #128]	; (80067e4 <HAL_FLASHEx_Erase+0xd4>)
 8006762:	f023 0304 	bic.w	r3, r3, #4
 8006766:	6113      	str	r3, [r2, #16]
 8006768:	e031      	b.n	80067ce <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800676a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800676e:	f7ff ff39 	bl	80065e4 <FLASH_WaitForLastOperation>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d12a      	bne.n	80067ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f04f 32ff 	mov.w	r2, #4294967295
 800677e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	e019      	b.n	80067bc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006788:	68b8      	ldr	r0, [r7, #8]
 800678a:	f000 f849 	bl	8006820 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800678e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006792:	f7ff ff27 	bl	80065e4 <FLASH_WaitForLastOperation>
 8006796:	4603      	mov	r3, r0
 8006798:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800679a:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <HAL_FLASHEx_Erase+0xd4>)
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	4a11      	ldr	r2, [pc, #68]	; (80067e4 <HAL_FLASHEx_Erase+0xd4>)
 80067a0:	f023 0302 	bic.w	r3, r3, #2
 80067a4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	601a      	str	r2, [r3, #0]
            break;
 80067b2:	e00c      	b.n	80067ce <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ba:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	029a      	lsls	r2, r3, #10
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d3dc      	bcc.n	8006788 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <HAL_FLASHEx_Erase+0xd0>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	761a      	strb	r2, [r3, #24]

  return status;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200036f0 	.word	0x200036f0
 80067e4:	40022000 	.word	0x40022000

080067e8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80067f0:	4b09      	ldr	r3, [pc, #36]	; (8006818 <FLASH_MassErase+0x30>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <FLASH_MassErase+0x34>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	4a08      	ldr	r2, [pc, #32]	; (800681c <FLASH_MassErase+0x34>)
 80067fc:	f043 0304 	orr.w	r3, r3, #4
 8006800:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006802:	4b06      	ldr	r3, [pc, #24]	; (800681c <FLASH_MassErase+0x34>)
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	4a05      	ldr	r2, [pc, #20]	; (800681c <FLASH_MassErase+0x34>)
 8006808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr
 8006818:	200036f0 	.word	0x200036f0
 800681c:	40022000 	.word	0x40022000

08006820 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <FLASH_PageErase+0x38>)
 800682a:	2200      	movs	r2, #0
 800682c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <FLASH_PageErase+0x3c>)
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	4a0a      	ldr	r2, [pc, #40]	; (800685c <FLASH_PageErase+0x3c>)
 8006834:	f043 0302 	orr.w	r3, r3, #2
 8006838:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800683a:	4a08      	ldr	r2, [pc, #32]	; (800685c <FLASH_PageErase+0x3c>)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <FLASH_PageErase+0x3c>)
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	4a05      	ldr	r2, [pc, #20]	; (800685c <FLASH_PageErase+0x3c>)
 8006846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	200036f0 	.word	0x200036f0
 800685c:	40022000 	.word	0x40022000

08006860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006860:	b480      	push	{r7}
 8006862:	b08b      	sub	sp, #44	; 0x2c
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800686a:	2300      	movs	r3, #0
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800686e:	2300      	movs	r3, #0
 8006870:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006872:	e169      	b.n	8006b48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006874:	2201      	movs	r2, #1
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	fa02 f303 	lsl.w	r3, r2, r3
 800687c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	4013      	ands	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	429a      	cmp	r2, r3
 800688e:	f040 8158 	bne.w	8006b42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4a9a      	ldr	r2, [pc, #616]	; (8006b00 <HAL_GPIO_Init+0x2a0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d05e      	beq.n	800695a <HAL_GPIO_Init+0xfa>
 800689c:	4a98      	ldr	r2, [pc, #608]	; (8006b00 <HAL_GPIO_Init+0x2a0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d875      	bhi.n	800698e <HAL_GPIO_Init+0x12e>
 80068a2:	4a98      	ldr	r2, [pc, #608]	; (8006b04 <HAL_GPIO_Init+0x2a4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d058      	beq.n	800695a <HAL_GPIO_Init+0xfa>
 80068a8:	4a96      	ldr	r2, [pc, #600]	; (8006b04 <HAL_GPIO_Init+0x2a4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d86f      	bhi.n	800698e <HAL_GPIO_Init+0x12e>
 80068ae:	4a96      	ldr	r2, [pc, #600]	; (8006b08 <HAL_GPIO_Init+0x2a8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d052      	beq.n	800695a <HAL_GPIO_Init+0xfa>
 80068b4:	4a94      	ldr	r2, [pc, #592]	; (8006b08 <HAL_GPIO_Init+0x2a8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d869      	bhi.n	800698e <HAL_GPIO_Init+0x12e>
 80068ba:	4a94      	ldr	r2, [pc, #592]	; (8006b0c <HAL_GPIO_Init+0x2ac>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d04c      	beq.n	800695a <HAL_GPIO_Init+0xfa>
 80068c0:	4a92      	ldr	r2, [pc, #584]	; (8006b0c <HAL_GPIO_Init+0x2ac>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d863      	bhi.n	800698e <HAL_GPIO_Init+0x12e>
 80068c6:	4a92      	ldr	r2, [pc, #584]	; (8006b10 <HAL_GPIO_Init+0x2b0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d046      	beq.n	800695a <HAL_GPIO_Init+0xfa>
 80068cc:	4a90      	ldr	r2, [pc, #576]	; (8006b10 <HAL_GPIO_Init+0x2b0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d85d      	bhi.n	800698e <HAL_GPIO_Init+0x12e>
 80068d2:	2b12      	cmp	r3, #18
 80068d4:	d82a      	bhi.n	800692c <HAL_GPIO_Init+0xcc>
 80068d6:	2b12      	cmp	r3, #18
 80068d8:	d859      	bhi.n	800698e <HAL_GPIO_Init+0x12e>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_GPIO_Init+0x80>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	0800695b 	.word	0x0800695b
 80068e4:	08006935 	.word	0x08006935
 80068e8:	08006947 	.word	0x08006947
 80068ec:	08006989 	.word	0x08006989
 80068f0:	0800698f 	.word	0x0800698f
 80068f4:	0800698f 	.word	0x0800698f
 80068f8:	0800698f 	.word	0x0800698f
 80068fc:	0800698f 	.word	0x0800698f
 8006900:	0800698f 	.word	0x0800698f
 8006904:	0800698f 	.word	0x0800698f
 8006908:	0800698f 	.word	0x0800698f
 800690c:	0800698f 	.word	0x0800698f
 8006910:	0800698f 	.word	0x0800698f
 8006914:	0800698f 	.word	0x0800698f
 8006918:	0800698f 	.word	0x0800698f
 800691c:	0800698f 	.word	0x0800698f
 8006920:	0800698f 	.word	0x0800698f
 8006924:	0800693d 	.word	0x0800693d
 8006928:	08006951 	.word	0x08006951
 800692c:	4a79      	ldr	r2, [pc, #484]	; (8006b14 <HAL_GPIO_Init+0x2b4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006932:	e02c      	b.n	800698e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	623b      	str	r3, [r7, #32]
          break;
 800693a:	e029      	b.n	8006990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	3304      	adds	r3, #4
 8006942:	623b      	str	r3, [r7, #32]
          break;
 8006944:	e024      	b.n	8006990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	3308      	adds	r3, #8
 800694c:	623b      	str	r3, [r7, #32]
          break;
 800694e:	e01f      	b.n	8006990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	330c      	adds	r3, #12
 8006956:	623b      	str	r3, [r7, #32]
          break;
 8006958:	e01a      	b.n	8006990 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006962:	2304      	movs	r3, #4
 8006964:	623b      	str	r3, [r7, #32]
          break;
 8006966:	e013      	b.n	8006990 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d105      	bne.n	800697c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006970:	2308      	movs	r3, #8
 8006972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	611a      	str	r2, [r3, #16]
          break;
 800697a:	e009      	b.n	8006990 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800697c:	2308      	movs	r3, #8
 800697e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	615a      	str	r2, [r3, #20]
          break;
 8006986:	e003      	b.n	8006990 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006988:	2300      	movs	r3, #0
 800698a:	623b      	str	r3, [r7, #32]
          break;
 800698c:	e000      	b.n	8006990 <HAL_GPIO_Init+0x130>
          break;
 800698e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	2bff      	cmp	r3, #255	; 0xff
 8006994:	d801      	bhi.n	800699a <HAL_GPIO_Init+0x13a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	e001      	b.n	800699e <HAL_GPIO_Init+0x13e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2bff      	cmp	r3, #255	; 0xff
 80069a4:	d802      	bhi.n	80069ac <HAL_GPIO_Init+0x14c>
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	e002      	b.n	80069b2 <HAL_GPIO_Init+0x152>
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	3b08      	subs	r3, #8
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	210f      	movs	r1, #15
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	fa01 f303 	lsl.w	r3, r1, r3
 80069c0:	43db      	mvns	r3, r3
 80069c2:	401a      	ands	r2, r3
 80069c4:	6a39      	ldr	r1, [r7, #32]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	fa01 f303 	lsl.w	r3, r1, r3
 80069cc:	431a      	orrs	r2, r3
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80b1 	beq.w	8006b42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80069e0:	4b4d      	ldr	r3, [pc, #308]	; (8006b18 <HAL_GPIO_Init+0x2b8>)
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	4a4c      	ldr	r2, [pc, #304]	; (8006b18 <HAL_GPIO_Init+0x2b8>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	6193      	str	r3, [r2, #24]
 80069ec:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <HAL_GPIO_Init+0x2b8>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80069f8:	4a48      	ldr	r2, [pc, #288]	; (8006b1c <HAL_GPIO_Init+0x2bc>)
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	3302      	adds	r3, #2
 8006a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	220f      	movs	r2, #15
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	43db      	mvns	r3, r3
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a40      	ldr	r2, [pc, #256]	; (8006b20 <HAL_GPIO_Init+0x2c0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <HAL_GPIO_Init+0x1ec>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a3f      	ldr	r2, [pc, #252]	; (8006b24 <HAL_GPIO_Init+0x2c4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00d      	beq.n	8006a48 <HAL_GPIO_Init+0x1e8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a3e      	ldr	r2, [pc, #248]	; (8006b28 <HAL_GPIO_Init+0x2c8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <HAL_GPIO_Init+0x1e4>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a3d      	ldr	r2, [pc, #244]	; (8006b2c <HAL_GPIO_Init+0x2cc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d101      	bne.n	8006a40 <HAL_GPIO_Init+0x1e0>
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e006      	b.n	8006a4e <HAL_GPIO_Init+0x1ee>
 8006a40:	2304      	movs	r3, #4
 8006a42:	e004      	b.n	8006a4e <HAL_GPIO_Init+0x1ee>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e002      	b.n	8006a4e <HAL_GPIO_Init+0x1ee>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <HAL_GPIO_Init+0x1ee>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a50:	f002 0203 	and.w	r2, r2, #3
 8006a54:	0092      	lsls	r2, r2, #2
 8006a56:	4093      	lsls	r3, r2
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006a5e:	492f      	ldr	r1, [pc, #188]	; (8006b1c <HAL_GPIO_Init+0x2bc>)
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	089b      	lsrs	r3, r3, #2
 8006a64:	3302      	adds	r3, #2
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006a78:	4b2d      	ldr	r3, [pc, #180]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	492c      	ldr	r1, [pc, #176]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]
 8006a84:	e006      	b.n	8006a94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006a86:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	4928      	ldr	r1, [pc, #160]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d006      	beq.n	8006aae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006aa0:	4b23      	ldr	r3, [pc, #140]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	4922      	ldr	r1, [pc, #136]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	604b      	str	r3, [r1, #4]
 8006aac:	e006      	b.n	8006abc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	491e      	ldr	r1, [pc, #120]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006ac8:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	4918      	ldr	r1, [pc, #96]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	608b      	str	r3, [r1, #8]
 8006ad4:	e006      	b.n	8006ae4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006ad6:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	4914      	ldr	r1, [pc, #80]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d021      	beq.n	8006b34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	490e      	ldr	r1, [pc, #56]	; (8006b30 <HAL_GPIO_Init+0x2d0>)
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60cb      	str	r3, [r1, #12]
 8006afc:	e021      	b.n	8006b42 <HAL_GPIO_Init+0x2e2>
 8006afe:	bf00      	nop
 8006b00:	10320000 	.word	0x10320000
 8006b04:	10310000 	.word	0x10310000
 8006b08:	10220000 	.word	0x10220000
 8006b0c:	10210000 	.word	0x10210000
 8006b10:	10120000 	.word	0x10120000
 8006b14:	10110000 	.word	0x10110000
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40010800 	.word	0x40010800
 8006b24:	40010c00 	.word	0x40010c00
 8006b28:	40011000 	.word	0x40011000
 8006b2c:	40011400 	.word	0x40011400
 8006b30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <HAL_GPIO_Init+0x304>)
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	43db      	mvns	r3, r3
 8006b3c:	4909      	ldr	r1, [pc, #36]	; (8006b64 <HAL_GPIO_Init+0x304>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	3301      	adds	r3, #1
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f47f ae8e 	bne.w	8006874 <HAL_GPIO_Init+0x14>
  }
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	372c      	adds	r7, #44	; 0x2c
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr
 8006b64:	40010400 	.word	0x40010400

08006b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e272      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8087 	beq.w	8006c96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b88:	4b92      	ldr	r3, [pc, #584]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 030c 	and.w	r3, r3, #12
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d00c      	beq.n	8006bae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b94:	4b8f      	ldr	r3, [pc, #572]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f003 030c 	and.w	r3, r3, #12
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d112      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x5e>
 8006ba0:	4b8c      	ldr	r3, [pc, #560]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d10b      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bae:	4b89      	ldr	r3, [pc, #548]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d06c      	beq.n	8006c94 <HAL_RCC_OscConfig+0x12c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d168      	bne.n	8006c94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e24c      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bce:	d106      	bne.n	8006bde <HAL_RCC_OscConfig+0x76>
 8006bd0:	4b80      	ldr	r3, [pc, #512]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a7f      	ldr	r2, [pc, #508]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e02e      	b.n	8006c3c <HAL_RCC_OscConfig+0xd4>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x98>
 8006be6:	4b7b      	ldr	r3, [pc, #492]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a7a      	ldr	r2, [pc, #488]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b78      	ldr	r3, [pc, #480]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a77      	ldr	r2, [pc, #476]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e01d      	b.n	8006c3c <HAL_RCC_OscConfig+0xd4>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c08:	d10c      	bne.n	8006c24 <HAL_RCC_OscConfig+0xbc>
 8006c0a:	4b72      	ldr	r3, [pc, #456]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a71      	ldr	r2, [pc, #452]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	4b6f      	ldr	r3, [pc, #444]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a6e      	ldr	r2, [pc, #440]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e00b      	b.n	8006c3c <HAL_RCC_OscConfig+0xd4>
 8006c24:	4b6b      	ldr	r3, [pc, #428]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6a      	ldr	r2, [pc, #424]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	4b68      	ldr	r3, [pc, #416]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a67      	ldr	r2, [pc, #412]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d013      	beq.n	8006c6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c44:	f7fe fc30 	bl	80054a8 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c4c:	f7fe fc2c 	bl	80054a8 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b64      	cmp	r3, #100	; 0x64
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e200      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	4b5d      	ldr	r3, [pc, #372]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f0      	beq.n	8006c4c <HAL_RCC_OscConfig+0xe4>
 8006c6a:	e014      	b.n	8006c96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c6c:	f7fe fc1c 	bl	80054a8 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c74:	f7fe fc18 	bl	80054a8 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b64      	cmp	r3, #100	; 0x64
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e1ec      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	4b53      	ldr	r3, [pc, #332]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x10c>
 8006c92:	e000      	b.n	8006c96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d063      	beq.n	8006d6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ca2:	4b4c      	ldr	r3, [pc, #304]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f003 030c 	and.w	r3, r3, #12
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006cae:	4b49      	ldr	r3, [pc, #292]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f003 030c 	and.w	r3, r3, #12
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d11c      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x18c>
 8006cba:	4b46      	ldr	r3, [pc, #280]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d116      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc6:	4b43      	ldr	r3, [pc, #268]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_RCC_OscConfig+0x176>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d001      	beq.n	8006cde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e1c0      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cde:	4b3d      	ldr	r3, [pc, #244]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	4939      	ldr	r1, [pc, #228]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cf2:	e03a      	b.n	8006d6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d020      	beq.n	8006d3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cfc:	4b36      	ldr	r3, [pc, #216]	; (8006dd8 <HAL_RCC_OscConfig+0x270>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d02:	f7fe fbd1 	bl	80054a8 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d0a:	f7fe fbcd 	bl	80054a8 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e1a1      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1c:	4b2d      	ldr	r3, [pc, #180]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d28:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4927      	ldr	r1, [pc, #156]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	600b      	str	r3, [r1, #0]
 8006d3c:	e015      	b.n	8006d6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d3e:	4b26      	ldr	r3, [pc, #152]	; (8006dd8 <HAL_RCC_OscConfig+0x270>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d44:	f7fe fbb0 	bl	80054a8 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d4c:	f7fe fbac 	bl	80054a8 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e180      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d5e:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f0      	bne.n	8006d4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d03a      	beq.n	8006dec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d019      	beq.n	8006db2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d7e:	4b17      	ldr	r3, [pc, #92]	; (8006ddc <HAL_RCC_OscConfig+0x274>)
 8006d80:	2201      	movs	r2, #1
 8006d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d84:	f7fe fb90 	bl	80054a8 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d8c:	f7fe fb8c 	bl	80054a8 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e160      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <HAL_RCC_OscConfig+0x26c>)
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006daa:	2001      	movs	r0, #1
 8006dac:	f000 fad8 	bl	8007360 <RCC_Delay>
 8006db0:	e01c      	b.n	8006dec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <HAL_RCC_OscConfig+0x274>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db8:	f7fe fb76 	bl	80054a8 <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dbe:	e00f      	b.n	8006de0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dc0:	f7fe fb72 	bl	80054a8 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d908      	bls.n	8006de0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e146      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
 8006dd2:	bf00      	nop
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	42420000 	.word	0x42420000
 8006ddc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006de0:	4b92      	ldr	r3, [pc, #584]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e9      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80a6 	beq.w	8006f46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dfe:	4b8b      	ldr	r3, [pc, #556]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10d      	bne.n	8006e26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e0a:	4b88      	ldr	r3, [pc, #544]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4a87      	ldr	r2, [pc, #540]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e14:	61d3      	str	r3, [r2, #28]
 8006e16:	4b85      	ldr	r3, [pc, #532]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e26:	4b82      	ldr	r3, [pc, #520]	; (8007030 <HAL_RCC_OscConfig+0x4c8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d118      	bne.n	8006e64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e32:	4b7f      	ldr	r3, [pc, #508]	; (8007030 <HAL_RCC_OscConfig+0x4c8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a7e      	ldr	r2, [pc, #504]	; (8007030 <HAL_RCC_OscConfig+0x4c8>)
 8006e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e3e:	f7fe fb33 	bl	80054a8 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e46:	f7fe fb2f 	bl	80054a8 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b64      	cmp	r3, #100	; 0x64
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e103      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e58:	4b75      	ldr	r3, [pc, #468]	; (8007030 <HAL_RCC_OscConfig+0x4c8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0f0      	beq.n	8006e46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCC_OscConfig+0x312>
 8006e6c:	4b6f      	ldr	r3, [pc, #444]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	4a6e      	ldr	r2, [pc, #440]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	6213      	str	r3, [r2, #32]
 8006e78:	e02d      	b.n	8006ed6 <HAL_RCC_OscConfig+0x36e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x334>
 8006e82:	4b6a      	ldr	r3, [pc, #424]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	4a69      	ldr	r2, [pc, #420]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	6213      	str	r3, [r2, #32]
 8006e8e:	4b67      	ldr	r3, [pc, #412]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	4a66      	ldr	r2, [pc, #408]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006e94:	f023 0304 	bic.w	r3, r3, #4
 8006e98:	6213      	str	r3, [r2, #32]
 8006e9a:	e01c      	b.n	8006ed6 <HAL_RCC_OscConfig+0x36e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	2b05      	cmp	r3, #5
 8006ea2:	d10c      	bne.n	8006ebe <HAL_RCC_OscConfig+0x356>
 8006ea4:	4b61      	ldr	r3, [pc, #388]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	4a60      	ldr	r2, [pc, #384]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006eaa:	f043 0304 	orr.w	r3, r3, #4
 8006eae:	6213      	str	r3, [r2, #32]
 8006eb0:	4b5e      	ldr	r3, [pc, #376]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	4a5d      	ldr	r2, [pc, #372]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6213      	str	r3, [r2, #32]
 8006ebc:	e00b      	b.n	8006ed6 <HAL_RCC_OscConfig+0x36e>
 8006ebe:	4b5b      	ldr	r3, [pc, #364]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	4a5a      	ldr	r2, [pc, #360]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	6213      	str	r3, [r2, #32]
 8006eca:	4b58      	ldr	r3, [pc, #352]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	4a57      	ldr	r2, [pc, #348]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006ed0:	f023 0304 	bic.w	r3, r3, #4
 8006ed4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d015      	beq.n	8006f0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ede:	f7fe fae3 	bl	80054a8 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ee6:	f7fe fadf 	bl	80054a8 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e0b1      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006efc:	4b4b      	ldr	r3, [pc, #300]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0ee      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x37e>
 8006f08:	e014      	b.n	8006f34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f0a:	f7fe facd 	bl	80054a8 <HAL_GetTick>
 8006f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f10:	e00a      	b.n	8006f28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f12:	f7fe fac9 	bl	80054a8 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e09b      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f28:	4b40      	ldr	r3, [pc, #256]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1ee      	bne.n	8006f12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d105      	bne.n	8006f46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f3a:	4b3c      	ldr	r3, [pc, #240]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	4a3b      	ldr	r2, [pc, #236]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8087 	beq.w	800705e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f50:	4b36      	ldr	r3, [pc, #216]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 030c 	and.w	r3, r3, #12
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d061      	beq.n	8007020 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d146      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f64:	4b33      	ldr	r3, [pc, #204]	; (8007034 <HAL_RCC_OscConfig+0x4cc>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f6a:	f7fe fa9d 	bl	80054a8 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f70:	e008      	b.n	8006f84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f72:	f7fe fa99 	bl	80054a8 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e06d      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f84:	4b29      	ldr	r3, [pc, #164]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f0      	bne.n	8006f72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f98:	d108      	bne.n	8006fac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f9a:	4b24      	ldr	r3, [pc, #144]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	4921      	ldr	r1, [pc, #132]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fac:	4b1f      	ldr	r3, [pc, #124]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a19      	ldr	r1, [r3, #32]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	491b      	ldr	r1, [pc, #108]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fc4:	4b1b      	ldr	r3, [pc, #108]	; (8007034 <HAL_RCC_OscConfig+0x4cc>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fca:	f7fe fa6d 	bl	80054a8 <HAL_GetTick>
 8006fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd2:	f7fe fa69 	bl	80054a8 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e03d      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fe4:	4b11      	ldr	r3, [pc, #68]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0f0      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x46a>
 8006ff0:	e035      	b.n	800705e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ff2:	4b10      	ldr	r3, [pc, #64]	; (8007034 <HAL_RCC_OscConfig+0x4cc>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff8:	f7fe fa56 	bl	80054a8 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007000:	f7fe fa52 	bl	80054a8 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e026      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <HAL_RCC_OscConfig+0x4c4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f0      	bne.n	8007000 <HAL_RCC_OscConfig+0x498>
 800701e:	e01e      	b.n	800705e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d107      	bne.n	8007038 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e019      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
 800702c:	40021000 	.word	0x40021000
 8007030:	40007000 	.word	0x40007000
 8007034:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <HAL_RCC_OscConfig+0x500>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	429a      	cmp	r2, r3
 800704a:	d106      	bne.n	800705a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007056:	429a      	cmp	r2, r3
 8007058:	d001      	beq.n	800705e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40021000 	.word	0x40021000

0800706c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e0d0      	b.n	8007222 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007080:	4b6a      	ldr	r3, [pc, #424]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d910      	bls.n	80070b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708e:	4b67      	ldr	r3, [pc, #412]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 0207 	bic.w	r2, r3, #7
 8007096:	4965      	ldr	r1, [pc, #404]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4313      	orrs	r3, r2
 800709c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800709e:	4b63      	ldr	r3, [pc, #396]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e0b8      	b.n	8007222 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d020      	beq.n	80070fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070c8:	4b59      	ldr	r3, [pc, #356]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4a58      	ldr	r2, [pc, #352]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80070ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070e0:	4b53      	ldr	r3, [pc, #332]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4a52      	ldr	r2, [pc, #328]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80070e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80070ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ec:	4b50      	ldr	r3, [pc, #320]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	494d      	ldr	r1, [pc, #308]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d040      	beq.n	800718c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d107      	bne.n	8007122 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007112:	4b47      	ldr	r3, [pc, #284]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d115      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e07f      	b.n	8007222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d107      	bne.n	800713a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712a:	4b41      	ldr	r3, [pc, #260]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e073      	b.n	8007222 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800713a:	4b3d      	ldr	r3, [pc, #244]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e06b      	b.n	8007222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800714a:	4b39      	ldr	r3, [pc, #228]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f023 0203 	bic.w	r2, r3, #3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4936      	ldr	r1, [pc, #216]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 8007158:	4313      	orrs	r3, r2
 800715a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800715c:	f7fe f9a4 	bl	80054a8 <HAL_GetTick>
 8007160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007162:	e00a      	b.n	800717a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007164:	f7fe f9a0 	bl	80054a8 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007172:	4293      	cmp	r3, r2
 8007174:	d901      	bls.n	800717a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e053      	b.n	8007222 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800717a:	4b2d      	ldr	r3, [pc, #180]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f003 020c 	and.w	r2, r3, #12
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	429a      	cmp	r2, r3
 800718a:	d1eb      	bne.n	8007164 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800718c:	4b27      	ldr	r3, [pc, #156]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d210      	bcs.n	80071bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719a:	4b24      	ldr	r3, [pc, #144]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f023 0207 	bic.w	r2, r3, #7
 80071a2:	4922      	ldr	r1, [pc, #136]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071aa:	4b20      	ldr	r3, [pc, #128]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d001      	beq.n	80071bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e032      	b.n	8007222 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d008      	beq.n	80071da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071c8:	4b19      	ldr	r3, [pc, #100]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4916      	ldr	r1, [pc, #88]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071e6:	4b12      	ldr	r3, [pc, #72]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	490e      	ldr	r1, [pc, #56]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071fa:	f000 f821 	bl	8007240 <HAL_RCC_GetSysClockFreq>
 80071fe:	4602      	mov	r2, r0
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	091b      	lsrs	r3, r3, #4
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	490a      	ldr	r1, [pc, #40]	; (8007234 <HAL_RCC_ClockConfig+0x1c8>)
 800720c:	5ccb      	ldrb	r3, [r1, r3]
 800720e:	fa22 f303 	lsr.w	r3, r2, r3
 8007212:	4a09      	ldr	r2, [pc, #36]	; (8007238 <HAL_RCC_ClockConfig+0x1cc>)
 8007214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <HAL_RCC_ClockConfig+0x1d0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe f902 	bl	8005424 <HAL_InitTick>

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	40022000 	.word	0x40022000
 8007230:	40021000 	.word	0x40021000
 8007234:	0800ac20 	.word	0x0800ac20
 8007238:	200000f0 	.word	0x200000f0
 800723c:	200000f4 	.word	0x200000f4

08007240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007240:	b490      	push	{r4, r7}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007246:	4b29      	ldr	r3, [pc, #164]	; (80072ec <HAL_RCC_GetSysClockFreq+0xac>)
 8007248:	1d3c      	adds	r4, r7, #4
 800724a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800724c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007250:	f240 2301 	movw	r3, #513	; 0x201
 8007254:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	2300      	movs	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	2300      	movs	r3, #0
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800726a:	4b21      	ldr	r3, [pc, #132]	; (80072f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f003 030c 	and.w	r3, r3, #12
 8007276:	2b04      	cmp	r3, #4
 8007278:	d002      	beq.n	8007280 <HAL_RCC_GetSysClockFreq+0x40>
 800727a:	2b08      	cmp	r3, #8
 800727c:	d003      	beq.n	8007286 <HAL_RCC_GetSysClockFreq+0x46>
 800727e:	e02b      	b.n	80072d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007280:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007282:	623b      	str	r3, [r7, #32]
      break;
 8007284:	e02b      	b.n	80072de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	0c9b      	lsrs	r3, r3, #18
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	3328      	adds	r3, #40	; 0x28
 8007290:	443b      	add	r3, r7
 8007292:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007296:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d012      	beq.n	80072c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072a2:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	0c5b      	lsrs	r3, r3, #17
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	3328      	adds	r3, #40	; 0x28
 80072ae:	443b      	add	r3, r7
 80072b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80072b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	4a0e      	ldr	r2, [pc, #56]	; (80072f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80072ba:	fb03 f202 	mul.w	r2, r3, r2
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c4:	627b      	str	r3, [r7, #36]	; 0x24
 80072c6:	e004      	b.n	80072d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	4a0b      	ldr	r2, [pc, #44]	; (80072f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	623b      	str	r3, [r7, #32]
      break;
 80072d6:	e002      	b.n	80072de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072d8:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80072da:	623b      	str	r3, [r7, #32]
      break;
 80072dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072de:	6a3b      	ldr	r3, [r7, #32]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3728      	adds	r7, #40	; 0x28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc90      	pop	{r4, r7}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	0800ac10 	.word	0x0800ac10
 80072f0:	40021000 	.word	0x40021000
 80072f4:	007a1200 	.word	0x007a1200
 80072f8:	003d0900 	.word	0x003d0900

080072fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007300:	4b02      	ldr	r3, [pc, #8]	; (800730c <HAL_RCC_GetHCLKFreq+0x10>)
 8007302:	681b      	ldr	r3, [r3, #0]
}
 8007304:	4618      	mov	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr
 800730c:	200000f0 	.word	0x200000f0

08007310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007314:	f7ff fff2 	bl	80072fc <HAL_RCC_GetHCLKFreq>
 8007318:	4602      	mov	r2, r0
 800731a:	4b05      	ldr	r3, [pc, #20]	; (8007330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	4903      	ldr	r1, [pc, #12]	; (8007334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007326:	5ccb      	ldrb	r3, [r1, r3]
 8007328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800732c:	4618      	mov	r0, r3
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40021000 	.word	0x40021000
 8007334:	0800ac30 	.word	0x0800ac30

08007338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800733c:	f7ff ffde 	bl	80072fc <HAL_RCC_GetHCLKFreq>
 8007340:	4602      	mov	r2, r0
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	0adb      	lsrs	r3, r3, #11
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	4903      	ldr	r1, [pc, #12]	; (800735c <HAL_RCC_GetPCLK2Freq+0x24>)
 800734e:	5ccb      	ldrb	r3, [r1, r3]
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007354:	4618      	mov	r0, r3
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40021000 	.word	0x40021000
 800735c:	0800ac30 	.word	0x0800ac30

08007360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <RCC_Delay+0x34>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a0a      	ldr	r2, [pc, #40]	; (8007398 <RCC_Delay+0x38>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	0a5b      	lsrs	r3, r3, #9
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800737c:	bf00      	nop
  }
  while (Delay --);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1e5a      	subs	r2, r3, #1
 8007382:	60fa      	str	r2, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1f9      	bne.n	800737c <RCC_Delay+0x1c>
}
 8007388:	bf00      	nop
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr
 8007394:	200000f0 	.word	0x200000f0
 8007398:	10624dd3 	.word	0x10624dd3

0800739c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d07d      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80073b8:	2300      	movs	r3, #0
 80073ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073bc:	4b4f      	ldr	r3, [pc, #316]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10d      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073c8:	4b4c      	ldr	r3, [pc, #304]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	4a4b      	ldr	r2, [pc, #300]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d2:	61d3      	str	r3, [r2, #28]
 80073d4:	4b49      	ldr	r3, [pc, #292]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073e0:	2301      	movs	r3, #1
 80073e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e4:	4b46      	ldr	r3, [pc, #280]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d118      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073f0:	4b43      	ldr	r3, [pc, #268]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a42      	ldr	r2, [pc, #264]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073fc:	f7fe f854 	bl	80054a8 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007402:	e008      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007404:	f7fe f850 	bl	80054a8 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b64      	cmp	r3, #100	; 0x64
 8007410:	d901      	bls.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e06d      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007416:	4b3a      	ldr	r3, [pc, #232]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0f0      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007422:	4b36      	ldr	r3, [pc, #216]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800742a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d02e      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d027      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007440:	4b2e      	ldr	r3, [pc, #184]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007448:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800744a:	4b2e      	ldr	r3, [pc, #184]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800744c:	2201      	movs	r2, #1
 800744e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007450:	4b2c      	ldr	r3, [pc, #176]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007456:	4a29      	ldr	r2, [pc, #164]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d014      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007466:	f7fe f81f 	bl	80054a8 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800746c:	e00a      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746e:	f7fe f81b 	bl	80054a8 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	f241 3288 	movw	r2, #5000	; 0x1388
 800747c:	4293      	cmp	r3, r2
 800747e:	d901      	bls.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e036      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007484:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0ee      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007490:	4b1a      	ldr	r3, [pc, #104]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	4917      	ldr	r1, [pc, #92]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d105      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a8:	4b14      	ldr	r3, [pc, #80]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	4a13      	ldr	r2, [pc, #76]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074c0:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	490b      	ldr	r1, [pc, #44]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d008      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074de:	4b07      	ldr	r3, [pc, #28]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	4904      	ldr	r1, [pc, #16]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	40021000 	.word	0x40021000
 8007500:	40007000 	.word	0x40007000
 8007504:	42420440 	.word	0x42420440

08007508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e041      	b.n	800759e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fd fd54 	bl	8004fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3304      	adds	r3, #4
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f000 fd86 	bl	8008058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d001      	beq.n	80075c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e032      	b.n	8007626 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a18      	ldr	r2, [pc, #96]	; (8007630 <HAL_TIM_Base_Start+0x88>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00e      	beq.n	80075f0 <HAL_TIM_Base_Start+0x48>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075da:	d009      	beq.n	80075f0 <HAL_TIM_Base_Start+0x48>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a14      	ldr	r2, [pc, #80]	; (8007634 <HAL_TIM_Base_Start+0x8c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <HAL_TIM_Base_Start+0x48>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a13      	ldr	r2, [pc, #76]	; (8007638 <HAL_TIM_Base_Start+0x90>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d111      	bne.n	8007614 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b06      	cmp	r3, #6
 8007600:	d010      	beq.n	8007624 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0201 	orr.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007612:	e007      	b.n	8007624 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0201 	orr.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr
 8007630:	40012c00 	.word	0x40012c00
 8007634:	40000400 	.word	0x40000400
 8007638:	40000800 	.word	0x40000800

0800763c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e041      	b.n	80076d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7fd fc70 	bl	8004f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	4619      	mov	r1, r3
 800767a:	4610      	mov	r0, r2
 800767c:	f000 fcec 	bl	8008058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d109      	bne.n	8007704 <HAL_TIM_PWM_Start_DMA+0x28>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	bf0c      	ite	eq
 80076fc:	2301      	moveq	r3, #1
 80076fe:	2300      	movne	r3, #0
 8007700:	b2db      	uxtb	r3, r3
 8007702:	e022      	b.n	800774a <HAL_TIM_PWM_Start_DMA+0x6e>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b04      	cmp	r3, #4
 8007708:	d109      	bne.n	800771e <HAL_TIM_PWM_Start_DMA+0x42>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	bf0c      	ite	eq
 8007716:	2301      	moveq	r3, #1
 8007718:	2300      	movne	r3, #0
 800771a:	b2db      	uxtb	r3, r3
 800771c:	e015      	b.n	800774a <HAL_TIM_PWM_Start_DMA+0x6e>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b08      	cmp	r3, #8
 8007722:	d109      	bne.n	8007738 <HAL_TIM_PWM_Start_DMA+0x5c>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	bf0c      	ite	eq
 8007730:	2301      	moveq	r3, #1
 8007732:	2300      	movne	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	e008      	b.n	800774a <HAL_TIM_PWM_Start_DMA+0x6e>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	bf0c      	ite	eq
 8007744:	2301      	moveq	r3, #1
 8007746:	2300      	movne	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800774e:	2302      	movs	r3, #2
 8007750:	e14e      	b.n	80079f0 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <HAL_TIM_PWM_Start_DMA+0x90>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	bf0c      	ite	eq
 8007764:	2301      	moveq	r3, #1
 8007766:	2300      	movne	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	e022      	b.n	80077b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b04      	cmp	r3, #4
 8007770:	d109      	bne.n	8007786 <HAL_TIM_PWM_Start_DMA+0xaa>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	bf0c      	ite	eq
 800777e:	2301      	moveq	r3, #1
 8007780:	2300      	movne	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	e015      	b.n	80077b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b08      	cmp	r3, #8
 800778a:	d109      	bne.n	80077a0 <HAL_TIM_PWM_Start_DMA+0xc4>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	e008      	b.n	80077b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	bf0c      	ite	eq
 80077ac:	2301      	moveq	r3, #1
 80077ae:	2300      	movne	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d024      	beq.n	8007800 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <HAL_TIM_PWM_Start_DMA+0xea>
 80077bc:	887b      	ldrh	r3, [r7, #2]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e114      	b.n	80079f0 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <HAL_TIM_PWM_Start_DMA+0xfa>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077d4:	e016      	b.n	8007804 <HAL_TIM_PWM_Start_DMA+0x128>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_PWM_Start_DMA+0x10a>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077e4:	e00e      	b.n	8007804 <HAL_TIM_PWM_Start_DMA+0x128>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_PWM_Start_DMA+0x11a>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077f4:	e006      	b.n	8007804 <HAL_TIM_PWM_Start_DMA+0x128>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2202      	movs	r2, #2
 80077fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077fe:	e001      	b.n	8007804 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0f5      	b.n	80079f0 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b0c      	cmp	r3, #12
 8007808:	f200 80ae 	bhi.w	8007968 <HAL_TIM_PWM_Start_DMA+0x28c>
 800780c:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <HAL_TIM_PWM_Start_DMA+0x138>)
 800780e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007812:	bf00      	nop
 8007814:	08007849 	.word	0x08007849
 8007818:	08007969 	.word	0x08007969
 800781c:	08007969 	.word	0x08007969
 8007820:	08007969 	.word	0x08007969
 8007824:	08007891 	.word	0x08007891
 8007828:	08007969 	.word	0x08007969
 800782c:	08007969 	.word	0x08007969
 8007830:	08007969 	.word	0x08007969
 8007834:	080078d9 	.word	0x080078d9
 8007838:	08007969 	.word	0x08007969
 800783c:	08007969 	.word	0x08007969
 8007840:	08007969 	.word	0x08007969
 8007844:	08007921 	.word	0x08007921
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	4a6a      	ldr	r2, [pc, #424]	; (80079f8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800784e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	4a69      	ldr	r2, [pc, #420]	; (80079fc <HAL_TIM_PWM_Start_DMA+0x320>)
 8007856:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	4a68      	ldr	r2, [pc, #416]	; (8007a00 <HAL_TIM_PWM_Start_DMA+0x324>)
 800785e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3334      	adds	r3, #52	; 0x34
 800786c:	461a      	mov	r2, r3
 800786e:	887b      	ldrh	r3, [r7, #2]
 8007870:	f7fe fbb2 	bl	8005fd8 <HAL_DMA_Start_IT>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e0b8      	b.n	80079f0 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800788c:	60da      	str	r2, [r3, #12]
      break;
 800788e:	e06c      	b.n	800796a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007894:	4a58      	ldr	r2, [pc, #352]	; (80079f8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8007896:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	4a57      	ldr	r2, [pc, #348]	; (80079fc <HAL_TIM_PWM_Start_DMA+0x320>)
 800789e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	4a56      	ldr	r2, [pc, #344]	; (8007a00 <HAL_TIM_PWM_Start_DMA+0x324>)
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3338      	adds	r3, #56	; 0x38
 80078b4:	461a      	mov	r2, r3
 80078b6:	887b      	ldrh	r3, [r7, #2]
 80078b8:	f7fe fb8e 	bl	8005fd8 <HAL_DMA_Start_IT>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e094      	b.n	80079f0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d4:	60da      	str	r2, [r3, #12]
      break;
 80078d6:	e048      	b.n	800796a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	4a46      	ldr	r2, [pc, #280]	; (80079f8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80078de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	4a45      	ldr	r2, [pc, #276]	; (80079fc <HAL_TIM_PWM_Start_DMA+0x320>)
 80078e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	4a44      	ldr	r2, [pc, #272]	; (8007a00 <HAL_TIM_PWM_Start_DMA+0x324>)
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	333c      	adds	r3, #60	; 0x3c
 80078fc:	461a      	mov	r2, r3
 80078fe:	887b      	ldrh	r3, [r7, #2]
 8007900:	f7fe fb6a 	bl	8005fd8 <HAL_DMA_Start_IT>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e070      	b.n	80079f0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800791c:	60da      	str	r2, [r3, #12]
      break;
 800791e:	e024      	b.n	800796a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	4a34      	ldr	r2, [pc, #208]	; (80079f8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8007926:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	4a33      	ldr	r2, [pc, #204]	; (80079fc <HAL_TIM_PWM_Start_DMA+0x320>)
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	4a32      	ldr	r2, [pc, #200]	; (8007a00 <HAL_TIM_PWM_Start_DMA+0x324>)
 8007936:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3340      	adds	r3, #64	; 0x40
 8007944:	461a      	mov	r2, r3
 8007946:	887b      	ldrh	r3, [r7, #2]
 8007948:	f7fe fb46 	bl	8005fd8 <HAL_DMA_Start_IT>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e04c      	b.n	80079f0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007964:	60da      	str	r2, [r3, #12]
      break;
 8007966:	e000      	b.n	800796a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8007968:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2201      	movs	r2, #1
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fdf0 	bl	8008558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a21      	ldr	r2, [pc, #132]	; (8007a04 <HAL_TIM_PWM_Start_DMA+0x328>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d107      	bne.n	8007992 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <HAL_TIM_PWM_Start_DMA+0x328>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00e      	beq.n	80079ba <HAL_TIM_PWM_Start_DMA+0x2de>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a4:	d009      	beq.n	80079ba <HAL_TIM_PWM_Start_DMA+0x2de>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a17      	ldr	r2, [pc, #92]	; (8007a08 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d004      	beq.n	80079ba <HAL_TIM_PWM_Start_DMA+0x2de>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <HAL_TIM_PWM_Start_DMA+0x330>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d111      	bne.n	80079de <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 0307 	and.w	r3, r3, #7
 80079c4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b06      	cmp	r3, #6
 80079ca:	d010      	beq.n	80079ee <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079dc:	e007      	b.n	80079ee <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0201 	orr.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	08007f47 	.word	0x08007f47
 80079fc:	08007fef 	.word	0x08007fef
 8007a00:	08007eb5 	.word	0x08007eb5
 8007a04:	40012c00 	.word	0x40012c00
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800

08007a10 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b0c      	cmp	r3, #12
 8007a1e:	d855      	bhi.n	8007acc <HAL_TIM_PWM_Stop_DMA+0xbc>
 8007a20:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a5d 	.word	0x08007a5d
 8007a2c:	08007acd 	.word	0x08007acd
 8007a30:	08007acd 	.word	0x08007acd
 8007a34:	08007acd 	.word	0x08007acd
 8007a38:	08007a79 	.word	0x08007a79
 8007a3c:	08007acd 	.word	0x08007acd
 8007a40:	08007acd 	.word	0x08007acd
 8007a44:	08007acd 	.word	0x08007acd
 8007a48:	08007a95 	.word	0x08007a95
 8007a4c:	08007acd 	.word	0x08007acd
 8007a50:	08007acd 	.word	0x08007acd
 8007a54:	08007acd 	.word	0x08007acd
 8007a58:	08007ab1 	.word	0x08007ab1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fb4b 	bl	800610c <HAL_DMA_Abort_IT>
      break;
 8007a76:	e02a      	b.n	8007ace <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fb3d 	bl	800610c <HAL_DMA_Abort_IT>
      break;
 8007a92:	e01c      	b.n	8007ace <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aa2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fe fb2f 	bl	800610c <HAL_DMA_Abort_IT>
      break;
 8007aae:	e00e      	b.n	8007ace <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007abe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe fb21 	bl	800610c <HAL_DMA_Abort_IT>
      break;
 8007aca:	e000      	b.n	8007ace <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8007acc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 fd3e 	bl	8008558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a29      	ldr	r2, [pc, #164]	; (8007b88 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d117      	bne.n	8007b16 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6a1a      	ldr	r2, [r3, #32]
 8007aec:	f241 1311 	movw	r3, #4369	; 0x1111
 8007af0:	4013      	ands	r3, r2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10f      	bne.n	8007b16 <HAL_TIM_PWM_Stop_DMA+0x106>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a1a      	ldr	r2, [r3, #32]
 8007afc:	f240 4344 	movw	r3, #1092	; 0x444
 8007b00:	4013      	ands	r3, r2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d107      	bne.n	8007b16 <HAL_TIM_PWM_Stop_DMA+0x106>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6a1a      	ldr	r2, [r3, #32]
 8007b1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b20:	4013      	ands	r3, r2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10f      	bne.n	8007b46 <HAL_TIM_PWM_Stop_DMA+0x136>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6a1a      	ldr	r2, [r3, #32]
 8007b2c:	f240 4344 	movw	r3, #1092	; 0x444
 8007b30:	4013      	ands	r3, r2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d107      	bne.n	8007b46 <HAL_TIM_PWM_Stop_DMA+0x136>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <HAL_TIM_PWM_Stop_DMA+0x146>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b54:	e013      	b.n	8007b7e <HAL_TIM_PWM_Stop_DMA+0x16e>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_PWM_Stop_DMA+0x156>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b64:	e00b      	b.n	8007b7e <HAL_TIM_PWM_Stop_DMA+0x16e>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIM_PWM_Stop_DMA+0x166>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b74:	e003      	b.n	8007b7e <HAL_TIM_PWM_Stop_DMA+0x16e>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40012c00 	.word	0x40012c00

08007b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e0ac      	b.n	8007d00 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b0c      	cmp	r3, #12
 8007bb2:	f200 809f 	bhi.w	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bf1 	.word	0x08007bf1
 8007bc0:	08007cf5 	.word	0x08007cf5
 8007bc4:	08007cf5 	.word	0x08007cf5
 8007bc8:	08007cf5 	.word	0x08007cf5
 8007bcc:	08007c31 	.word	0x08007c31
 8007bd0:	08007cf5 	.word	0x08007cf5
 8007bd4:	08007cf5 	.word	0x08007cf5
 8007bd8:	08007cf5 	.word	0x08007cf5
 8007bdc:	08007c73 	.word	0x08007c73
 8007be0:	08007cf5 	.word	0x08007cf5
 8007be4:	08007cf5 	.word	0x08007cf5
 8007be8:	08007cf5 	.word	0x08007cf5
 8007bec:	08007cb3 	.word	0x08007cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fa90 	bl	800811c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0208 	orr.w	r2, r2, #8
 8007c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0204 	bic.w	r2, r2, #4
 8007c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6999      	ldr	r1, [r3, #24]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	691a      	ldr	r2, [r3, #16]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	619a      	str	r2, [r3, #24]
      break;
 8007c2e:	e062      	b.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fad6 	bl	80081e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6999      	ldr	r1, [r3, #24]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	021a      	lsls	r2, r3, #8
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	619a      	str	r2, [r3, #24]
      break;
 8007c70:	e041      	b.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fb1f 	bl	80082bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0208 	orr.w	r2, r2, #8
 8007c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0204 	bic.w	r2, r2, #4
 8007c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69d9      	ldr	r1, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	61da      	str	r2, [r3, #28]
      break;
 8007cb0:	e021      	b.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 fb69 	bl	8008390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69da      	ldr	r2, [r3, #28]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69d9      	ldr	r1, [r3, #28]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	021a      	lsls	r2, r3, #8
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	61da      	str	r2, [r3, #28]
      break;
 8007cf2:	e000      	b.n	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_TIM_ConfigClockSource+0x18>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e0b3      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x180>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d58:	d03e      	beq.n	8007dd8 <HAL_TIM_ConfigClockSource+0xd0>
 8007d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5e:	f200 8087 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x168>
 8007d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d66:	f000 8085 	beq.w	8007e74 <HAL_TIM_ConfigClockSource+0x16c>
 8007d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6e:	d87f      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x168>
 8007d70:	2b70      	cmp	r3, #112	; 0x70
 8007d72:	d01a      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0xa2>
 8007d74:	2b70      	cmp	r3, #112	; 0x70
 8007d76:	d87b      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x168>
 8007d78:	2b60      	cmp	r3, #96	; 0x60
 8007d7a:	d050      	beq.n	8007e1e <HAL_TIM_ConfigClockSource+0x116>
 8007d7c:	2b60      	cmp	r3, #96	; 0x60
 8007d7e:	d877      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x168>
 8007d80:	2b50      	cmp	r3, #80	; 0x50
 8007d82:	d03c      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0xf6>
 8007d84:	2b50      	cmp	r3, #80	; 0x50
 8007d86:	d873      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x168>
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d058      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x136>
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d86f      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x168>
 8007d90:	2b30      	cmp	r3, #48	; 0x30
 8007d92:	d064      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x156>
 8007d94:	2b30      	cmp	r3, #48	; 0x30
 8007d96:	d86b      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x168>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d060      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x156>
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d867      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x168>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d05c      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x156>
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d05a      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007da8:	e062      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	6899      	ldr	r1, [r3, #8]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f000 fbae 	bl	800851a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	609a      	str	r2, [r3, #8]
      break;
 8007dd6:	e04e      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6899      	ldr	r1, [r3, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f000 fb97 	bl	800851a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dfa:	609a      	str	r2, [r3, #8]
      break;
 8007dfc:	e03b      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6859      	ldr	r1, [r3, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f000 fb0e 	bl	800842c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2150      	movs	r1, #80	; 0x50
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fb65 	bl	80084e6 <TIM_ITRx_SetConfig>
      break;
 8007e1c:	e02b      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6859      	ldr	r1, [r3, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f000 fb2c 	bl	8008488 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2160      	movs	r1, #96	; 0x60
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fb55 	bl	80084e6 <TIM_ITRx_SetConfig>
      break;
 8007e3c:	e01b      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f000 faee 	bl	800842c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2140      	movs	r1, #64	; 0x40
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fb45 	bl	80084e6 <TIM_ITRx_SetConfig>
      break;
 8007e5c:	e00b      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f000 fb3c 	bl	80084e6 <TIM_ITRx_SetConfig>
        break;
 8007e6e:	e002      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e70:	bf00      	nop
 8007e72:	e000      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bc80      	pop	{r7}
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bc80      	pop	{r7}
 8007eb2:	4770      	bx	lr

08007eb4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d107      	bne.n	8007edc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eda:	e02a      	b.n	8007f32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d107      	bne.n	8007ef6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ef4:	e01d      	b.n	8007f32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d107      	bne.n	8007f10 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2204      	movs	r2, #4
 8007f04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f0e:	e010      	b.n	8007f32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d107      	bne.n	8007f2a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f28:	e003      	b.n	8007f32 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff ffb5 	bl	8007ea2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	771a      	strb	r2, [r3, #28]
}
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d10b      	bne.n	8007f76 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d136      	bne.n	8007fda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f74:	e031      	b.n	8007fda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d10b      	bne.n	8007f98 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2202      	movs	r2, #2
 8007f84:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d125      	bne.n	8007fda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f96:	e020      	b.n	8007fda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d10b      	bne.n	8007fba <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2204      	movs	r2, #4
 8007fa6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d114      	bne.n	8007fda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fb8:	e00f      	b.n	8007fda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d10a      	bne.n	8007fda <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2208      	movs	r2, #8
 8007fc8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d103      	bne.n	8007fda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7fa fc0e 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	771a      	strb	r2, [r3, #28]
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d103      	bne.n	800800e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	771a      	strb	r2, [r3, #28]
 800800c:	e019      	b.n	8008042 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d103      	bne.n	8008020 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2202      	movs	r2, #2
 800801c:	771a      	strb	r2, [r3, #28]
 800801e:	e010      	b.n	8008042 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d103      	bne.n	8008032 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2204      	movs	r2, #4
 800802e:	771a      	strb	r2, [r3, #28]
 8008030:	e007      	b.n	8008042 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	d102      	bne.n	8008042 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2208      	movs	r2, #8
 8008040:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff ff24 	bl	8007e90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	771a      	strb	r2, [r3, #28]
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a29      	ldr	r2, [pc, #164]	; (8008110 <TIM_Base_SetConfig+0xb8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00b      	beq.n	8008088 <TIM_Base_SetConfig+0x30>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008076:	d007      	beq.n	8008088 <TIM_Base_SetConfig+0x30>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a26      	ldr	r2, [pc, #152]	; (8008114 <TIM_Base_SetConfig+0xbc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_Base_SetConfig+0x30>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a25      	ldr	r2, [pc, #148]	; (8008118 <TIM_Base_SetConfig+0xc0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d108      	bne.n	800809a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a1c      	ldr	r2, [pc, #112]	; (8008110 <TIM_Base_SetConfig+0xb8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00b      	beq.n	80080ba <TIM_Base_SetConfig+0x62>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a8:	d007      	beq.n	80080ba <TIM_Base_SetConfig+0x62>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a19      	ldr	r2, [pc, #100]	; (8008114 <TIM_Base_SetConfig+0xbc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_Base_SetConfig+0x62>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a18      	ldr	r2, [pc, #96]	; (8008118 <TIM_Base_SetConfig+0xc0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d108      	bne.n	80080cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a07      	ldr	r2, [pc, #28]	; (8008110 <TIM_Base_SetConfig+0xb8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d103      	bne.n	8008100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	691a      	ldr	r2, [r3, #16]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	615a      	str	r2, [r3, #20]
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr
 8008110:	40012c00 	.word	0x40012c00
 8008114:	40000400 	.word	0x40000400
 8008118:	40000800 	.word	0x40000800

0800811c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	f023 0201 	bic.w	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f023 0302 	bic.w	r3, r3, #2
 8008164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a1c      	ldr	r2, [pc, #112]	; (80081e4 <TIM_OC1_SetConfig+0xc8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d10c      	bne.n	8008192 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f023 0308 	bic.w	r3, r3, #8
 800817e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 0304 	bic.w	r3, r3, #4
 8008190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a13      	ldr	r2, [pc, #76]	; (80081e4 <TIM_OC1_SetConfig+0xc8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d111      	bne.n	80081be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	621a      	str	r2, [r3, #32]
}
 80081d8:	bf00      	nop
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40012c00 	.word	0x40012c00

080081e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	f023 0210 	bic.w	r2, r3, #16
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800821e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f023 0320 	bic.w	r3, r3, #32
 8008232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	4313      	orrs	r3, r2
 800823e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a1d      	ldr	r2, [pc, #116]	; (80082b8 <TIM_OC2_SetConfig+0xd0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d10d      	bne.n	8008264 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a14      	ldr	r2, [pc, #80]	; (80082b8 <TIM_OC2_SetConfig+0xd0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d113      	bne.n	8008294 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800827a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	621a      	str	r2, [r3, #32]
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr
 80082b8:	40012c00 	.word	0x40012c00

080082bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	021b      	lsls	r3, r3, #8
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1d      	ldr	r2, [pc, #116]	; (800838c <TIM_OC3_SetConfig+0xd0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d10d      	bne.n	8008336 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	021b      	lsls	r3, r3, #8
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a14      	ldr	r2, [pc, #80]	; (800838c <TIM_OC3_SetConfig+0xd0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d113      	bne.n	8008366 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800834c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	bc80      	pop	{r7}
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40012c00 	.word	0x40012c00

08008390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	021b      	lsls	r3, r3, #8
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	031b      	lsls	r3, r3, #12
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a0f      	ldr	r2, [pc, #60]	; (8008428 <TIM_OC4_SetConfig+0x98>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d109      	bne.n	8008404 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	019b      	lsls	r3, r3, #6
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	4313      	orrs	r3, r2
 8008402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr
 8008428:	40012c00 	.word	0x40012c00

0800842c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f023 0201 	bic.w	r2, r3, #1
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f023 030a 	bic.w	r3, r3, #10
 8008468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	621a      	str	r2, [r3, #32]
}
 800847e:	bf00      	nop
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	bc80      	pop	{r7}
 8008486:	4770      	bx	lr

08008488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	f023 0210 	bic.w	r2, r3, #16
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	031b      	lsls	r3, r3, #12
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	621a      	str	r2, [r3, #32]
}
 80084dc:	bf00      	nop
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr

080084e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	f043 0307 	orr.w	r3, r3, #7
 8008508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	609a      	str	r2, [r3, #8]
}
 8008510:	bf00      	nop
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr

0800851a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800851a:	b480      	push	{r7}
 800851c:	b087      	sub	sp, #28
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008534:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	021a      	lsls	r2, r3, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	431a      	orrs	r2, r3
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4313      	orrs	r3, r2
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	609a      	str	r2, [r3, #8]
}
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr

08008558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 031f 	and.w	r3, r3, #31
 800856a:	2201      	movs	r2, #1
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a1a      	ldr	r2, [r3, #32]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	43db      	mvns	r3, r3
 800857a:	401a      	ands	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a1a      	ldr	r2, [r3, #32]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	fa01 f303 	lsl.w	r3, r1, r3
 8008590:	431a      	orrs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e046      	b.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a16      	ldr	r2, [pc, #88]	; (8008650 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00e      	beq.n	800861a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008604:	d009      	beq.n	800861a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a12      	ldr	r2, [pc, #72]	; (8008654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d004      	beq.n	800861a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a10      	ldr	r2, [pc, #64]	; (8008658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d10c      	bne.n	8008634 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	4313      	orrs	r3, r2
 800862a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr
 8008650:	40012c00 	.word	0x40012c00
 8008654:	40000400 	.word	0x40000400
 8008658:	40000800 	.word	0x40000800

0800865c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008670:	2b01      	cmp	r3, #1
 8008672:	d101      	bne.n	8008678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008674:	2302      	movs	r3, #2
 8008676:	e03d      	b.n	80086f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr

080086fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e03f      	b.n	8008790 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fc fcab 	bl	8005080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2224      	movs	r2, #36	; 0x24
 800872e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008740:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fca2 	bl	800908c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691a      	ldr	r2, [r3, #16]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008756:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	695a      	ldr	r2, [r3, #20]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008766:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008776:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2220      	movs	r2, #32
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2220      	movs	r2, #32
 800878a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	4613      	mov	r3, r2
 80087a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d17c      	bne.n	80088b2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <HAL_UART_Transmit+0x2c>
 80087be:	88fb      	ldrh	r3, [r7, #6]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e075      	b.n	80088b4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_UART_Transmit+0x3e>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e06e      	b.n	80088b4 <HAL_UART_Transmit+0x11c>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2221      	movs	r2, #33	; 0x21
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087ec:	f7fc fe5c 	bl	80054a8 <HAL_GetTick>
 80087f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	88fa      	ldrh	r2, [r7, #6]
 80087f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	88fa      	ldrh	r2, [r7, #6]
 80087fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008806:	d108      	bne.n	800881a <HAL_UART_Transmit+0x82>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	e003      	b.n	8008822 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800882a:	e02a      	b.n	8008882 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2200      	movs	r2, #0
 8008834:	2180      	movs	r1, #128	; 0x80
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 fa55 	bl	8008ce6 <UART_WaitOnFlagUntilTimeout>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e036      	b.n	80088b4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10b      	bne.n	8008864 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800885a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	3302      	adds	r3, #2
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	e007      	b.n	8008874 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	781a      	ldrb	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1cf      	bne.n	800882c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2200      	movs	r2, #0
 8008894:	2140      	movs	r1, #64	; 0x40
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 fa25 	bl	8008ce6 <UART_WaitOnFlagUntilTimeout>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e006      	b.n	80088b4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	e000      	b.n	80088b4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80088b2:	2302      	movs	r3, #2
  }
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3720      	adds	r7, #32
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d13c      	bne.n	8008950 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e035      	b.n	8008952 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e02e      	b.n	8008952 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	461a      	mov	r2, r3
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fa36 	bl	8008d7a <UART_Start_Receive_IT>
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d119      	bne.n	800894c <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	2b01      	cmp	r3, #1
 800891e:	d113      	bne.n	8008948 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	613b      	str	r3, [r7, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	613b      	str	r3, [r7, #16]
 8008934:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0210 	orr.w	r2, r2, #16
 8008944:	60da      	str	r2, [r3, #12]
 8008946:	e001      	b.n	800894c <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	e000      	b.n	8008952 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 8008950:	2302      	movs	r3, #2
  }
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800897c:	2300      	movs	r3, #0
 800897e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008980:	2300      	movs	r3, #0
 8008982:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10d      	bne.n	80089ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_UART_IRQHandler+0x52>
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fac7 	bl	8008f3a <UART_Receive_IT>
      return;
 80089ac:	e17b      	b.n	8008ca6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 80b1 	beq.w	8008b18 <HAL_UART_IRQHandler+0x1bc>
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d105      	bne.n	80089cc <HAL_UART_IRQHandler+0x70>
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 80a6 	beq.w	8008b18 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <HAL_UART_IRQHandler+0x90>
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d005      	beq.n	80089ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	f043 0201 	orr.w	r2, r3, #1
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <HAL_UART_IRQHandler+0xb0>
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	f043 0202 	orr.w	r2, r3, #2
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <HAL_UART_IRQHandler+0xd0>
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	f043 0204 	orr.w	r2, r3, #4
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00f      	beq.n	8008a56 <HAL_UART_IRQHandler+0xfa>
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <HAL_UART_IRQHandler+0xee>
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	f043 0208 	orr.w	r2, r3, #8
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 811e 	beq.w	8008c9c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <HAL_UART_IRQHandler+0x11e>
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fa60 	bl	8008f3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bf14      	ite	ne
 8008a88:	2301      	movne	r3, #1
 8008a8a:	2300      	moveq	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	f003 0308 	and.w	r3, r3, #8
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <HAL_UART_IRQHandler+0x146>
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d031      	beq.n	8008b06 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f9a2 	bl	8008dec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d023      	beq.n	8008afe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695a      	ldr	r2, [r3, #20]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ac4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d013      	beq.n	8008af6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	4a76      	ldr	r2, [pc, #472]	; (8008cac <HAL_UART_IRQHandler+0x350>)
 8008ad4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fd fb16 	bl	800610c <HAL_DMA_Abort_IT>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af4:	e00e      	b.n	8008b14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f8ec 	bl	8008cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008afc:	e00a      	b.n	8008b14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f8e8 	bl	8008cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b04:	e006      	b.n	8008b14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f8e4 	bl	8008cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b12:	e0c3      	b.n	8008c9c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b14:	bf00      	nop
    return;
 8008b16:	e0c1      	b.n	8008c9c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	f040 80a1 	bne.w	8008c64 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	f003 0310 	and.w	r3, r3, #16
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 809b 	beq.w	8008c64 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 8095 	beq.w	8008c64 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d04e      	beq.n	8008bfc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008b68:	8a3b      	ldrh	r3, [r7, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 8098 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b74:	8a3a      	ldrh	r2, [r7, #16]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	f080 8092 	bcs.w	8008ca0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8a3a      	ldrh	r2, [r7, #16]
 8008b80:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	2b20      	cmp	r3, #32
 8008b8a:	d02b      	beq.n	8008be4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b9a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695a      	ldr	r2, [r3, #20]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0201 	bic.w	r2, r2, #1
 8008baa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695a      	ldr	r2, [r3, #20]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0210 	bic.w	r2, r2, #16
 8008bd8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fd fa59 	bl	8006096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7f8 fc4d 	bl	8001494 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008bfa:	e051      	b.n	8008ca0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d047      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008c14:	8a7b      	ldrh	r3, [r7, #18]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d044      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c28:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695a      	ldr	r2, [r3, #20]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0201 	bic.w	r2, r2, #1
 8008c38:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68da      	ldr	r2, [r3, #12]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0210 	bic.w	r2, r2, #16
 8008c56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c58:	8a7b      	ldrh	r3, [r7, #18]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7f8 fc19 	bl	8001494 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008c62:	e01f      	b.n	8008ca4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d008      	beq.n	8008c80 <HAL_UART_IRQHandler+0x324>
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d003      	beq.n	8008c80 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f8f7 	bl	8008e6c <UART_Transmit_IT>
    return;
 8008c7e:	e012      	b.n	8008ca6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00d      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x34a>
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f938 	bl	8008f0a <UART_EndTransmit_IT>
    return;
 8008c9a:	e004      	b.n	8008ca6 <HAL_UART_IRQHandler+0x34a>
    return;
 8008c9c:	bf00      	nop
 8008c9e:	e002      	b.n	8008ca6 <HAL_UART_IRQHandler+0x34a>
      return;
 8008ca0:	bf00      	nop
 8008ca2:	e000      	b.n	8008ca6 <HAL_UART_IRQHandler+0x34a>
      return;
 8008ca4:	bf00      	nop
  }
}
 8008ca6:	3728      	adds	r7, #40	; 0x28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	08008e45 	.word	0x08008e45

08008cb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bc80      	pop	{r7}
 8008cc0:	4770      	bx	lr

08008cc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008cca:	bf00      	nop
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bc80      	pop	{r7}
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bc80      	pop	{r7}
 8008ce4:	4770      	bx	lr

08008ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	603b      	str	r3, [r7, #0]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cf6:	e02c      	b.n	8008d52 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfe:	d028      	beq.n	8008d52 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d007      	beq.n	8008d16 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d06:	f7fc fbcf 	bl	80054a8 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d21d      	bcs.n	8008d52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d24:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	695a      	ldr	r2, [r3, #20]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f022 0201 	bic.w	r2, r2, #1
 8008d34:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e00f      	b.n	8008d72 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	bf0c      	ite	eq
 8008d62:	2301      	moveq	r3, #1
 8008d64:	2300      	movne	r3, #0
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d0c3      	beq.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b085      	sub	sp, #20
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	4613      	mov	r3, r2
 8008d86:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	88fa      	ldrh	r2, [r7, #6]
 8008d92:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	88fa      	ldrh	r2, [r7, #6]
 8008d98:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2222      	movs	r2, #34	; 0x22
 8008da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dbe:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695a      	ldr	r2, [r3, #20]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0201 	orr.w	r2, r2, #1
 8008dce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0220 	orr.w	r2, r2, #32
 8008dde:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bc80      	pop	{r7}
 8008dea:	4770      	bx	lr

08008dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	695a      	ldr	r2, [r3, #20]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0201 	bic.w	r2, r2, #1
 8008e12:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d107      	bne.n	8008e2c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0210 	bic.w	r2, r2, #16
 8008e2a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e3a:	bf00      	nop
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr

08008e44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff ff38 	bl	8008cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b21      	cmp	r3, #33	; 0x21
 8008e7e:	d13e      	bne.n	8008efe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e88:	d114      	bne.n	8008eb4 <UART_Transmit_IT+0x48>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d110      	bne.n	8008eb4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ea6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	1c9a      	adds	r2, r3, #2
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	621a      	str	r2, [r3, #32]
 8008eb2:	e008      	b.n	8008ec6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	1c59      	adds	r1, r3, #1
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6211      	str	r1, [r2, #32]
 8008ebe:	781a      	ldrb	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10f      	bne.n	8008efa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ee8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ef8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e000      	b.n	8008f00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008efe:	2302      	movs	r3, #2
  }
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr

08008f0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68da      	ldr	r2, [r3, #12]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff fec0 	bl	8008cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b086      	sub	sp, #24
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b22      	cmp	r3, #34	; 0x22
 8008f4c:	f040 8099 	bne.w	8009082 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f58:	d117      	bne.n	8008f8a <UART_Receive_IT+0x50>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d113      	bne.n	8008f8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	1c9a      	adds	r2, r3, #2
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	629a      	str	r2, [r3, #40]	; 0x28
 8008f88:	e026      	b.n	8008fd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008f90:	2300      	movs	r3, #0
 8008f92:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9c:	d007      	beq.n	8008fae <UART_Receive_IT+0x74>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <UART_Receive_IT+0x82>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	701a      	strb	r2, [r3, #0]
 8008fba:	e008      	b.n	8008fce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d148      	bne.n	800907e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0220 	bic.w	r2, r2, #32
 8008ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800900a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695a      	ldr	r2, [r3, #20]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0201 	bic.w	r2, r2, #1
 800901a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009028:	2b01      	cmp	r3, #1
 800902a:	d123      	bne.n	8009074 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0210 	bic.w	r2, r2, #16
 8009040:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b10      	cmp	r3, #16
 800904e:	d10a      	bne.n	8009066 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009050:	2300      	movs	r3, #0
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7f8 fa11 	bl	8001494 <HAL_UARTEx_RxEventCallback>
 8009072:	e002      	b.n	800907a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff fe24 	bl	8008cc2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	e002      	b.n	8009084 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	e000      	b.n	8009084 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009082:	2302      	movs	r3, #2
  }
}
 8009084:	4618      	mov	r0, r3
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80090c6:	f023 030c 	bic.w	r3, r3, #12
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6812      	ldr	r2, [r2, #0]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	430b      	orrs	r3, r1
 80090d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a2c      	ldr	r2, [pc, #176]	; (80091a0 <UART_SetConfig+0x114>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d103      	bne.n	80090fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80090f4:	f7fe f920 	bl	8007338 <HAL_RCC_GetPCLK2Freq>
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	e002      	b.n	8009102 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80090fc:	f7fe f908 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 8009100:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009a      	lsls	r2, r3, #2
 800910c:	441a      	add	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	fbb2 f3f3 	udiv	r3, r2, r3
 8009118:	4a22      	ldr	r2, [pc, #136]	; (80091a4 <UART_SetConfig+0x118>)
 800911a:	fba2 2303 	umull	r2, r3, r2, r3
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	0119      	lsls	r1, r3, #4
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009a      	lsls	r2, r3, #2
 800912c:	441a      	add	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	fbb2 f2f3 	udiv	r2, r2, r3
 8009138:	4b1a      	ldr	r3, [pc, #104]	; (80091a4 <UART_SetConfig+0x118>)
 800913a:	fba3 0302 	umull	r0, r3, r3, r2
 800913e:	095b      	lsrs	r3, r3, #5
 8009140:	2064      	movs	r0, #100	; 0x64
 8009142:	fb00 f303 	mul.w	r3, r0, r3
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	011b      	lsls	r3, r3, #4
 800914a:	3332      	adds	r3, #50	; 0x32
 800914c:	4a15      	ldr	r2, [pc, #84]	; (80091a4 <UART_SetConfig+0x118>)
 800914e:	fba2 2303 	umull	r2, r3, r2, r3
 8009152:	095b      	lsrs	r3, r3, #5
 8009154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009158:	4419      	add	r1, r3
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009a      	lsls	r2, r3, #2
 8009164:	441a      	add	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009170:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <UART_SetConfig+0x118>)
 8009172:	fba3 0302 	umull	r0, r3, r3, r2
 8009176:	095b      	lsrs	r3, r3, #5
 8009178:	2064      	movs	r0, #100	; 0x64
 800917a:	fb00 f303 	mul.w	r3, r0, r3
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	011b      	lsls	r3, r3, #4
 8009182:	3332      	adds	r3, #50	; 0x32
 8009184:	4a07      	ldr	r2, [pc, #28]	; (80091a4 <UART_SetConfig+0x118>)
 8009186:	fba2 2303 	umull	r2, r3, r2, r3
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	f003 020f 	and.w	r2, r3, #15
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	440a      	add	r2, r1
 8009196:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40013800 	.word	0x40013800
 80091a4:	51eb851f 	.word	0x51eb851f

080091a8 <atoi>:
 80091a8:	220a      	movs	r2, #10
 80091aa:	2100      	movs	r1, #0
 80091ac:	f000 ba48 	b.w	8009640 <strtol>

080091b0 <calloc>:
 80091b0:	4b02      	ldr	r3, [pc, #8]	; (80091bc <calloc+0xc>)
 80091b2:	460a      	mov	r2, r1
 80091b4:	4601      	mov	r1, r0
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	f000 b852 	b.w	8009260 <_calloc_r>
 80091bc:	200000fc 	.word	0x200000fc

080091c0 <__errno>:
 80091c0:	4b01      	ldr	r3, [pc, #4]	; (80091c8 <__errno+0x8>)
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	200000fc 	.word	0x200000fc

080091cc <__libc_init_array>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	2600      	movs	r6, #0
 80091d0:	4d0c      	ldr	r5, [pc, #48]	; (8009204 <__libc_init_array+0x38>)
 80091d2:	4c0d      	ldr	r4, [pc, #52]	; (8009208 <__libc_init_array+0x3c>)
 80091d4:	1b64      	subs	r4, r4, r5
 80091d6:	10a4      	asrs	r4, r4, #2
 80091d8:	42a6      	cmp	r6, r4
 80091da:	d109      	bne.n	80091f0 <__libc_init_array+0x24>
 80091dc:	f001 fc48 	bl	800aa70 <_init>
 80091e0:	2600      	movs	r6, #0
 80091e2:	4d0a      	ldr	r5, [pc, #40]	; (800920c <__libc_init_array+0x40>)
 80091e4:	4c0a      	ldr	r4, [pc, #40]	; (8009210 <__libc_init_array+0x44>)
 80091e6:	1b64      	subs	r4, r4, r5
 80091e8:	10a4      	asrs	r4, r4, #2
 80091ea:	42a6      	cmp	r6, r4
 80091ec:	d105      	bne.n	80091fa <__libc_init_array+0x2e>
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f4:	4798      	blx	r3
 80091f6:	3601      	adds	r6, #1
 80091f8:	e7ee      	b.n	80091d8 <__libc_init_array+0xc>
 80091fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fe:	4798      	blx	r3
 8009200:	3601      	adds	r6, #1
 8009202:	e7f2      	b.n	80091ea <__libc_init_array+0x1e>
 8009204:	0800ae80 	.word	0x0800ae80
 8009208:	0800ae80 	.word	0x0800ae80
 800920c:	0800ae80 	.word	0x0800ae80
 8009210:	0800ae84 	.word	0x0800ae84

08009214 <malloc>:
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <malloc+0xc>)
 8009216:	4601      	mov	r1, r0
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	f000 b89d 	b.w	8009358 <_malloc_r>
 800921e:	bf00      	nop
 8009220:	200000fc 	.word	0x200000fc

08009224 <free>:
 8009224:	4b02      	ldr	r3, [pc, #8]	; (8009230 <free+0xc>)
 8009226:	4601      	mov	r1, r0
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	f000 b82d 	b.w	8009288 <_free_r>
 800922e:	bf00      	nop
 8009230:	200000fc 	.word	0x200000fc

08009234 <memcpy>:
 8009234:	440a      	add	r2, r1
 8009236:	4291      	cmp	r1, r2
 8009238:	f100 33ff 	add.w	r3, r0, #4294967295
 800923c:	d100      	bne.n	8009240 <memcpy+0xc>
 800923e:	4770      	bx	lr
 8009240:	b510      	push	{r4, lr}
 8009242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009246:	4291      	cmp	r1, r2
 8009248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800924c:	d1f9      	bne.n	8009242 <memcpy+0xe>
 800924e:	bd10      	pop	{r4, pc}

08009250 <memset>:
 8009250:	4603      	mov	r3, r0
 8009252:	4402      	add	r2, r0
 8009254:	4293      	cmp	r3, r2
 8009256:	d100      	bne.n	800925a <memset+0xa>
 8009258:	4770      	bx	lr
 800925a:	f803 1b01 	strb.w	r1, [r3], #1
 800925e:	e7f9      	b.n	8009254 <memset+0x4>

08009260 <_calloc_r>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	fba1 5402 	umull	r5, r4, r1, r2
 8009266:	b934      	cbnz	r4, 8009276 <_calloc_r+0x16>
 8009268:	4629      	mov	r1, r5
 800926a:	f000 f875 	bl	8009358 <_malloc_r>
 800926e:	4606      	mov	r6, r0
 8009270:	b928      	cbnz	r0, 800927e <_calloc_r+0x1e>
 8009272:	4630      	mov	r0, r6
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	220c      	movs	r2, #12
 8009278:	2600      	movs	r6, #0
 800927a:	6002      	str	r2, [r0, #0]
 800927c:	e7f9      	b.n	8009272 <_calloc_r+0x12>
 800927e:	462a      	mov	r2, r5
 8009280:	4621      	mov	r1, r4
 8009282:	f7ff ffe5 	bl	8009250 <memset>
 8009286:	e7f4      	b.n	8009272 <_calloc_r+0x12>

08009288 <_free_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4605      	mov	r5, r0
 800928c:	2900      	cmp	r1, #0
 800928e:	d040      	beq.n	8009312 <_free_r+0x8a>
 8009290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009294:	1f0c      	subs	r4, r1, #4
 8009296:	2b00      	cmp	r3, #0
 8009298:	bfb8      	it	lt
 800929a:	18e4      	addlt	r4, r4, r3
 800929c:	f000 fa0a 	bl	80096b4 <__malloc_lock>
 80092a0:	4a1c      	ldr	r2, [pc, #112]	; (8009314 <_free_r+0x8c>)
 80092a2:	6813      	ldr	r3, [r2, #0]
 80092a4:	b933      	cbnz	r3, 80092b4 <_free_r+0x2c>
 80092a6:	6063      	str	r3, [r4, #4]
 80092a8:	6014      	str	r4, [r2, #0]
 80092aa:	4628      	mov	r0, r5
 80092ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b0:	f000 ba06 	b.w	80096c0 <__malloc_unlock>
 80092b4:	42a3      	cmp	r3, r4
 80092b6:	d908      	bls.n	80092ca <_free_r+0x42>
 80092b8:	6820      	ldr	r0, [r4, #0]
 80092ba:	1821      	adds	r1, r4, r0
 80092bc:	428b      	cmp	r3, r1
 80092be:	bf01      	itttt	eq
 80092c0:	6819      	ldreq	r1, [r3, #0]
 80092c2:	685b      	ldreq	r3, [r3, #4]
 80092c4:	1809      	addeq	r1, r1, r0
 80092c6:	6021      	streq	r1, [r4, #0]
 80092c8:	e7ed      	b.n	80092a6 <_free_r+0x1e>
 80092ca:	461a      	mov	r2, r3
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	b10b      	cbz	r3, 80092d4 <_free_r+0x4c>
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	d9fa      	bls.n	80092ca <_free_r+0x42>
 80092d4:	6811      	ldr	r1, [r2, #0]
 80092d6:	1850      	adds	r0, r2, r1
 80092d8:	42a0      	cmp	r0, r4
 80092da:	d10b      	bne.n	80092f4 <_free_r+0x6c>
 80092dc:	6820      	ldr	r0, [r4, #0]
 80092de:	4401      	add	r1, r0
 80092e0:	1850      	adds	r0, r2, r1
 80092e2:	4283      	cmp	r3, r0
 80092e4:	6011      	str	r1, [r2, #0]
 80092e6:	d1e0      	bne.n	80092aa <_free_r+0x22>
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	4401      	add	r1, r0
 80092ee:	6011      	str	r1, [r2, #0]
 80092f0:	6053      	str	r3, [r2, #4]
 80092f2:	e7da      	b.n	80092aa <_free_r+0x22>
 80092f4:	d902      	bls.n	80092fc <_free_r+0x74>
 80092f6:	230c      	movs	r3, #12
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	e7d6      	b.n	80092aa <_free_r+0x22>
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	1821      	adds	r1, r4, r0
 8009300:	428b      	cmp	r3, r1
 8009302:	bf01      	itttt	eq
 8009304:	6819      	ldreq	r1, [r3, #0]
 8009306:	685b      	ldreq	r3, [r3, #4]
 8009308:	1809      	addeq	r1, r1, r0
 800930a:	6021      	streq	r1, [r4, #0]
 800930c:	6063      	str	r3, [r4, #4]
 800930e:	6054      	str	r4, [r2, #4]
 8009310:	e7cb      	b.n	80092aa <_free_r+0x22>
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	20003710 	.word	0x20003710

08009318 <sbrk_aligned>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	4e0e      	ldr	r6, [pc, #56]	; (8009354 <sbrk_aligned+0x3c>)
 800931c:	460c      	mov	r4, r1
 800931e:	6831      	ldr	r1, [r6, #0]
 8009320:	4605      	mov	r5, r0
 8009322:	b911      	cbnz	r1, 800932a <sbrk_aligned+0x12>
 8009324:	f000 f8ca 	bl	80094bc <_sbrk_r>
 8009328:	6030      	str	r0, [r6, #0]
 800932a:	4621      	mov	r1, r4
 800932c:	4628      	mov	r0, r5
 800932e:	f000 f8c5 	bl	80094bc <_sbrk_r>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d00a      	beq.n	800934c <sbrk_aligned+0x34>
 8009336:	1cc4      	adds	r4, r0, #3
 8009338:	f024 0403 	bic.w	r4, r4, #3
 800933c:	42a0      	cmp	r0, r4
 800933e:	d007      	beq.n	8009350 <sbrk_aligned+0x38>
 8009340:	1a21      	subs	r1, r4, r0
 8009342:	4628      	mov	r0, r5
 8009344:	f000 f8ba 	bl	80094bc <_sbrk_r>
 8009348:	3001      	adds	r0, #1
 800934a:	d101      	bne.n	8009350 <sbrk_aligned+0x38>
 800934c:	f04f 34ff 	mov.w	r4, #4294967295
 8009350:	4620      	mov	r0, r4
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	20003714 	.word	0x20003714

08009358 <_malloc_r>:
 8009358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935c:	1ccd      	adds	r5, r1, #3
 800935e:	f025 0503 	bic.w	r5, r5, #3
 8009362:	3508      	adds	r5, #8
 8009364:	2d0c      	cmp	r5, #12
 8009366:	bf38      	it	cc
 8009368:	250c      	movcc	r5, #12
 800936a:	2d00      	cmp	r5, #0
 800936c:	4607      	mov	r7, r0
 800936e:	db01      	blt.n	8009374 <_malloc_r+0x1c>
 8009370:	42a9      	cmp	r1, r5
 8009372:	d905      	bls.n	8009380 <_malloc_r+0x28>
 8009374:	230c      	movs	r3, #12
 8009376:	2600      	movs	r6, #0
 8009378:	603b      	str	r3, [r7, #0]
 800937a:	4630      	mov	r0, r6
 800937c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009380:	4e2e      	ldr	r6, [pc, #184]	; (800943c <_malloc_r+0xe4>)
 8009382:	f000 f997 	bl	80096b4 <__malloc_lock>
 8009386:	6833      	ldr	r3, [r6, #0]
 8009388:	461c      	mov	r4, r3
 800938a:	bb34      	cbnz	r4, 80093da <_malloc_r+0x82>
 800938c:	4629      	mov	r1, r5
 800938e:	4638      	mov	r0, r7
 8009390:	f7ff ffc2 	bl	8009318 <sbrk_aligned>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	4604      	mov	r4, r0
 8009398:	d14d      	bne.n	8009436 <_malloc_r+0xde>
 800939a:	6834      	ldr	r4, [r6, #0]
 800939c:	4626      	mov	r6, r4
 800939e:	2e00      	cmp	r6, #0
 80093a0:	d140      	bne.n	8009424 <_malloc_r+0xcc>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	4631      	mov	r1, r6
 80093a6:	4638      	mov	r0, r7
 80093a8:	eb04 0803 	add.w	r8, r4, r3
 80093ac:	f000 f886 	bl	80094bc <_sbrk_r>
 80093b0:	4580      	cmp	r8, r0
 80093b2:	d13a      	bne.n	800942a <_malloc_r+0xd2>
 80093b4:	6821      	ldr	r1, [r4, #0]
 80093b6:	3503      	adds	r5, #3
 80093b8:	1a6d      	subs	r5, r5, r1
 80093ba:	f025 0503 	bic.w	r5, r5, #3
 80093be:	3508      	adds	r5, #8
 80093c0:	2d0c      	cmp	r5, #12
 80093c2:	bf38      	it	cc
 80093c4:	250c      	movcc	r5, #12
 80093c6:	4638      	mov	r0, r7
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7ff ffa5 	bl	8009318 <sbrk_aligned>
 80093ce:	3001      	adds	r0, #1
 80093d0:	d02b      	beq.n	800942a <_malloc_r+0xd2>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	442b      	add	r3, r5
 80093d6:	6023      	str	r3, [r4, #0]
 80093d8:	e00e      	b.n	80093f8 <_malloc_r+0xa0>
 80093da:	6822      	ldr	r2, [r4, #0]
 80093dc:	1b52      	subs	r2, r2, r5
 80093de:	d41e      	bmi.n	800941e <_malloc_r+0xc6>
 80093e0:	2a0b      	cmp	r2, #11
 80093e2:	d916      	bls.n	8009412 <_malloc_r+0xba>
 80093e4:	1961      	adds	r1, r4, r5
 80093e6:	42a3      	cmp	r3, r4
 80093e8:	6025      	str	r5, [r4, #0]
 80093ea:	bf18      	it	ne
 80093ec:	6059      	strne	r1, [r3, #4]
 80093ee:	6863      	ldr	r3, [r4, #4]
 80093f0:	bf08      	it	eq
 80093f2:	6031      	streq	r1, [r6, #0]
 80093f4:	5162      	str	r2, [r4, r5]
 80093f6:	604b      	str	r3, [r1, #4]
 80093f8:	4638      	mov	r0, r7
 80093fa:	f104 060b 	add.w	r6, r4, #11
 80093fe:	f000 f95f 	bl	80096c0 <__malloc_unlock>
 8009402:	f026 0607 	bic.w	r6, r6, #7
 8009406:	1d23      	adds	r3, r4, #4
 8009408:	1af2      	subs	r2, r6, r3
 800940a:	d0b6      	beq.n	800937a <_malloc_r+0x22>
 800940c:	1b9b      	subs	r3, r3, r6
 800940e:	50a3      	str	r3, [r4, r2]
 8009410:	e7b3      	b.n	800937a <_malloc_r+0x22>
 8009412:	6862      	ldr	r2, [r4, #4]
 8009414:	42a3      	cmp	r3, r4
 8009416:	bf0c      	ite	eq
 8009418:	6032      	streq	r2, [r6, #0]
 800941a:	605a      	strne	r2, [r3, #4]
 800941c:	e7ec      	b.n	80093f8 <_malloc_r+0xa0>
 800941e:	4623      	mov	r3, r4
 8009420:	6864      	ldr	r4, [r4, #4]
 8009422:	e7b2      	b.n	800938a <_malloc_r+0x32>
 8009424:	4634      	mov	r4, r6
 8009426:	6876      	ldr	r6, [r6, #4]
 8009428:	e7b9      	b.n	800939e <_malloc_r+0x46>
 800942a:	230c      	movs	r3, #12
 800942c:	4638      	mov	r0, r7
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	f000 f946 	bl	80096c0 <__malloc_unlock>
 8009434:	e7a1      	b.n	800937a <_malloc_r+0x22>
 8009436:	6025      	str	r5, [r4, #0]
 8009438:	e7de      	b.n	80093f8 <_malloc_r+0xa0>
 800943a:	bf00      	nop
 800943c:	20003710 	.word	0x20003710

08009440 <rand>:
 8009440:	4b16      	ldr	r3, [pc, #88]	; (800949c <rand+0x5c>)
 8009442:	b510      	push	{r4, lr}
 8009444:	681c      	ldr	r4, [r3, #0]
 8009446:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009448:	b9b3      	cbnz	r3, 8009478 <rand+0x38>
 800944a:	2018      	movs	r0, #24
 800944c:	f7ff fee2 	bl	8009214 <malloc>
 8009450:	4602      	mov	r2, r0
 8009452:	63a0      	str	r0, [r4, #56]	; 0x38
 8009454:	b920      	cbnz	r0, 8009460 <rand+0x20>
 8009456:	214e      	movs	r1, #78	; 0x4e
 8009458:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <rand+0x60>)
 800945a:	4812      	ldr	r0, [pc, #72]	; (80094a4 <rand+0x64>)
 800945c:	f000 f8fa 	bl	8009654 <__assert_func>
 8009460:	4911      	ldr	r1, [pc, #68]	; (80094a8 <rand+0x68>)
 8009462:	4b12      	ldr	r3, [pc, #72]	; (80094ac <rand+0x6c>)
 8009464:	e9c0 1300 	strd	r1, r3, [r0]
 8009468:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <rand+0x70>)
 800946a:	2100      	movs	r1, #0
 800946c:	6083      	str	r3, [r0, #8]
 800946e:	230b      	movs	r3, #11
 8009470:	8183      	strh	r3, [r0, #12]
 8009472:	2001      	movs	r0, #1
 8009474:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009478:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800947a:	4a0e      	ldr	r2, [pc, #56]	; (80094b4 <rand+0x74>)
 800947c:	6920      	ldr	r0, [r4, #16]
 800947e:	6963      	ldr	r3, [r4, #20]
 8009480:	4342      	muls	r2, r0
 8009482:	490d      	ldr	r1, [pc, #52]	; (80094b8 <rand+0x78>)
 8009484:	fb01 2203 	mla	r2, r1, r3, r2
 8009488:	fba0 0101 	umull	r0, r1, r0, r1
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	eb42 0001 	adc.w	r0, r2, r1
 8009492:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009496:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800949a:	bd10      	pop	{r4, pc}
 800949c:	200000fc 	.word	0x200000fc
 80094a0:	0800ac3c 	.word	0x0800ac3c
 80094a4:	0800ac53 	.word	0x0800ac53
 80094a8:	abcd330e 	.word	0xabcd330e
 80094ac:	e66d1234 	.word	0xe66d1234
 80094b0:	0005deec 	.word	0x0005deec
 80094b4:	5851f42d 	.word	0x5851f42d
 80094b8:	4c957f2d 	.word	0x4c957f2d

080094bc <_sbrk_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	2300      	movs	r3, #0
 80094c0:	4d05      	ldr	r5, [pc, #20]	; (80094d8 <_sbrk_r+0x1c>)
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7fb ff34 	bl	8005334 <_sbrk>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_sbrk_r+0x1a>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_sbrk_r+0x1a>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	20003718 	.word	0x20003718

080094dc <siprintf>:
 80094dc:	b40e      	push	{r1, r2, r3}
 80094de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094e2:	b500      	push	{lr}
 80094e4:	b09c      	sub	sp, #112	; 0x70
 80094e6:	ab1d      	add	r3, sp, #116	; 0x74
 80094e8:	9002      	str	r0, [sp, #8]
 80094ea:	9006      	str	r0, [sp, #24]
 80094ec:	9107      	str	r1, [sp, #28]
 80094ee:	9104      	str	r1, [sp, #16]
 80094f0:	4808      	ldr	r0, [pc, #32]	; (8009514 <siprintf+0x38>)
 80094f2:	4909      	ldr	r1, [pc, #36]	; (8009518 <siprintf+0x3c>)
 80094f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f8:	9105      	str	r1, [sp, #20]
 80094fa:	6800      	ldr	r0, [r0, #0]
 80094fc:	a902      	add	r1, sp, #8
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	f000 f940 	bl	8009784 <_svfiprintf_r>
 8009504:	2200      	movs	r2, #0
 8009506:	9b02      	ldr	r3, [sp, #8]
 8009508:	701a      	strb	r2, [r3, #0]
 800950a:	b01c      	add	sp, #112	; 0x70
 800950c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009510:	b003      	add	sp, #12
 8009512:	4770      	bx	lr
 8009514:	200000fc 	.word	0x200000fc
 8009518:	ffff0208 	.word	0xffff0208

0800951c <strstr>:
 800951c:	780a      	ldrb	r2, [r1, #0]
 800951e:	b570      	push	{r4, r5, r6, lr}
 8009520:	b96a      	cbnz	r2, 800953e <strstr+0x22>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	429a      	cmp	r2, r3
 8009526:	d109      	bne.n	800953c <strstr+0x20>
 8009528:	460c      	mov	r4, r1
 800952a:	4605      	mov	r5, r0
 800952c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0f6      	beq.n	8009522 <strstr+0x6>
 8009534:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009538:	429e      	cmp	r6, r3
 800953a:	d0f7      	beq.n	800952c <strstr+0x10>
 800953c:	3001      	adds	r0, #1
 800953e:	7803      	ldrb	r3, [r0, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1ef      	bne.n	8009524 <strstr+0x8>
 8009544:	4618      	mov	r0, r3
 8009546:	e7ec      	b.n	8009522 <strstr+0x6>

08009548 <_strtol_l.constprop.0>:
 8009548:	2b01      	cmp	r3, #1
 800954a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954e:	4680      	mov	r8, r0
 8009550:	d001      	beq.n	8009556 <_strtol_l.constprop.0+0xe>
 8009552:	2b24      	cmp	r3, #36	; 0x24
 8009554:	d906      	bls.n	8009564 <_strtol_l.constprop.0+0x1c>
 8009556:	f7ff fe33 	bl	80091c0 <__errno>
 800955a:	2316      	movs	r3, #22
 800955c:	6003      	str	r3, [r0, #0]
 800955e:	2000      	movs	r0, #0
 8009560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009564:	460d      	mov	r5, r1
 8009566:	4f35      	ldr	r7, [pc, #212]	; (800963c <_strtol_l.constprop.0+0xf4>)
 8009568:	4628      	mov	r0, r5
 800956a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800956e:	5de6      	ldrb	r6, [r4, r7]
 8009570:	f016 0608 	ands.w	r6, r6, #8
 8009574:	d1f8      	bne.n	8009568 <_strtol_l.constprop.0+0x20>
 8009576:	2c2d      	cmp	r4, #45	; 0x2d
 8009578:	d12f      	bne.n	80095da <_strtol_l.constprop.0+0x92>
 800957a:	2601      	movs	r6, #1
 800957c:	782c      	ldrb	r4, [r5, #0]
 800957e:	1c85      	adds	r5, r0, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d057      	beq.n	8009634 <_strtol_l.constprop.0+0xec>
 8009584:	2b10      	cmp	r3, #16
 8009586:	d109      	bne.n	800959c <_strtol_l.constprop.0+0x54>
 8009588:	2c30      	cmp	r4, #48	; 0x30
 800958a:	d107      	bne.n	800959c <_strtol_l.constprop.0+0x54>
 800958c:	7828      	ldrb	r0, [r5, #0]
 800958e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009592:	2858      	cmp	r0, #88	; 0x58
 8009594:	d149      	bne.n	800962a <_strtol_l.constprop.0+0xe2>
 8009596:	2310      	movs	r3, #16
 8009598:	786c      	ldrb	r4, [r5, #1]
 800959a:	3502      	adds	r5, #2
 800959c:	2700      	movs	r7, #0
 800959e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80095a2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80095a6:	fbbe f9f3 	udiv	r9, lr, r3
 80095aa:	4638      	mov	r0, r7
 80095ac:	fb03 ea19 	mls	sl, r3, r9, lr
 80095b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80095b4:	f1bc 0f09 	cmp.w	ip, #9
 80095b8:	d814      	bhi.n	80095e4 <_strtol_l.constprop.0+0x9c>
 80095ba:	4664      	mov	r4, ip
 80095bc:	42a3      	cmp	r3, r4
 80095be:	dd22      	ble.n	8009606 <_strtol_l.constprop.0+0xbe>
 80095c0:	2f00      	cmp	r7, #0
 80095c2:	db1d      	blt.n	8009600 <_strtol_l.constprop.0+0xb8>
 80095c4:	4581      	cmp	r9, r0
 80095c6:	d31b      	bcc.n	8009600 <_strtol_l.constprop.0+0xb8>
 80095c8:	d101      	bne.n	80095ce <_strtol_l.constprop.0+0x86>
 80095ca:	45a2      	cmp	sl, r4
 80095cc:	db18      	blt.n	8009600 <_strtol_l.constprop.0+0xb8>
 80095ce:	2701      	movs	r7, #1
 80095d0:	fb00 4003 	mla	r0, r0, r3, r4
 80095d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095d8:	e7ea      	b.n	80095b0 <_strtol_l.constprop.0+0x68>
 80095da:	2c2b      	cmp	r4, #43	; 0x2b
 80095dc:	bf04      	itt	eq
 80095de:	782c      	ldrbeq	r4, [r5, #0]
 80095e0:	1c85      	addeq	r5, r0, #2
 80095e2:	e7cd      	b.n	8009580 <_strtol_l.constprop.0+0x38>
 80095e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80095e8:	f1bc 0f19 	cmp.w	ip, #25
 80095ec:	d801      	bhi.n	80095f2 <_strtol_l.constprop.0+0xaa>
 80095ee:	3c37      	subs	r4, #55	; 0x37
 80095f0:	e7e4      	b.n	80095bc <_strtol_l.constprop.0+0x74>
 80095f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80095f6:	f1bc 0f19 	cmp.w	ip, #25
 80095fa:	d804      	bhi.n	8009606 <_strtol_l.constprop.0+0xbe>
 80095fc:	3c57      	subs	r4, #87	; 0x57
 80095fe:	e7dd      	b.n	80095bc <_strtol_l.constprop.0+0x74>
 8009600:	f04f 37ff 	mov.w	r7, #4294967295
 8009604:	e7e6      	b.n	80095d4 <_strtol_l.constprop.0+0x8c>
 8009606:	2f00      	cmp	r7, #0
 8009608:	da07      	bge.n	800961a <_strtol_l.constprop.0+0xd2>
 800960a:	2322      	movs	r3, #34	; 0x22
 800960c:	4670      	mov	r0, lr
 800960e:	f8c8 3000 	str.w	r3, [r8]
 8009612:	2a00      	cmp	r2, #0
 8009614:	d0a4      	beq.n	8009560 <_strtol_l.constprop.0+0x18>
 8009616:	1e69      	subs	r1, r5, #1
 8009618:	e005      	b.n	8009626 <_strtol_l.constprop.0+0xde>
 800961a:	b106      	cbz	r6, 800961e <_strtol_l.constprop.0+0xd6>
 800961c:	4240      	negs	r0, r0
 800961e:	2a00      	cmp	r2, #0
 8009620:	d09e      	beq.n	8009560 <_strtol_l.constprop.0+0x18>
 8009622:	2f00      	cmp	r7, #0
 8009624:	d1f7      	bne.n	8009616 <_strtol_l.constprop.0+0xce>
 8009626:	6011      	str	r1, [r2, #0]
 8009628:	e79a      	b.n	8009560 <_strtol_l.constprop.0+0x18>
 800962a:	2430      	movs	r4, #48	; 0x30
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1b5      	bne.n	800959c <_strtol_l.constprop.0+0x54>
 8009630:	2308      	movs	r3, #8
 8009632:	e7b3      	b.n	800959c <_strtol_l.constprop.0+0x54>
 8009634:	2c30      	cmp	r4, #48	; 0x30
 8009636:	d0a9      	beq.n	800958c <_strtol_l.constprop.0+0x44>
 8009638:	230a      	movs	r3, #10
 800963a:	e7af      	b.n	800959c <_strtol_l.constprop.0+0x54>
 800963c:	0800aceb 	.word	0x0800aceb

08009640 <strtol>:
 8009640:	4613      	mov	r3, r2
 8009642:	460a      	mov	r2, r1
 8009644:	4601      	mov	r1, r0
 8009646:	4802      	ldr	r0, [pc, #8]	; (8009650 <strtol+0x10>)
 8009648:	6800      	ldr	r0, [r0, #0]
 800964a:	f7ff bf7d 	b.w	8009548 <_strtol_l.constprop.0>
 800964e:	bf00      	nop
 8009650:	200000fc 	.word	0x200000fc

08009654 <__assert_func>:
 8009654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009656:	4614      	mov	r4, r2
 8009658:	461a      	mov	r2, r3
 800965a:	4b09      	ldr	r3, [pc, #36]	; (8009680 <__assert_func+0x2c>)
 800965c:	4605      	mov	r5, r0
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68d8      	ldr	r0, [r3, #12]
 8009662:	b14c      	cbz	r4, 8009678 <__assert_func+0x24>
 8009664:	4b07      	ldr	r3, [pc, #28]	; (8009684 <__assert_func+0x30>)
 8009666:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800966a:	9100      	str	r1, [sp, #0]
 800966c:	462b      	mov	r3, r5
 800966e:	4906      	ldr	r1, [pc, #24]	; (8009688 <__assert_func+0x34>)
 8009670:	f000 f80e 	bl	8009690 <fiprintf>
 8009674:	f000 fd34 	bl	800a0e0 <abort>
 8009678:	4b04      	ldr	r3, [pc, #16]	; (800968c <__assert_func+0x38>)
 800967a:	461c      	mov	r4, r3
 800967c:	e7f3      	b.n	8009666 <__assert_func+0x12>
 800967e:	bf00      	nop
 8009680:	200000fc 	.word	0x200000fc
 8009684:	0800acae 	.word	0x0800acae
 8009688:	0800acbb 	.word	0x0800acbb
 800968c:	0800ace9 	.word	0x0800ace9

08009690 <fiprintf>:
 8009690:	b40e      	push	{r1, r2, r3}
 8009692:	b503      	push	{r0, r1, lr}
 8009694:	4601      	mov	r1, r0
 8009696:	ab03      	add	r3, sp, #12
 8009698:	4805      	ldr	r0, [pc, #20]	; (80096b0 <fiprintf+0x20>)
 800969a:	f853 2b04 	ldr.w	r2, [r3], #4
 800969e:	6800      	ldr	r0, [r0, #0]
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	f000 f997 	bl	80099d4 <_vfiprintf_r>
 80096a6:	b002      	add	sp, #8
 80096a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ac:	b003      	add	sp, #12
 80096ae:	4770      	bx	lr
 80096b0:	200000fc 	.word	0x200000fc

080096b4 <__malloc_lock>:
 80096b4:	4801      	ldr	r0, [pc, #4]	; (80096bc <__malloc_lock+0x8>)
 80096b6:	f000 becf 	b.w	800a458 <__retarget_lock_acquire_recursive>
 80096ba:	bf00      	nop
 80096bc:	2000371c 	.word	0x2000371c

080096c0 <__malloc_unlock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	; (80096c8 <__malloc_unlock+0x8>)
 80096c2:	f000 beca 	b.w	800a45a <__retarget_lock_release_recursive>
 80096c6:	bf00      	nop
 80096c8:	2000371c 	.word	0x2000371c

080096cc <__ssputs_r>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	688e      	ldr	r6, [r1, #8]
 80096d2:	4682      	mov	sl, r0
 80096d4:	429e      	cmp	r6, r3
 80096d6:	460c      	mov	r4, r1
 80096d8:	4690      	mov	r8, r2
 80096da:	461f      	mov	r7, r3
 80096dc:	d838      	bhi.n	8009750 <__ssputs_r+0x84>
 80096de:	898a      	ldrh	r2, [r1, #12]
 80096e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096e4:	d032      	beq.n	800974c <__ssputs_r+0x80>
 80096e6:	6825      	ldr	r5, [r4, #0]
 80096e8:	6909      	ldr	r1, [r1, #16]
 80096ea:	3301      	adds	r3, #1
 80096ec:	eba5 0901 	sub.w	r9, r5, r1
 80096f0:	6965      	ldr	r5, [r4, #20]
 80096f2:	444b      	add	r3, r9
 80096f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096fc:	106d      	asrs	r5, r5, #1
 80096fe:	429d      	cmp	r5, r3
 8009700:	bf38      	it	cc
 8009702:	461d      	movcc	r5, r3
 8009704:	0553      	lsls	r3, r2, #21
 8009706:	d531      	bpl.n	800976c <__ssputs_r+0xa0>
 8009708:	4629      	mov	r1, r5
 800970a:	f7ff fe25 	bl	8009358 <_malloc_r>
 800970e:	4606      	mov	r6, r0
 8009710:	b950      	cbnz	r0, 8009728 <__ssputs_r+0x5c>
 8009712:	230c      	movs	r3, #12
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	f8ca 3000 	str.w	r3, [sl]
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009722:	81a3      	strh	r3, [r4, #12]
 8009724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009728:	464a      	mov	r2, r9
 800972a:	6921      	ldr	r1, [r4, #16]
 800972c:	f7ff fd82 	bl	8009234 <memcpy>
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973a:	81a3      	strh	r3, [r4, #12]
 800973c:	6126      	str	r6, [r4, #16]
 800973e:	444e      	add	r6, r9
 8009740:	6026      	str	r6, [r4, #0]
 8009742:	463e      	mov	r6, r7
 8009744:	6165      	str	r5, [r4, #20]
 8009746:	eba5 0509 	sub.w	r5, r5, r9
 800974a:	60a5      	str	r5, [r4, #8]
 800974c:	42be      	cmp	r6, r7
 800974e:	d900      	bls.n	8009752 <__ssputs_r+0x86>
 8009750:	463e      	mov	r6, r7
 8009752:	4632      	mov	r2, r6
 8009754:	4641      	mov	r1, r8
 8009756:	6820      	ldr	r0, [r4, #0]
 8009758:	f000 fef4 	bl	800a544 <memmove>
 800975c:	68a3      	ldr	r3, [r4, #8]
 800975e:	2000      	movs	r0, #0
 8009760:	1b9b      	subs	r3, r3, r6
 8009762:	60a3      	str	r3, [r4, #8]
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	4433      	add	r3, r6
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	e7db      	b.n	8009724 <__ssputs_r+0x58>
 800976c:	462a      	mov	r2, r5
 800976e:	f000 ff03 	bl	800a578 <_realloc_r>
 8009772:	4606      	mov	r6, r0
 8009774:	2800      	cmp	r0, #0
 8009776:	d1e1      	bne.n	800973c <__ssputs_r+0x70>
 8009778:	4650      	mov	r0, sl
 800977a:	6921      	ldr	r1, [r4, #16]
 800977c:	f7ff fd84 	bl	8009288 <_free_r>
 8009780:	e7c7      	b.n	8009712 <__ssputs_r+0x46>
	...

08009784 <_svfiprintf_r>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	4698      	mov	r8, r3
 800978a:	898b      	ldrh	r3, [r1, #12]
 800978c:	4607      	mov	r7, r0
 800978e:	061b      	lsls	r3, r3, #24
 8009790:	460d      	mov	r5, r1
 8009792:	4614      	mov	r4, r2
 8009794:	b09d      	sub	sp, #116	; 0x74
 8009796:	d50e      	bpl.n	80097b6 <_svfiprintf_r+0x32>
 8009798:	690b      	ldr	r3, [r1, #16]
 800979a:	b963      	cbnz	r3, 80097b6 <_svfiprintf_r+0x32>
 800979c:	2140      	movs	r1, #64	; 0x40
 800979e:	f7ff fddb 	bl	8009358 <_malloc_r>
 80097a2:	6028      	str	r0, [r5, #0]
 80097a4:	6128      	str	r0, [r5, #16]
 80097a6:	b920      	cbnz	r0, 80097b2 <_svfiprintf_r+0x2e>
 80097a8:	230c      	movs	r3, #12
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295
 80097b0:	e0d1      	b.n	8009956 <_svfiprintf_r+0x1d2>
 80097b2:	2340      	movs	r3, #64	; 0x40
 80097b4:	616b      	str	r3, [r5, #20]
 80097b6:	2300      	movs	r3, #0
 80097b8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ba:	2320      	movs	r3, #32
 80097bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097c0:	2330      	movs	r3, #48	; 0x30
 80097c2:	f04f 0901 	mov.w	r9, #1
 80097c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009970 <_svfiprintf_r+0x1ec>
 80097ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097d2:	4623      	mov	r3, r4
 80097d4:	469a      	mov	sl, r3
 80097d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097da:	b10a      	cbz	r2, 80097e0 <_svfiprintf_r+0x5c>
 80097dc:	2a25      	cmp	r2, #37	; 0x25
 80097de:	d1f9      	bne.n	80097d4 <_svfiprintf_r+0x50>
 80097e0:	ebba 0b04 	subs.w	fp, sl, r4
 80097e4:	d00b      	beq.n	80097fe <_svfiprintf_r+0x7a>
 80097e6:	465b      	mov	r3, fp
 80097e8:	4622      	mov	r2, r4
 80097ea:	4629      	mov	r1, r5
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7ff ff6d 	bl	80096cc <__ssputs_r>
 80097f2:	3001      	adds	r0, #1
 80097f4:	f000 80aa 	beq.w	800994c <_svfiprintf_r+0x1c8>
 80097f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097fa:	445a      	add	r2, fp
 80097fc:	9209      	str	r2, [sp, #36]	; 0x24
 80097fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 80a2 	beq.w	800994c <_svfiprintf_r+0x1c8>
 8009808:	2300      	movs	r3, #0
 800980a:	f04f 32ff 	mov.w	r2, #4294967295
 800980e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009812:	f10a 0a01 	add.w	sl, sl, #1
 8009816:	9304      	str	r3, [sp, #16]
 8009818:	9307      	str	r3, [sp, #28]
 800981a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800981e:	931a      	str	r3, [sp, #104]	; 0x68
 8009820:	4654      	mov	r4, sl
 8009822:	2205      	movs	r2, #5
 8009824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009828:	4851      	ldr	r0, [pc, #324]	; (8009970 <_svfiprintf_r+0x1ec>)
 800982a:	f000 fe7d 	bl	800a528 <memchr>
 800982e:	9a04      	ldr	r2, [sp, #16]
 8009830:	b9d8      	cbnz	r0, 800986a <_svfiprintf_r+0xe6>
 8009832:	06d0      	lsls	r0, r2, #27
 8009834:	bf44      	itt	mi
 8009836:	2320      	movmi	r3, #32
 8009838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800983c:	0711      	lsls	r1, r2, #28
 800983e:	bf44      	itt	mi
 8009840:	232b      	movmi	r3, #43	; 0x2b
 8009842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009846:	f89a 3000 	ldrb.w	r3, [sl]
 800984a:	2b2a      	cmp	r3, #42	; 0x2a
 800984c:	d015      	beq.n	800987a <_svfiprintf_r+0xf6>
 800984e:	4654      	mov	r4, sl
 8009850:	2000      	movs	r0, #0
 8009852:	f04f 0c0a 	mov.w	ip, #10
 8009856:	9a07      	ldr	r2, [sp, #28]
 8009858:	4621      	mov	r1, r4
 800985a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800985e:	3b30      	subs	r3, #48	; 0x30
 8009860:	2b09      	cmp	r3, #9
 8009862:	d94e      	bls.n	8009902 <_svfiprintf_r+0x17e>
 8009864:	b1b0      	cbz	r0, 8009894 <_svfiprintf_r+0x110>
 8009866:	9207      	str	r2, [sp, #28]
 8009868:	e014      	b.n	8009894 <_svfiprintf_r+0x110>
 800986a:	eba0 0308 	sub.w	r3, r0, r8
 800986e:	fa09 f303 	lsl.w	r3, r9, r3
 8009872:	4313      	orrs	r3, r2
 8009874:	46a2      	mov	sl, r4
 8009876:	9304      	str	r3, [sp, #16]
 8009878:	e7d2      	b.n	8009820 <_svfiprintf_r+0x9c>
 800987a:	9b03      	ldr	r3, [sp, #12]
 800987c:	1d19      	adds	r1, r3, #4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	9103      	str	r1, [sp, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	bfbb      	ittet	lt
 8009886:	425b      	neglt	r3, r3
 8009888:	f042 0202 	orrlt.w	r2, r2, #2
 800988c:	9307      	strge	r3, [sp, #28]
 800988e:	9307      	strlt	r3, [sp, #28]
 8009890:	bfb8      	it	lt
 8009892:	9204      	strlt	r2, [sp, #16]
 8009894:	7823      	ldrb	r3, [r4, #0]
 8009896:	2b2e      	cmp	r3, #46	; 0x2e
 8009898:	d10c      	bne.n	80098b4 <_svfiprintf_r+0x130>
 800989a:	7863      	ldrb	r3, [r4, #1]
 800989c:	2b2a      	cmp	r3, #42	; 0x2a
 800989e:	d135      	bne.n	800990c <_svfiprintf_r+0x188>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	3402      	adds	r4, #2
 80098a4:	1d1a      	adds	r2, r3, #4
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	9203      	str	r2, [sp, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bfb8      	it	lt
 80098ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80098b2:	9305      	str	r3, [sp, #20]
 80098b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009974 <_svfiprintf_r+0x1f0>
 80098b8:	2203      	movs	r2, #3
 80098ba:	4650      	mov	r0, sl
 80098bc:	7821      	ldrb	r1, [r4, #0]
 80098be:	f000 fe33 	bl	800a528 <memchr>
 80098c2:	b140      	cbz	r0, 80098d6 <_svfiprintf_r+0x152>
 80098c4:	2340      	movs	r3, #64	; 0x40
 80098c6:	eba0 000a 	sub.w	r0, r0, sl
 80098ca:	fa03 f000 	lsl.w	r0, r3, r0
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	3401      	adds	r4, #1
 80098d2:	4303      	orrs	r3, r0
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098da:	2206      	movs	r2, #6
 80098dc:	4826      	ldr	r0, [pc, #152]	; (8009978 <_svfiprintf_r+0x1f4>)
 80098de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098e2:	f000 fe21 	bl	800a528 <memchr>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d038      	beq.n	800995c <_svfiprintf_r+0x1d8>
 80098ea:	4b24      	ldr	r3, [pc, #144]	; (800997c <_svfiprintf_r+0x1f8>)
 80098ec:	bb1b      	cbnz	r3, 8009936 <_svfiprintf_r+0x1b2>
 80098ee:	9b03      	ldr	r3, [sp, #12]
 80098f0:	3307      	adds	r3, #7
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	3308      	adds	r3, #8
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fc:	4433      	add	r3, r6
 80098fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009900:	e767      	b.n	80097d2 <_svfiprintf_r+0x4e>
 8009902:	460c      	mov	r4, r1
 8009904:	2001      	movs	r0, #1
 8009906:	fb0c 3202 	mla	r2, ip, r2, r3
 800990a:	e7a5      	b.n	8009858 <_svfiprintf_r+0xd4>
 800990c:	2300      	movs	r3, #0
 800990e:	f04f 0c0a 	mov.w	ip, #10
 8009912:	4619      	mov	r1, r3
 8009914:	3401      	adds	r4, #1
 8009916:	9305      	str	r3, [sp, #20]
 8009918:	4620      	mov	r0, r4
 800991a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800991e:	3a30      	subs	r2, #48	; 0x30
 8009920:	2a09      	cmp	r2, #9
 8009922:	d903      	bls.n	800992c <_svfiprintf_r+0x1a8>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d0c5      	beq.n	80098b4 <_svfiprintf_r+0x130>
 8009928:	9105      	str	r1, [sp, #20]
 800992a:	e7c3      	b.n	80098b4 <_svfiprintf_r+0x130>
 800992c:	4604      	mov	r4, r0
 800992e:	2301      	movs	r3, #1
 8009930:	fb0c 2101 	mla	r1, ip, r1, r2
 8009934:	e7f0      	b.n	8009918 <_svfiprintf_r+0x194>
 8009936:	ab03      	add	r3, sp, #12
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	462a      	mov	r2, r5
 800993c:	4638      	mov	r0, r7
 800993e:	4b10      	ldr	r3, [pc, #64]	; (8009980 <_svfiprintf_r+0x1fc>)
 8009940:	a904      	add	r1, sp, #16
 8009942:	f3af 8000 	nop.w
 8009946:	1c42      	adds	r2, r0, #1
 8009948:	4606      	mov	r6, r0
 800994a:	d1d6      	bne.n	80098fa <_svfiprintf_r+0x176>
 800994c:	89ab      	ldrh	r3, [r5, #12]
 800994e:	065b      	lsls	r3, r3, #25
 8009950:	f53f af2c 	bmi.w	80097ac <_svfiprintf_r+0x28>
 8009954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009956:	b01d      	add	sp, #116	; 0x74
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	462a      	mov	r2, r5
 8009962:	4638      	mov	r0, r7
 8009964:	4b06      	ldr	r3, [pc, #24]	; (8009980 <_svfiprintf_r+0x1fc>)
 8009966:	a904      	add	r1, sp, #16
 8009968:	f000 f9d4 	bl	8009d14 <_printf_i>
 800996c:	e7eb      	b.n	8009946 <_svfiprintf_r+0x1c2>
 800996e:	bf00      	nop
 8009970:	0800adeb 	.word	0x0800adeb
 8009974:	0800adf1 	.word	0x0800adf1
 8009978:	0800adf5 	.word	0x0800adf5
 800997c:	00000000 	.word	0x00000000
 8009980:	080096cd 	.word	0x080096cd

08009984 <__sfputc_r>:
 8009984:	6893      	ldr	r3, [r2, #8]
 8009986:	b410      	push	{r4}
 8009988:	3b01      	subs	r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	6093      	str	r3, [r2, #8]
 800998e:	da07      	bge.n	80099a0 <__sfputc_r+0x1c>
 8009990:	6994      	ldr	r4, [r2, #24]
 8009992:	42a3      	cmp	r3, r4
 8009994:	db01      	blt.n	800999a <__sfputc_r+0x16>
 8009996:	290a      	cmp	r1, #10
 8009998:	d102      	bne.n	80099a0 <__sfputc_r+0x1c>
 800999a:	bc10      	pop	{r4}
 800999c:	f000 bae0 	b.w	8009f60 <__swbuf_r>
 80099a0:	6813      	ldr	r3, [r2, #0]
 80099a2:	1c58      	adds	r0, r3, #1
 80099a4:	6010      	str	r0, [r2, #0]
 80099a6:	7019      	strb	r1, [r3, #0]
 80099a8:	4608      	mov	r0, r1
 80099aa:	bc10      	pop	{r4}
 80099ac:	4770      	bx	lr

080099ae <__sfputs_r>:
 80099ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b0:	4606      	mov	r6, r0
 80099b2:	460f      	mov	r7, r1
 80099b4:	4614      	mov	r4, r2
 80099b6:	18d5      	adds	r5, r2, r3
 80099b8:	42ac      	cmp	r4, r5
 80099ba:	d101      	bne.n	80099c0 <__sfputs_r+0x12>
 80099bc:	2000      	movs	r0, #0
 80099be:	e007      	b.n	80099d0 <__sfputs_r+0x22>
 80099c0:	463a      	mov	r2, r7
 80099c2:	4630      	mov	r0, r6
 80099c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c8:	f7ff ffdc 	bl	8009984 <__sfputc_r>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d1f3      	bne.n	80099b8 <__sfputs_r+0xa>
 80099d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099d4 <_vfiprintf_r>:
 80099d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	460d      	mov	r5, r1
 80099da:	4614      	mov	r4, r2
 80099dc:	4698      	mov	r8, r3
 80099de:	4606      	mov	r6, r0
 80099e0:	b09d      	sub	sp, #116	; 0x74
 80099e2:	b118      	cbz	r0, 80099ec <_vfiprintf_r+0x18>
 80099e4:	6983      	ldr	r3, [r0, #24]
 80099e6:	b90b      	cbnz	r3, 80099ec <_vfiprintf_r+0x18>
 80099e8:	f000 fc98 	bl	800a31c <__sinit>
 80099ec:	4b89      	ldr	r3, [pc, #548]	; (8009c14 <_vfiprintf_r+0x240>)
 80099ee:	429d      	cmp	r5, r3
 80099f0:	d11b      	bne.n	8009a2a <_vfiprintf_r+0x56>
 80099f2:	6875      	ldr	r5, [r6, #4]
 80099f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099f6:	07d9      	lsls	r1, r3, #31
 80099f8:	d405      	bmi.n	8009a06 <_vfiprintf_r+0x32>
 80099fa:	89ab      	ldrh	r3, [r5, #12]
 80099fc:	059a      	lsls	r2, r3, #22
 80099fe:	d402      	bmi.n	8009a06 <_vfiprintf_r+0x32>
 8009a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a02:	f000 fd29 	bl	800a458 <__retarget_lock_acquire_recursive>
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	071b      	lsls	r3, r3, #28
 8009a0a:	d501      	bpl.n	8009a10 <_vfiprintf_r+0x3c>
 8009a0c:	692b      	ldr	r3, [r5, #16]
 8009a0e:	b9eb      	cbnz	r3, 8009a4c <_vfiprintf_r+0x78>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4630      	mov	r0, r6
 8009a14:	f000 faf6 	bl	800a004 <__swsetup_r>
 8009a18:	b1c0      	cbz	r0, 8009a4c <_vfiprintf_r+0x78>
 8009a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a1c:	07dc      	lsls	r4, r3, #31
 8009a1e:	d50e      	bpl.n	8009a3e <_vfiprintf_r+0x6a>
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	b01d      	add	sp, #116	; 0x74
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	4b7b      	ldr	r3, [pc, #492]	; (8009c18 <_vfiprintf_r+0x244>)
 8009a2c:	429d      	cmp	r5, r3
 8009a2e:	d101      	bne.n	8009a34 <_vfiprintf_r+0x60>
 8009a30:	68b5      	ldr	r5, [r6, #8]
 8009a32:	e7df      	b.n	80099f4 <_vfiprintf_r+0x20>
 8009a34:	4b79      	ldr	r3, [pc, #484]	; (8009c1c <_vfiprintf_r+0x248>)
 8009a36:	429d      	cmp	r5, r3
 8009a38:	bf08      	it	eq
 8009a3a:	68f5      	ldreq	r5, [r6, #12]
 8009a3c:	e7da      	b.n	80099f4 <_vfiprintf_r+0x20>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	0598      	lsls	r0, r3, #22
 8009a42:	d4ed      	bmi.n	8009a20 <_vfiprintf_r+0x4c>
 8009a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a46:	f000 fd08 	bl	800a45a <__retarget_lock_release_recursive>
 8009a4a:	e7e9      	b.n	8009a20 <_vfiprintf_r+0x4c>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a50:	2320      	movs	r3, #32
 8009a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a56:	2330      	movs	r3, #48	; 0x30
 8009a58:	f04f 0901 	mov.w	r9, #1
 8009a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a60:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009c20 <_vfiprintf_r+0x24c>
 8009a64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a68:	4623      	mov	r3, r4
 8009a6a:	469a      	mov	sl, r3
 8009a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a70:	b10a      	cbz	r2, 8009a76 <_vfiprintf_r+0xa2>
 8009a72:	2a25      	cmp	r2, #37	; 0x25
 8009a74:	d1f9      	bne.n	8009a6a <_vfiprintf_r+0x96>
 8009a76:	ebba 0b04 	subs.w	fp, sl, r4
 8009a7a:	d00b      	beq.n	8009a94 <_vfiprintf_r+0xc0>
 8009a7c:	465b      	mov	r3, fp
 8009a7e:	4622      	mov	r2, r4
 8009a80:	4629      	mov	r1, r5
 8009a82:	4630      	mov	r0, r6
 8009a84:	f7ff ff93 	bl	80099ae <__sfputs_r>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	f000 80aa 	beq.w	8009be2 <_vfiprintf_r+0x20e>
 8009a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a90:	445a      	add	r2, fp
 8009a92:	9209      	str	r2, [sp, #36]	; 0x24
 8009a94:	f89a 3000 	ldrb.w	r3, [sl]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80a2 	beq.w	8009be2 <_vfiprintf_r+0x20e>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa8:	f10a 0a01 	add.w	sl, sl, #1
 8009aac:	9304      	str	r3, [sp, #16]
 8009aae:	9307      	str	r3, [sp, #28]
 8009ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ab6:	4654      	mov	r4, sl
 8009ab8:	2205      	movs	r2, #5
 8009aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abe:	4858      	ldr	r0, [pc, #352]	; (8009c20 <_vfiprintf_r+0x24c>)
 8009ac0:	f000 fd32 	bl	800a528 <memchr>
 8009ac4:	9a04      	ldr	r2, [sp, #16]
 8009ac6:	b9d8      	cbnz	r0, 8009b00 <_vfiprintf_r+0x12c>
 8009ac8:	06d1      	lsls	r1, r2, #27
 8009aca:	bf44      	itt	mi
 8009acc:	2320      	movmi	r3, #32
 8009ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad2:	0713      	lsls	r3, r2, #28
 8009ad4:	bf44      	itt	mi
 8009ad6:	232b      	movmi	r3, #43	; 0x2b
 8009ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009adc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae2:	d015      	beq.n	8009b10 <_vfiprintf_r+0x13c>
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	f04f 0c0a 	mov.w	ip, #10
 8009aec:	9a07      	ldr	r2, [sp, #28]
 8009aee:	4621      	mov	r1, r4
 8009af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009af4:	3b30      	subs	r3, #48	; 0x30
 8009af6:	2b09      	cmp	r3, #9
 8009af8:	d94e      	bls.n	8009b98 <_vfiprintf_r+0x1c4>
 8009afa:	b1b0      	cbz	r0, 8009b2a <_vfiprintf_r+0x156>
 8009afc:	9207      	str	r2, [sp, #28]
 8009afe:	e014      	b.n	8009b2a <_vfiprintf_r+0x156>
 8009b00:	eba0 0308 	sub.w	r3, r0, r8
 8009b04:	fa09 f303 	lsl.w	r3, r9, r3
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	46a2      	mov	sl, r4
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	e7d2      	b.n	8009ab6 <_vfiprintf_r+0xe2>
 8009b10:	9b03      	ldr	r3, [sp, #12]
 8009b12:	1d19      	adds	r1, r3, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	9103      	str	r1, [sp, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bfbb      	ittet	lt
 8009b1c:	425b      	neglt	r3, r3
 8009b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b22:	9307      	strge	r3, [sp, #28]
 8009b24:	9307      	strlt	r3, [sp, #28]
 8009b26:	bfb8      	it	lt
 8009b28:	9204      	strlt	r2, [sp, #16]
 8009b2a:	7823      	ldrb	r3, [r4, #0]
 8009b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b2e:	d10c      	bne.n	8009b4a <_vfiprintf_r+0x176>
 8009b30:	7863      	ldrb	r3, [r4, #1]
 8009b32:	2b2a      	cmp	r3, #42	; 0x2a
 8009b34:	d135      	bne.n	8009ba2 <_vfiprintf_r+0x1ce>
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	3402      	adds	r4, #2
 8009b3a:	1d1a      	adds	r2, r3, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	9203      	str	r2, [sp, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bfb8      	it	lt
 8009b44:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b48:	9305      	str	r3, [sp, #20]
 8009b4a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009c24 <_vfiprintf_r+0x250>
 8009b4e:	2203      	movs	r2, #3
 8009b50:	4650      	mov	r0, sl
 8009b52:	7821      	ldrb	r1, [r4, #0]
 8009b54:	f000 fce8 	bl	800a528 <memchr>
 8009b58:	b140      	cbz	r0, 8009b6c <_vfiprintf_r+0x198>
 8009b5a:	2340      	movs	r3, #64	; 0x40
 8009b5c:	eba0 000a 	sub.w	r0, r0, sl
 8009b60:	fa03 f000 	lsl.w	r0, r3, r0
 8009b64:	9b04      	ldr	r3, [sp, #16]
 8009b66:	3401      	adds	r4, #1
 8009b68:	4303      	orrs	r3, r0
 8009b6a:	9304      	str	r3, [sp, #16]
 8009b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b70:	2206      	movs	r2, #6
 8009b72:	482d      	ldr	r0, [pc, #180]	; (8009c28 <_vfiprintf_r+0x254>)
 8009b74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b78:	f000 fcd6 	bl	800a528 <memchr>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d03f      	beq.n	8009c00 <_vfiprintf_r+0x22c>
 8009b80:	4b2a      	ldr	r3, [pc, #168]	; (8009c2c <_vfiprintf_r+0x258>)
 8009b82:	bb1b      	cbnz	r3, 8009bcc <_vfiprintf_r+0x1f8>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	3307      	adds	r3, #7
 8009b88:	f023 0307 	bic.w	r3, r3, #7
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	9303      	str	r3, [sp, #12]
 8009b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b92:	443b      	add	r3, r7
 8009b94:	9309      	str	r3, [sp, #36]	; 0x24
 8009b96:	e767      	b.n	8009a68 <_vfiprintf_r+0x94>
 8009b98:	460c      	mov	r4, r1
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba0:	e7a5      	b.n	8009aee <_vfiprintf_r+0x11a>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f04f 0c0a 	mov.w	ip, #10
 8009ba8:	4619      	mov	r1, r3
 8009baa:	3401      	adds	r4, #1
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb4:	3a30      	subs	r2, #48	; 0x30
 8009bb6:	2a09      	cmp	r2, #9
 8009bb8:	d903      	bls.n	8009bc2 <_vfiprintf_r+0x1ee>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0c5      	beq.n	8009b4a <_vfiprintf_r+0x176>
 8009bbe:	9105      	str	r1, [sp, #20]
 8009bc0:	e7c3      	b.n	8009b4a <_vfiprintf_r+0x176>
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bca:	e7f0      	b.n	8009bae <_vfiprintf_r+0x1da>
 8009bcc:	ab03      	add	r3, sp, #12
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	4b16      	ldr	r3, [pc, #88]	; (8009c30 <_vfiprintf_r+0x25c>)
 8009bd6:	a904      	add	r1, sp, #16
 8009bd8:	f3af 8000 	nop.w
 8009bdc:	4607      	mov	r7, r0
 8009bde:	1c78      	adds	r0, r7, #1
 8009be0:	d1d6      	bne.n	8009b90 <_vfiprintf_r+0x1bc>
 8009be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009be4:	07d9      	lsls	r1, r3, #31
 8009be6:	d405      	bmi.n	8009bf4 <_vfiprintf_r+0x220>
 8009be8:	89ab      	ldrh	r3, [r5, #12]
 8009bea:	059a      	lsls	r2, r3, #22
 8009bec:	d402      	bmi.n	8009bf4 <_vfiprintf_r+0x220>
 8009bee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bf0:	f000 fc33 	bl	800a45a <__retarget_lock_release_recursive>
 8009bf4:	89ab      	ldrh	r3, [r5, #12]
 8009bf6:	065b      	lsls	r3, r3, #25
 8009bf8:	f53f af12 	bmi.w	8009a20 <_vfiprintf_r+0x4c>
 8009bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bfe:	e711      	b.n	8009a24 <_vfiprintf_r+0x50>
 8009c00:	ab03      	add	r3, sp, #12
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	462a      	mov	r2, r5
 8009c06:	4630      	mov	r0, r6
 8009c08:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <_vfiprintf_r+0x25c>)
 8009c0a:	a904      	add	r1, sp, #16
 8009c0c:	f000 f882 	bl	8009d14 <_printf_i>
 8009c10:	e7e4      	b.n	8009bdc <_vfiprintf_r+0x208>
 8009c12:	bf00      	nop
 8009c14:	0800ae40 	.word	0x0800ae40
 8009c18:	0800ae60 	.word	0x0800ae60
 8009c1c:	0800ae20 	.word	0x0800ae20
 8009c20:	0800adeb 	.word	0x0800adeb
 8009c24:	0800adf1 	.word	0x0800adf1
 8009c28:	0800adf5 	.word	0x0800adf5
 8009c2c:	00000000 	.word	0x00000000
 8009c30:	080099af 	.word	0x080099af

08009c34 <_printf_common>:
 8009c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c38:	4616      	mov	r6, r2
 8009c3a:	4699      	mov	r9, r3
 8009c3c:	688a      	ldr	r2, [r1, #8]
 8009c3e:	690b      	ldr	r3, [r1, #16]
 8009c40:	4607      	mov	r7, r0
 8009c42:	4293      	cmp	r3, r2
 8009c44:	bfb8      	it	lt
 8009c46:	4613      	movlt	r3, r2
 8009c48:	6033      	str	r3, [r6, #0]
 8009c4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c4e:	460c      	mov	r4, r1
 8009c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c54:	b10a      	cbz	r2, 8009c5a <_printf_common+0x26>
 8009c56:	3301      	adds	r3, #1
 8009c58:	6033      	str	r3, [r6, #0]
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	0699      	lsls	r1, r3, #26
 8009c5e:	bf42      	ittt	mi
 8009c60:	6833      	ldrmi	r3, [r6, #0]
 8009c62:	3302      	addmi	r3, #2
 8009c64:	6033      	strmi	r3, [r6, #0]
 8009c66:	6825      	ldr	r5, [r4, #0]
 8009c68:	f015 0506 	ands.w	r5, r5, #6
 8009c6c:	d106      	bne.n	8009c7c <_printf_common+0x48>
 8009c6e:	f104 0a19 	add.w	sl, r4, #25
 8009c72:	68e3      	ldr	r3, [r4, #12]
 8009c74:	6832      	ldr	r2, [r6, #0]
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	42ab      	cmp	r3, r5
 8009c7a:	dc28      	bgt.n	8009cce <_printf_common+0x9a>
 8009c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c80:	1e13      	subs	r3, r2, #0
 8009c82:	6822      	ldr	r2, [r4, #0]
 8009c84:	bf18      	it	ne
 8009c86:	2301      	movne	r3, #1
 8009c88:	0692      	lsls	r2, r2, #26
 8009c8a:	d42d      	bmi.n	8009ce8 <_printf_common+0xb4>
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c94:	47c0      	blx	r8
 8009c96:	3001      	adds	r0, #1
 8009c98:	d020      	beq.n	8009cdc <_printf_common+0xa8>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	68e5      	ldr	r5, [r4, #12]
 8009c9e:	f003 0306 	and.w	r3, r3, #6
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	bf18      	it	ne
 8009ca6:	2500      	movne	r5, #0
 8009ca8:	6832      	ldr	r2, [r6, #0]
 8009caa:	f04f 0600 	mov.w	r6, #0
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	bf08      	it	eq
 8009cb2:	1aad      	subeq	r5, r5, r2
 8009cb4:	6922      	ldr	r2, [r4, #16]
 8009cb6:	bf08      	it	eq
 8009cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	bfc4      	itt	gt
 8009cc0:	1a9b      	subgt	r3, r3, r2
 8009cc2:	18ed      	addgt	r5, r5, r3
 8009cc4:	341a      	adds	r4, #26
 8009cc6:	42b5      	cmp	r5, r6
 8009cc8:	d11a      	bne.n	8009d00 <_printf_common+0xcc>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e008      	b.n	8009ce0 <_printf_common+0xac>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4652      	mov	r2, sl
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	47c0      	blx	r8
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d103      	bne.n	8009ce4 <_printf_common+0xb0>
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	e7c4      	b.n	8009c72 <_printf_common+0x3e>
 8009ce8:	2030      	movs	r0, #48	; 0x30
 8009cea:	18e1      	adds	r1, r4, r3
 8009cec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cf6:	4422      	add	r2, r4
 8009cf8:	3302      	adds	r3, #2
 8009cfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cfe:	e7c5      	b.n	8009c8c <_printf_common+0x58>
 8009d00:	2301      	movs	r3, #1
 8009d02:	4622      	mov	r2, r4
 8009d04:	4649      	mov	r1, r9
 8009d06:	4638      	mov	r0, r7
 8009d08:	47c0      	blx	r8
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d0e6      	beq.n	8009cdc <_printf_common+0xa8>
 8009d0e:	3601      	adds	r6, #1
 8009d10:	e7d9      	b.n	8009cc6 <_printf_common+0x92>
	...

08009d14 <_printf_i>:
 8009d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d18:	7e0f      	ldrb	r7, [r1, #24]
 8009d1a:	4691      	mov	r9, r2
 8009d1c:	2f78      	cmp	r7, #120	; 0x78
 8009d1e:	4680      	mov	r8, r0
 8009d20:	460c      	mov	r4, r1
 8009d22:	469a      	mov	sl, r3
 8009d24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d2a:	d807      	bhi.n	8009d3c <_printf_i+0x28>
 8009d2c:	2f62      	cmp	r7, #98	; 0x62
 8009d2e:	d80a      	bhi.n	8009d46 <_printf_i+0x32>
 8009d30:	2f00      	cmp	r7, #0
 8009d32:	f000 80d9 	beq.w	8009ee8 <_printf_i+0x1d4>
 8009d36:	2f58      	cmp	r7, #88	; 0x58
 8009d38:	f000 80a4 	beq.w	8009e84 <_printf_i+0x170>
 8009d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d44:	e03a      	b.n	8009dbc <_printf_i+0xa8>
 8009d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d4a:	2b15      	cmp	r3, #21
 8009d4c:	d8f6      	bhi.n	8009d3c <_printf_i+0x28>
 8009d4e:	a101      	add	r1, pc, #4	; (adr r1, 8009d54 <_printf_i+0x40>)
 8009d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d54:	08009dad 	.word	0x08009dad
 8009d58:	08009dc1 	.word	0x08009dc1
 8009d5c:	08009d3d 	.word	0x08009d3d
 8009d60:	08009d3d 	.word	0x08009d3d
 8009d64:	08009d3d 	.word	0x08009d3d
 8009d68:	08009d3d 	.word	0x08009d3d
 8009d6c:	08009dc1 	.word	0x08009dc1
 8009d70:	08009d3d 	.word	0x08009d3d
 8009d74:	08009d3d 	.word	0x08009d3d
 8009d78:	08009d3d 	.word	0x08009d3d
 8009d7c:	08009d3d 	.word	0x08009d3d
 8009d80:	08009ecf 	.word	0x08009ecf
 8009d84:	08009df1 	.word	0x08009df1
 8009d88:	08009eb1 	.word	0x08009eb1
 8009d8c:	08009d3d 	.word	0x08009d3d
 8009d90:	08009d3d 	.word	0x08009d3d
 8009d94:	08009ef1 	.word	0x08009ef1
 8009d98:	08009d3d 	.word	0x08009d3d
 8009d9c:	08009df1 	.word	0x08009df1
 8009da0:	08009d3d 	.word	0x08009d3d
 8009da4:	08009d3d 	.word	0x08009d3d
 8009da8:	08009eb9 	.word	0x08009eb9
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	602a      	str	r2, [r5, #0]
 8009db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e0a4      	b.n	8009f0a <_printf_i+0x1f6>
 8009dc0:	6820      	ldr	r0, [r4, #0]
 8009dc2:	6829      	ldr	r1, [r5, #0]
 8009dc4:	0606      	lsls	r6, r0, #24
 8009dc6:	f101 0304 	add.w	r3, r1, #4
 8009dca:	d50a      	bpl.n	8009de2 <_printf_i+0xce>
 8009dcc:	680e      	ldr	r6, [r1, #0]
 8009dce:	602b      	str	r3, [r5, #0]
 8009dd0:	2e00      	cmp	r6, #0
 8009dd2:	da03      	bge.n	8009ddc <_printf_i+0xc8>
 8009dd4:	232d      	movs	r3, #45	; 0x2d
 8009dd6:	4276      	negs	r6, r6
 8009dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ddc:	230a      	movs	r3, #10
 8009dde:	485e      	ldr	r0, [pc, #376]	; (8009f58 <_printf_i+0x244>)
 8009de0:	e019      	b.n	8009e16 <_printf_i+0x102>
 8009de2:	680e      	ldr	r6, [r1, #0]
 8009de4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	bf18      	it	ne
 8009dec:	b236      	sxthne	r6, r6
 8009dee:	e7ef      	b.n	8009dd0 <_printf_i+0xbc>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	6820      	ldr	r0, [r4, #0]
 8009df4:	1d19      	adds	r1, r3, #4
 8009df6:	6029      	str	r1, [r5, #0]
 8009df8:	0601      	lsls	r1, r0, #24
 8009dfa:	d501      	bpl.n	8009e00 <_printf_i+0xec>
 8009dfc:	681e      	ldr	r6, [r3, #0]
 8009dfe:	e002      	b.n	8009e06 <_printf_i+0xf2>
 8009e00:	0646      	lsls	r6, r0, #25
 8009e02:	d5fb      	bpl.n	8009dfc <_printf_i+0xe8>
 8009e04:	881e      	ldrh	r6, [r3, #0]
 8009e06:	2f6f      	cmp	r7, #111	; 0x6f
 8009e08:	bf0c      	ite	eq
 8009e0a:	2308      	moveq	r3, #8
 8009e0c:	230a      	movne	r3, #10
 8009e0e:	4852      	ldr	r0, [pc, #328]	; (8009f58 <_printf_i+0x244>)
 8009e10:	2100      	movs	r1, #0
 8009e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e16:	6865      	ldr	r5, [r4, #4]
 8009e18:	2d00      	cmp	r5, #0
 8009e1a:	bfa8      	it	ge
 8009e1c:	6821      	ldrge	r1, [r4, #0]
 8009e1e:	60a5      	str	r5, [r4, #8]
 8009e20:	bfa4      	itt	ge
 8009e22:	f021 0104 	bicge.w	r1, r1, #4
 8009e26:	6021      	strge	r1, [r4, #0]
 8009e28:	b90e      	cbnz	r6, 8009e2e <_printf_i+0x11a>
 8009e2a:	2d00      	cmp	r5, #0
 8009e2c:	d04d      	beq.n	8009eca <_printf_i+0x1b6>
 8009e2e:	4615      	mov	r5, r2
 8009e30:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e34:	fb03 6711 	mls	r7, r3, r1, r6
 8009e38:	5dc7      	ldrb	r7, [r0, r7]
 8009e3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e3e:	4637      	mov	r7, r6
 8009e40:	42bb      	cmp	r3, r7
 8009e42:	460e      	mov	r6, r1
 8009e44:	d9f4      	bls.n	8009e30 <_printf_i+0x11c>
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d10b      	bne.n	8009e62 <_printf_i+0x14e>
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	07de      	lsls	r6, r3, #31
 8009e4e:	d508      	bpl.n	8009e62 <_printf_i+0x14e>
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	6861      	ldr	r1, [r4, #4]
 8009e54:	4299      	cmp	r1, r3
 8009e56:	bfde      	ittt	le
 8009e58:	2330      	movle	r3, #48	; 0x30
 8009e5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e62:	1b52      	subs	r2, r2, r5
 8009e64:	6122      	str	r2, [r4, #16]
 8009e66:	464b      	mov	r3, r9
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	f8cd a000 	str.w	sl, [sp]
 8009e70:	aa03      	add	r2, sp, #12
 8009e72:	f7ff fedf 	bl	8009c34 <_printf_common>
 8009e76:	3001      	adds	r0, #1
 8009e78:	d14c      	bne.n	8009f14 <_printf_i+0x200>
 8009e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7e:	b004      	add	sp, #16
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	4834      	ldr	r0, [pc, #208]	; (8009f58 <_printf_i+0x244>)
 8009e86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e8a:	6829      	ldr	r1, [r5, #0]
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e92:	6029      	str	r1, [r5, #0]
 8009e94:	061d      	lsls	r5, r3, #24
 8009e96:	d514      	bpl.n	8009ec2 <_printf_i+0x1ae>
 8009e98:	07df      	lsls	r7, r3, #31
 8009e9a:	bf44      	itt	mi
 8009e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8009ea0:	6023      	strmi	r3, [r4, #0]
 8009ea2:	b91e      	cbnz	r6, 8009eac <_printf_i+0x198>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	f023 0320 	bic.w	r3, r3, #32
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	2310      	movs	r3, #16
 8009eae:	e7af      	b.n	8009e10 <_printf_i+0xfc>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	f043 0320 	orr.w	r3, r3, #32
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	2378      	movs	r3, #120	; 0x78
 8009eba:	4828      	ldr	r0, [pc, #160]	; (8009f5c <_printf_i+0x248>)
 8009ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ec0:	e7e3      	b.n	8009e8a <_printf_i+0x176>
 8009ec2:	0659      	lsls	r1, r3, #25
 8009ec4:	bf48      	it	mi
 8009ec6:	b2b6      	uxthmi	r6, r6
 8009ec8:	e7e6      	b.n	8009e98 <_printf_i+0x184>
 8009eca:	4615      	mov	r5, r2
 8009ecc:	e7bb      	b.n	8009e46 <_printf_i+0x132>
 8009ece:	682b      	ldr	r3, [r5, #0]
 8009ed0:	6826      	ldr	r6, [r4, #0]
 8009ed2:	1d18      	adds	r0, r3, #4
 8009ed4:	6961      	ldr	r1, [r4, #20]
 8009ed6:	6028      	str	r0, [r5, #0]
 8009ed8:	0635      	lsls	r5, r6, #24
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	d501      	bpl.n	8009ee2 <_printf_i+0x1ce>
 8009ede:	6019      	str	r1, [r3, #0]
 8009ee0:	e002      	b.n	8009ee8 <_printf_i+0x1d4>
 8009ee2:	0670      	lsls	r0, r6, #25
 8009ee4:	d5fb      	bpl.n	8009ede <_printf_i+0x1ca>
 8009ee6:	8019      	strh	r1, [r3, #0]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4615      	mov	r5, r2
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	e7ba      	b.n	8009e66 <_printf_i+0x152>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	1d1a      	adds	r2, r3, #4
 8009ef6:	602a      	str	r2, [r5, #0]
 8009ef8:	681d      	ldr	r5, [r3, #0]
 8009efa:	6862      	ldr	r2, [r4, #4]
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 fb13 	bl	800a528 <memchr>
 8009f02:	b108      	cbz	r0, 8009f08 <_printf_i+0x1f4>
 8009f04:	1b40      	subs	r0, r0, r5
 8009f06:	6060      	str	r0, [r4, #4]
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	6123      	str	r3, [r4, #16]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f12:	e7a8      	b.n	8009e66 <_printf_i+0x152>
 8009f14:	462a      	mov	r2, r5
 8009f16:	4649      	mov	r1, r9
 8009f18:	4640      	mov	r0, r8
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	47d0      	blx	sl
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d0ab      	beq.n	8009e7a <_printf_i+0x166>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	079b      	lsls	r3, r3, #30
 8009f26:	d413      	bmi.n	8009f50 <_printf_i+0x23c>
 8009f28:	68e0      	ldr	r0, [r4, #12]
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	4298      	cmp	r0, r3
 8009f2e:	bfb8      	it	lt
 8009f30:	4618      	movlt	r0, r3
 8009f32:	e7a4      	b.n	8009e7e <_printf_i+0x16a>
 8009f34:	2301      	movs	r3, #1
 8009f36:	4632      	mov	r2, r6
 8009f38:	4649      	mov	r1, r9
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	47d0      	blx	sl
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d09b      	beq.n	8009e7a <_printf_i+0x166>
 8009f42:	3501      	adds	r5, #1
 8009f44:	68e3      	ldr	r3, [r4, #12]
 8009f46:	9903      	ldr	r1, [sp, #12]
 8009f48:	1a5b      	subs	r3, r3, r1
 8009f4a:	42ab      	cmp	r3, r5
 8009f4c:	dcf2      	bgt.n	8009f34 <_printf_i+0x220>
 8009f4e:	e7eb      	b.n	8009f28 <_printf_i+0x214>
 8009f50:	2500      	movs	r5, #0
 8009f52:	f104 0619 	add.w	r6, r4, #25
 8009f56:	e7f5      	b.n	8009f44 <_printf_i+0x230>
 8009f58:	0800adfc 	.word	0x0800adfc
 8009f5c:	0800ae0d 	.word	0x0800ae0d

08009f60 <__swbuf_r>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	460e      	mov	r6, r1
 8009f64:	4614      	mov	r4, r2
 8009f66:	4605      	mov	r5, r0
 8009f68:	b118      	cbz	r0, 8009f72 <__swbuf_r+0x12>
 8009f6a:	6983      	ldr	r3, [r0, #24]
 8009f6c:	b90b      	cbnz	r3, 8009f72 <__swbuf_r+0x12>
 8009f6e:	f000 f9d5 	bl	800a31c <__sinit>
 8009f72:	4b21      	ldr	r3, [pc, #132]	; (8009ff8 <__swbuf_r+0x98>)
 8009f74:	429c      	cmp	r4, r3
 8009f76:	d12b      	bne.n	8009fd0 <__swbuf_r+0x70>
 8009f78:	686c      	ldr	r4, [r5, #4]
 8009f7a:	69a3      	ldr	r3, [r4, #24]
 8009f7c:	60a3      	str	r3, [r4, #8]
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	071a      	lsls	r2, r3, #28
 8009f82:	d52f      	bpl.n	8009fe4 <__swbuf_r+0x84>
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	b36b      	cbz	r3, 8009fe4 <__swbuf_r+0x84>
 8009f88:	6923      	ldr	r3, [r4, #16]
 8009f8a:	6820      	ldr	r0, [r4, #0]
 8009f8c:	b2f6      	uxtb	r6, r6
 8009f8e:	1ac0      	subs	r0, r0, r3
 8009f90:	6963      	ldr	r3, [r4, #20]
 8009f92:	4637      	mov	r7, r6
 8009f94:	4283      	cmp	r3, r0
 8009f96:	dc04      	bgt.n	8009fa2 <__swbuf_r+0x42>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f000 f92a 	bl	800a1f4 <_fflush_r>
 8009fa0:	bb30      	cbnz	r0, 8009ff0 <__swbuf_r+0x90>
 8009fa2:	68a3      	ldr	r3, [r4, #8]
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	60a3      	str	r3, [r4, #8]
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	6022      	str	r2, [r4, #0]
 8009fb0:	701e      	strb	r6, [r3, #0]
 8009fb2:	6963      	ldr	r3, [r4, #20]
 8009fb4:	4283      	cmp	r3, r0
 8009fb6:	d004      	beq.n	8009fc2 <__swbuf_r+0x62>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	07db      	lsls	r3, r3, #31
 8009fbc:	d506      	bpl.n	8009fcc <__swbuf_r+0x6c>
 8009fbe:	2e0a      	cmp	r6, #10
 8009fc0:	d104      	bne.n	8009fcc <__swbuf_r+0x6c>
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 f915 	bl	800a1f4 <_fflush_r>
 8009fca:	b988      	cbnz	r0, 8009ff0 <__swbuf_r+0x90>
 8009fcc:	4638      	mov	r0, r7
 8009fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <__swbuf_r+0x9c>)
 8009fd2:	429c      	cmp	r4, r3
 8009fd4:	d101      	bne.n	8009fda <__swbuf_r+0x7a>
 8009fd6:	68ac      	ldr	r4, [r5, #8]
 8009fd8:	e7cf      	b.n	8009f7a <__swbuf_r+0x1a>
 8009fda:	4b09      	ldr	r3, [pc, #36]	; (800a000 <__swbuf_r+0xa0>)
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	bf08      	it	eq
 8009fe0:	68ec      	ldreq	r4, [r5, #12]
 8009fe2:	e7ca      	b.n	8009f7a <__swbuf_r+0x1a>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 f80c 	bl	800a004 <__swsetup_r>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d0cb      	beq.n	8009f88 <__swbuf_r+0x28>
 8009ff0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ff4:	e7ea      	b.n	8009fcc <__swbuf_r+0x6c>
 8009ff6:	bf00      	nop
 8009ff8:	0800ae40 	.word	0x0800ae40
 8009ffc:	0800ae60 	.word	0x0800ae60
 800a000:	0800ae20 	.word	0x0800ae20

0800a004 <__swsetup_r>:
 800a004:	4b32      	ldr	r3, [pc, #200]	; (800a0d0 <__swsetup_r+0xcc>)
 800a006:	b570      	push	{r4, r5, r6, lr}
 800a008:	681d      	ldr	r5, [r3, #0]
 800a00a:	4606      	mov	r6, r0
 800a00c:	460c      	mov	r4, r1
 800a00e:	b125      	cbz	r5, 800a01a <__swsetup_r+0x16>
 800a010:	69ab      	ldr	r3, [r5, #24]
 800a012:	b913      	cbnz	r3, 800a01a <__swsetup_r+0x16>
 800a014:	4628      	mov	r0, r5
 800a016:	f000 f981 	bl	800a31c <__sinit>
 800a01a:	4b2e      	ldr	r3, [pc, #184]	; (800a0d4 <__swsetup_r+0xd0>)
 800a01c:	429c      	cmp	r4, r3
 800a01e:	d10f      	bne.n	800a040 <__swsetup_r+0x3c>
 800a020:	686c      	ldr	r4, [r5, #4]
 800a022:	89a3      	ldrh	r3, [r4, #12]
 800a024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a028:	0719      	lsls	r1, r3, #28
 800a02a:	d42c      	bmi.n	800a086 <__swsetup_r+0x82>
 800a02c:	06dd      	lsls	r5, r3, #27
 800a02e:	d411      	bmi.n	800a054 <__swsetup_r+0x50>
 800a030:	2309      	movs	r3, #9
 800a032:	6033      	str	r3, [r6, #0]
 800a034:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	e03e      	b.n	800a0be <__swsetup_r+0xba>
 800a040:	4b25      	ldr	r3, [pc, #148]	; (800a0d8 <__swsetup_r+0xd4>)
 800a042:	429c      	cmp	r4, r3
 800a044:	d101      	bne.n	800a04a <__swsetup_r+0x46>
 800a046:	68ac      	ldr	r4, [r5, #8]
 800a048:	e7eb      	b.n	800a022 <__swsetup_r+0x1e>
 800a04a:	4b24      	ldr	r3, [pc, #144]	; (800a0dc <__swsetup_r+0xd8>)
 800a04c:	429c      	cmp	r4, r3
 800a04e:	bf08      	it	eq
 800a050:	68ec      	ldreq	r4, [r5, #12]
 800a052:	e7e6      	b.n	800a022 <__swsetup_r+0x1e>
 800a054:	0758      	lsls	r0, r3, #29
 800a056:	d512      	bpl.n	800a07e <__swsetup_r+0x7a>
 800a058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a05a:	b141      	cbz	r1, 800a06e <__swsetup_r+0x6a>
 800a05c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a060:	4299      	cmp	r1, r3
 800a062:	d002      	beq.n	800a06a <__swsetup_r+0x66>
 800a064:	4630      	mov	r0, r6
 800a066:	f7ff f90f 	bl	8009288 <_free_r>
 800a06a:	2300      	movs	r3, #0
 800a06c:	6363      	str	r3, [r4, #52]	; 0x34
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	2300      	movs	r3, #0
 800a078:	6063      	str	r3, [r4, #4]
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	f043 0308 	orr.w	r3, r3, #8
 800a084:	81a3      	strh	r3, [r4, #12]
 800a086:	6923      	ldr	r3, [r4, #16]
 800a088:	b94b      	cbnz	r3, 800a09e <__swsetup_r+0x9a>
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a094:	d003      	beq.n	800a09e <__swsetup_r+0x9a>
 800a096:	4621      	mov	r1, r4
 800a098:	4630      	mov	r0, r6
 800a09a:	f000 fa05 	bl	800a4a8 <__smakebuf_r>
 800a09e:	89a0      	ldrh	r0, [r4, #12]
 800a0a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0a4:	f010 0301 	ands.w	r3, r0, #1
 800a0a8:	d00a      	beq.n	800a0c0 <__swsetup_r+0xbc>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60a3      	str	r3, [r4, #8]
 800a0ae:	6963      	ldr	r3, [r4, #20]
 800a0b0:	425b      	negs	r3, r3
 800a0b2:	61a3      	str	r3, [r4, #24]
 800a0b4:	6923      	ldr	r3, [r4, #16]
 800a0b6:	b943      	cbnz	r3, 800a0ca <__swsetup_r+0xc6>
 800a0b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0bc:	d1ba      	bne.n	800a034 <__swsetup_r+0x30>
 800a0be:	bd70      	pop	{r4, r5, r6, pc}
 800a0c0:	0781      	lsls	r1, r0, #30
 800a0c2:	bf58      	it	pl
 800a0c4:	6963      	ldrpl	r3, [r4, #20]
 800a0c6:	60a3      	str	r3, [r4, #8]
 800a0c8:	e7f4      	b.n	800a0b4 <__swsetup_r+0xb0>
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	e7f7      	b.n	800a0be <__swsetup_r+0xba>
 800a0ce:	bf00      	nop
 800a0d0:	200000fc 	.word	0x200000fc
 800a0d4:	0800ae40 	.word	0x0800ae40
 800a0d8:	0800ae60 	.word	0x0800ae60
 800a0dc:	0800ae20 	.word	0x0800ae20

0800a0e0 <abort>:
 800a0e0:	2006      	movs	r0, #6
 800a0e2:	b508      	push	{r3, lr}
 800a0e4:	f000 faa0 	bl	800a628 <raise>
 800a0e8:	2001      	movs	r0, #1
 800a0ea:	f7fb f8b0 	bl	800524e <_exit>
	...

0800a0f0 <__sflush_r>:
 800a0f0:	898a      	ldrh	r2, [r1, #12]
 800a0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	0710      	lsls	r0, r2, #28
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	d457      	bmi.n	800a1ac <__sflush_r+0xbc>
 800a0fc:	684b      	ldr	r3, [r1, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	dc04      	bgt.n	800a10c <__sflush_r+0x1c>
 800a102:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a104:	2b00      	cmp	r3, #0
 800a106:	dc01      	bgt.n	800a10c <__sflush_r+0x1c>
 800a108:	2000      	movs	r0, #0
 800a10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a10c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a10e:	2e00      	cmp	r6, #0
 800a110:	d0fa      	beq.n	800a108 <__sflush_r+0x18>
 800a112:	2300      	movs	r3, #0
 800a114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a118:	682f      	ldr	r7, [r5, #0]
 800a11a:	602b      	str	r3, [r5, #0]
 800a11c:	d032      	beq.n	800a184 <__sflush_r+0x94>
 800a11e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	075a      	lsls	r2, r3, #29
 800a124:	d505      	bpl.n	800a132 <__sflush_r+0x42>
 800a126:	6863      	ldr	r3, [r4, #4]
 800a128:	1ac0      	subs	r0, r0, r3
 800a12a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a12c:	b10b      	cbz	r3, 800a132 <__sflush_r+0x42>
 800a12e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a130:	1ac0      	subs	r0, r0, r3
 800a132:	2300      	movs	r3, #0
 800a134:	4602      	mov	r2, r0
 800a136:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a138:	4628      	mov	r0, r5
 800a13a:	6a21      	ldr	r1, [r4, #32]
 800a13c:	47b0      	blx	r6
 800a13e:	1c43      	adds	r3, r0, #1
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	d106      	bne.n	800a152 <__sflush_r+0x62>
 800a144:	6829      	ldr	r1, [r5, #0]
 800a146:	291d      	cmp	r1, #29
 800a148:	d82c      	bhi.n	800a1a4 <__sflush_r+0xb4>
 800a14a:	4a29      	ldr	r2, [pc, #164]	; (800a1f0 <__sflush_r+0x100>)
 800a14c:	40ca      	lsrs	r2, r1
 800a14e:	07d6      	lsls	r6, r2, #31
 800a150:	d528      	bpl.n	800a1a4 <__sflush_r+0xb4>
 800a152:	2200      	movs	r2, #0
 800a154:	6062      	str	r2, [r4, #4]
 800a156:	6922      	ldr	r2, [r4, #16]
 800a158:	04d9      	lsls	r1, r3, #19
 800a15a:	6022      	str	r2, [r4, #0]
 800a15c:	d504      	bpl.n	800a168 <__sflush_r+0x78>
 800a15e:	1c42      	adds	r2, r0, #1
 800a160:	d101      	bne.n	800a166 <__sflush_r+0x76>
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	b903      	cbnz	r3, 800a168 <__sflush_r+0x78>
 800a166:	6560      	str	r0, [r4, #84]	; 0x54
 800a168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a16a:	602f      	str	r7, [r5, #0]
 800a16c:	2900      	cmp	r1, #0
 800a16e:	d0cb      	beq.n	800a108 <__sflush_r+0x18>
 800a170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a174:	4299      	cmp	r1, r3
 800a176:	d002      	beq.n	800a17e <__sflush_r+0x8e>
 800a178:	4628      	mov	r0, r5
 800a17a:	f7ff f885 	bl	8009288 <_free_r>
 800a17e:	2000      	movs	r0, #0
 800a180:	6360      	str	r0, [r4, #52]	; 0x34
 800a182:	e7c2      	b.n	800a10a <__sflush_r+0x1a>
 800a184:	6a21      	ldr	r1, [r4, #32]
 800a186:	2301      	movs	r3, #1
 800a188:	4628      	mov	r0, r5
 800a18a:	47b0      	blx	r6
 800a18c:	1c41      	adds	r1, r0, #1
 800a18e:	d1c7      	bne.n	800a120 <__sflush_r+0x30>
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0c4      	beq.n	800a120 <__sflush_r+0x30>
 800a196:	2b1d      	cmp	r3, #29
 800a198:	d001      	beq.n	800a19e <__sflush_r+0xae>
 800a19a:	2b16      	cmp	r3, #22
 800a19c:	d101      	bne.n	800a1a2 <__sflush_r+0xb2>
 800a19e:	602f      	str	r7, [r5, #0]
 800a1a0:	e7b2      	b.n	800a108 <__sflush_r+0x18>
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	e7ae      	b.n	800a10a <__sflush_r+0x1a>
 800a1ac:	690f      	ldr	r7, [r1, #16]
 800a1ae:	2f00      	cmp	r7, #0
 800a1b0:	d0aa      	beq.n	800a108 <__sflush_r+0x18>
 800a1b2:	0793      	lsls	r3, r2, #30
 800a1b4:	bf18      	it	ne
 800a1b6:	2300      	movne	r3, #0
 800a1b8:	680e      	ldr	r6, [r1, #0]
 800a1ba:	bf08      	it	eq
 800a1bc:	694b      	ldreq	r3, [r1, #20]
 800a1be:	1bf6      	subs	r6, r6, r7
 800a1c0:	600f      	str	r7, [r1, #0]
 800a1c2:	608b      	str	r3, [r1, #8]
 800a1c4:	2e00      	cmp	r6, #0
 800a1c6:	dd9f      	ble.n	800a108 <__sflush_r+0x18>
 800a1c8:	4633      	mov	r3, r6
 800a1ca:	463a      	mov	r2, r7
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	6a21      	ldr	r1, [r4, #32]
 800a1d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a1d4:	47e0      	blx	ip
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	dc06      	bgt.n	800a1e8 <__sflush_r+0xf8>
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	e790      	b.n	800a10a <__sflush_r+0x1a>
 800a1e8:	4407      	add	r7, r0
 800a1ea:	1a36      	subs	r6, r6, r0
 800a1ec:	e7ea      	b.n	800a1c4 <__sflush_r+0xd4>
 800a1ee:	bf00      	nop
 800a1f0:	20400001 	.word	0x20400001

0800a1f4 <_fflush_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	690b      	ldr	r3, [r1, #16]
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	460c      	mov	r4, r1
 800a1fc:	b913      	cbnz	r3, 800a204 <_fflush_r+0x10>
 800a1fe:	2500      	movs	r5, #0
 800a200:	4628      	mov	r0, r5
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	b118      	cbz	r0, 800a20e <_fflush_r+0x1a>
 800a206:	6983      	ldr	r3, [r0, #24]
 800a208:	b90b      	cbnz	r3, 800a20e <_fflush_r+0x1a>
 800a20a:	f000 f887 	bl	800a31c <__sinit>
 800a20e:	4b14      	ldr	r3, [pc, #80]	; (800a260 <_fflush_r+0x6c>)
 800a210:	429c      	cmp	r4, r3
 800a212:	d11b      	bne.n	800a24c <_fflush_r+0x58>
 800a214:	686c      	ldr	r4, [r5, #4]
 800a216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0ef      	beq.n	800a1fe <_fflush_r+0xa>
 800a21e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a220:	07d0      	lsls	r0, r2, #31
 800a222:	d404      	bmi.n	800a22e <_fflush_r+0x3a>
 800a224:	0599      	lsls	r1, r3, #22
 800a226:	d402      	bmi.n	800a22e <_fflush_r+0x3a>
 800a228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a22a:	f000 f915 	bl	800a458 <__retarget_lock_acquire_recursive>
 800a22e:	4628      	mov	r0, r5
 800a230:	4621      	mov	r1, r4
 800a232:	f7ff ff5d 	bl	800a0f0 <__sflush_r>
 800a236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a238:	4605      	mov	r5, r0
 800a23a:	07da      	lsls	r2, r3, #31
 800a23c:	d4e0      	bmi.n	800a200 <_fflush_r+0xc>
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	059b      	lsls	r3, r3, #22
 800a242:	d4dd      	bmi.n	800a200 <_fflush_r+0xc>
 800a244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a246:	f000 f908 	bl	800a45a <__retarget_lock_release_recursive>
 800a24a:	e7d9      	b.n	800a200 <_fflush_r+0xc>
 800a24c:	4b05      	ldr	r3, [pc, #20]	; (800a264 <_fflush_r+0x70>)
 800a24e:	429c      	cmp	r4, r3
 800a250:	d101      	bne.n	800a256 <_fflush_r+0x62>
 800a252:	68ac      	ldr	r4, [r5, #8]
 800a254:	e7df      	b.n	800a216 <_fflush_r+0x22>
 800a256:	4b04      	ldr	r3, [pc, #16]	; (800a268 <_fflush_r+0x74>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	bf08      	it	eq
 800a25c:	68ec      	ldreq	r4, [r5, #12]
 800a25e:	e7da      	b.n	800a216 <_fflush_r+0x22>
 800a260:	0800ae40 	.word	0x0800ae40
 800a264:	0800ae60 	.word	0x0800ae60
 800a268:	0800ae20 	.word	0x0800ae20

0800a26c <std>:
 800a26c:	2300      	movs	r3, #0
 800a26e:	b510      	push	{r4, lr}
 800a270:	4604      	mov	r4, r0
 800a272:	e9c0 3300 	strd	r3, r3, [r0]
 800a276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a27a:	6083      	str	r3, [r0, #8]
 800a27c:	8181      	strh	r1, [r0, #12]
 800a27e:	6643      	str	r3, [r0, #100]	; 0x64
 800a280:	81c2      	strh	r2, [r0, #14]
 800a282:	6183      	str	r3, [r0, #24]
 800a284:	4619      	mov	r1, r3
 800a286:	2208      	movs	r2, #8
 800a288:	305c      	adds	r0, #92	; 0x5c
 800a28a:	f7fe ffe1 	bl	8009250 <memset>
 800a28e:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <std+0x38>)
 800a290:	6224      	str	r4, [r4, #32]
 800a292:	6263      	str	r3, [r4, #36]	; 0x24
 800a294:	4b04      	ldr	r3, [pc, #16]	; (800a2a8 <std+0x3c>)
 800a296:	62a3      	str	r3, [r4, #40]	; 0x28
 800a298:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <std+0x40>)
 800a29a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a29c:	4b04      	ldr	r3, [pc, #16]	; (800a2b0 <std+0x44>)
 800a29e:	6323      	str	r3, [r4, #48]	; 0x30
 800a2a0:	bd10      	pop	{r4, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800a661 	.word	0x0800a661
 800a2a8:	0800a683 	.word	0x0800a683
 800a2ac:	0800a6bb 	.word	0x0800a6bb
 800a2b0:	0800a6df 	.word	0x0800a6df

0800a2b4 <_cleanup_r>:
 800a2b4:	4901      	ldr	r1, [pc, #4]	; (800a2bc <_cleanup_r+0x8>)
 800a2b6:	f000 b8af 	b.w	800a418 <_fwalk_reent>
 800a2ba:	bf00      	nop
 800a2bc:	0800a1f5 	.word	0x0800a1f5

0800a2c0 <__sfmoreglue>:
 800a2c0:	2268      	movs	r2, #104	; 0x68
 800a2c2:	b570      	push	{r4, r5, r6, lr}
 800a2c4:	1e4d      	subs	r5, r1, #1
 800a2c6:	4355      	muls	r5, r2
 800a2c8:	460e      	mov	r6, r1
 800a2ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2ce:	f7ff f843 	bl	8009358 <_malloc_r>
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	b140      	cbz	r0, 800a2e8 <__sfmoreglue+0x28>
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	e9c0 1600 	strd	r1, r6, [r0]
 800a2dc:	300c      	adds	r0, #12
 800a2de:	60a0      	str	r0, [r4, #8]
 800a2e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2e4:	f7fe ffb4 	bl	8009250 <memset>
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}

0800a2ec <__sfp_lock_acquire>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <__sfp_lock_acquire+0x8>)
 800a2ee:	f000 b8b3 	b.w	800a458 <__retarget_lock_acquire_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	2000371d 	.word	0x2000371d

0800a2f8 <__sfp_lock_release>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	; (800a300 <__sfp_lock_release+0x8>)
 800a2fa:	f000 b8ae 	b.w	800a45a <__retarget_lock_release_recursive>
 800a2fe:	bf00      	nop
 800a300:	2000371d 	.word	0x2000371d

0800a304 <__sinit_lock_acquire>:
 800a304:	4801      	ldr	r0, [pc, #4]	; (800a30c <__sinit_lock_acquire+0x8>)
 800a306:	f000 b8a7 	b.w	800a458 <__retarget_lock_acquire_recursive>
 800a30a:	bf00      	nop
 800a30c:	2000371e 	.word	0x2000371e

0800a310 <__sinit_lock_release>:
 800a310:	4801      	ldr	r0, [pc, #4]	; (800a318 <__sinit_lock_release+0x8>)
 800a312:	f000 b8a2 	b.w	800a45a <__retarget_lock_release_recursive>
 800a316:	bf00      	nop
 800a318:	2000371e 	.word	0x2000371e

0800a31c <__sinit>:
 800a31c:	b510      	push	{r4, lr}
 800a31e:	4604      	mov	r4, r0
 800a320:	f7ff fff0 	bl	800a304 <__sinit_lock_acquire>
 800a324:	69a3      	ldr	r3, [r4, #24]
 800a326:	b11b      	cbz	r3, 800a330 <__sinit+0x14>
 800a328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a32c:	f7ff bff0 	b.w	800a310 <__sinit_lock_release>
 800a330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a334:	6523      	str	r3, [r4, #80]	; 0x50
 800a336:	4b13      	ldr	r3, [pc, #76]	; (800a384 <__sinit+0x68>)
 800a338:	4a13      	ldr	r2, [pc, #76]	; (800a388 <__sinit+0x6c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a33e:	42a3      	cmp	r3, r4
 800a340:	bf08      	it	eq
 800a342:	2301      	moveq	r3, #1
 800a344:	4620      	mov	r0, r4
 800a346:	bf08      	it	eq
 800a348:	61a3      	streq	r3, [r4, #24]
 800a34a:	f000 f81f 	bl	800a38c <__sfp>
 800a34e:	6060      	str	r0, [r4, #4]
 800a350:	4620      	mov	r0, r4
 800a352:	f000 f81b 	bl	800a38c <__sfp>
 800a356:	60a0      	str	r0, [r4, #8]
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 f817 	bl	800a38c <__sfp>
 800a35e:	2200      	movs	r2, #0
 800a360:	2104      	movs	r1, #4
 800a362:	60e0      	str	r0, [r4, #12]
 800a364:	6860      	ldr	r0, [r4, #4]
 800a366:	f7ff ff81 	bl	800a26c <std>
 800a36a:	2201      	movs	r2, #1
 800a36c:	2109      	movs	r1, #9
 800a36e:	68a0      	ldr	r0, [r4, #8]
 800a370:	f7ff ff7c 	bl	800a26c <std>
 800a374:	2202      	movs	r2, #2
 800a376:	2112      	movs	r1, #18
 800a378:	68e0      	ldr	r0, [r4, #12]
 800a37a:	f7ff ff77 	bl	800a26c <std>
 800a37e:	2301      	movs	r3, #1
 800a380:	61a3      	str	r3, [r4, #24]
 800a382:	e7d1      	b.n	800a328 <__sinit+0xc>
 800a384:	0800ac38 	.word	0x0800ac38
 800a388:	0800a2b5 	.word	0x0800a2b5

0800a38c <__sfp>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	4607      	mov	r7, r0
 800a390:	f7ff ffac 	bl	800a2ec <__sfp_lock_acquire>
 800a394:	4b1e      	ldr	r3, [pc, #120]	; (800a410 <__sfp+0x84>)
 800a396:	681e      	ldr	r6, [r3, #0]
 800a398:	69b3      	ldr	r3, [r6, #24]
 800a39a:	b913      	cbnz	r3, 800a3a2 <__sfp+0x16>
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7ff ffbd 	bl	800a31c <__sinit>
 800a3a2:	3648      	adds	r6, #72	; 0x48
 800a3a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	d503      	bpl.n	800a3b4 <__sfp+0x28>
 800a3ac:	6833      	ldr	r3, [r6, #0]
 800a3ae:	b30b      	cbz	r3, 800a3f4 <__sfp+0x68>
 800a3b0:	6836      	ldr	r6, [r6, #0]
 800a3b2:	e7f7      	b.n	800a3a4 <__sfp+0x18>
 800a3b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3b8:	b9d5      	cbnz	r5, 800a3f0 <__sfp+0x64>
 800a3ba:	4b16      	ldr	r3, [pc, #88]	; (800a414 <__sfp+0x88>)
 800a3bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3c0:	60e3      	str	r3, [r4, #12]
 800a3c2:	6665      	str	r5, [r4, #100]	; 0x64
 800a3c4:	f000 f847 	bl	800a456 <__retarget_lock_init_recursive>
 800a3c8:	f7ff ff96 	bl	800a2f8 <__sfp_lock_release>
 800a3cc:	2208      	movs	r2, #8
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a3d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a3d8:	6025      	str	r5, [r4, #0]
 800a3da:	61a5      	str	r5, [r4, #24]
 800a3dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3e0:	f7fe ff36 	bl	8009250 <memset>
 800a3e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f0:	3468      	adds	r4, #104	; 0x68
 800a3f2:	e7d9      	b.n	800a3a8 <__sfp+0x1c>
 800a3f4:	2104      	movs	r1, #4
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	f7ff ff62 	bl	800a2c0 <__sfmoreglue>
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	6030      	str	r0, [r6, #0]
 800a400:	2800      	cmp	r0, #0
 800a402:	d1d5      	bne.n	800a3b0 <__sfp+0x24>
 800a404:	f7ff ff78 	bl	800a2f8 <__sfp_lock_release>
 800a408:	230c      	movs	r3, #12
 800a40a:	603b      	str	r3, [r7, #0]
 800a40c:	e7ee      	b.n	800a3ec <__sfp+0x60>
 800a40e:	bf00      	nop
 800a410:	0800ac38 	.word	0x0800ac38
 800a414:	ffff0001 	.word	0xffff0001

0800a418 <_fwalk_reent>:
 800a418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a41c:	4606      	mov	r6, r0
 800a41e:	4688      	mov	r8, r1
 800a420:	2700      	movs	r7, #0
 800a422:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a426:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a42a:	f1b9 0901 	subs.w	r9, r9, #1
 800a42e:	d505      	bpl.n	800a43c <_fwalk_reent+0x24>
 800a430:	6824      	ldr	r4, [r4, #0]
 800a432:	2c00      	cmp	r4, #0
 800a434:	d1f7      	bne.n	800a426 <_fwalk_reent+0xe>
 800a436:	4638      	mov	r0, r7
 800a438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43c:	89ab      	ldrh	r3, [r5, #12]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d907      	bls.n	800a452 <_fwalk_reent+0x3a>
 800a442:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a446:	3301      	adds	r3, #1
 800a448:	d003      	beq.n	800a452 <_fwalk_reent+0x3a>
 800a44a:	4629      	mov	r1, r5
 800a44c:	4630      	mov	r0, r6
 800a44e:	47c0      	blx	r8
 800a450:	4307      	orrs	r7, r0
 800a452:	3568      	adds	r5, #104	; 0x68
 800a454:	e7e9      	b.n	800a42a <_fwalk_reent+0x12>

0800a456 <__retarget_lock_init_recursive>:
 800a456:	4770      	bx	lr

0800a458 <__retarget_lock_acquire_recursive>:
 800a458:	4770      	bx	lr

0800a45a <__retarget_lock_release_recursive>:
 800a45a:	4770      	bx	lr

0800a45c <__swhatbuf_r>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	460e      	mov	r6, r1
 800a460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a464:	4614      	mov	r4, r2
 800a466:	2900      	cmp	r1, #0
 800a468:	461d      	mov	r5, r3
 800a46a:	b096      	sub	sp, #88	; 0x58
 800a46c:	da08      	bge.n	800a480 <__swhatbuf_r+0x24>
 800a46e:	2200      	movs	r2, #0
 800a470:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a474:	602a      	str	r2, [r5, #0]
 800a476:	061a      	lsls	r2, r3, #24
 800a478:	d410      	bmi.n	800a49c <__swhatbuf_r+0x40>
 800a47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a47e:	e00e      	b.n	800a49e <__swhatbuf_r+0x42>
 800a480:	466a      	mov	r2, sp
 800a482:	f000 f953 	bl	800a72c <_fstat_r>
 800a486:	2800      	cmp	r0, #0
 800a488:	dbf1      	blt.n	800a46e <__swhatbuf_r+0x12>
 800a48a:	9a01      	ldr	r2, [sp, #4]
 800a48c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a490:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a494:	425a      	negs	r2, r3
 800a496:	415a      	adcs	r2, r3
 800a498:	602a      	str	r2, [r5, #0]
 800a49a:	e7ee      	b.n	800a47a <__swhatbuf_r+0x1e>
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	2000      	movs	r0, #0
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	b016      	add	sp, #88	; 0x58
 800a4a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a4a8 <__smakebuf_r>:
 800a4a8:	898b      	ldrh	r3, [r1, #12]
 800a4aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4ac:	079d      	lsls	r5, r3, #30
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	d507      	bpl.n	800a4c4 <__smakebuf_r+0x1c>
 800a4b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	6123      	str	r3, [r4, #16]
 800a4bc:	2301      	movs	r3, #1
 800a4be:	6163      	str	r3, [r4, #20]
 800a4c0:	b002      	add	sp, #8
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	466a      	mov	r2, sp
 800a4c6:	ab01      	add	r3, sp, #4
 800a4c8:	f7ff ffc8 	bl	800a45c <__swhatbuf_r>
 800a4cc:	9900      	ldr	r1, [sp, #0]
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7fe ff41 	bl	8009358 <_malloc_r>
 800a4d6:	b948      	cbnz	r0, 800a4ec <__smakebuf_r+0x44>
 800a4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4dc:	059a      	lsls	r2, r3, #22
 800a4de:	d4ef      	bmi.n	800a4c0 <__smakebuf_r+0x18>
 800a4e0:	f023 0303 	bic.w	r3, r3, #3
 800a4e4:	f043 0302 	orr.w	r3, r3, #2
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	e7e3      	b.n	800a4b4 <__smakebuf_r+0xc>
 800a4ec:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <__smakebuf_r+0x7c>)
 800a4ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	6020      	str	r0, [r4, #0]
 800a4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f8:	81a3      	strh	r3, [r4, #12]
 800a4fa:	9b00      	ldr	r3, [sp, #0]
 800a4fc:	6120      	str	r0, [r4, #16]
 800a4fe:	6163      	str	r3, [r4, #20]
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	b15b      	cbz	r3, 800a51c <__smakebuf_r+0x74>
 800a504:	4630      	mov	r0, r6
 800a506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a50a:	f000 f921 	bl	800a750 <_isatty_r>
 800a50e:	b128      	cbz	r0, 800a51c <__smakebuf_r+0x74>
 800a510:	89a3      	ldrh	r3, [r4, #12]
 800a512:	f023 0303 	bic.w	r3, r3, #3
 800a516:	f043 0301 	orr.w	r3, r3, #1
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	89a0      	ldrh	r0, [r4, #12]
 800a51e:	4305      	orrs	r5, r0
 800a520:	81a5      	strh	r5, [r4, #12]
 800a522:	e7cd      	b.n	800a4c0 <__smakebuf_r+0x18>
 800a524:	0800a2b5 	.word	0x0800a2b5

0800a528 <memchr>:
 800a528:	4603      	mov	r3, r0
 800a52a:	b510      	push	{r4, lr}
 800a52c:	b2c9      	uxtb	r1, r1
 800a52e:	4402      	add	r2, r0
 800a530:	4293      	cmp	r3, r2
 800a532:	4618      	mov	r0, r3
 800a534:	d101      	bne.n	800a53a <memchr+0x12>
 800a536:	2000      	movs	r0, #0
 800a538:	e003      	b.n	800a542 <memchr+0x1a>
 800a53a:	7804      	ldrb	r4, [r0, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	428c      	cmp	r4, r1
 800a540:	d1f6      	bne.n	800a530 <memchr+0x8>
 800a542:	bd10      	pop	{r4, pc}

0800a544 <memmove>:
 800a544:	4288      	cmp	r0, r1
 800a546:	b510      	push	{r4, lr}
 800a548:	eb01 0402 	add.w	r4, r1, r2
 800a54c:	d902      	bls.n	800a554 <memmove+0x10>
 800a54e:	4284      	cmp	r4, r0
 800a550:	4623      	mov	r3, r4
 800a552:	d807      	bhi.n	800a564 <memmove+0x20>
 800a554:	1e43      	subs	r3, r0, #1
 800a556:	42a1      	cmp	r1, r4
 800a558:	d008      	beq.n	800a56c <memmove+0x28>
 800a55a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a55e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a562:	e7f8      	b.n	800a556 <memmove+0x12>
 800a564:	4601      	mov	r1, r0
 800a566:	4402      	add	r2, r0
 800a568:	428a      	cmp	r2, r1
 800a56a:	d100      	bne.n	800a56e <memmove+0x2a>
 800a56c:	bd10      	pop	{r4, pc}
 800a56e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a576:	e7f7      	b.n	800a568 <memmove+0x24>

0800a578 <_realloc_r>:
 800a578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57c:	4680      	mov	r8, r0
 800a57e:	4614      	mov	r4, r2
 800a580:	460e      	mov	r6, r1
 800a582:	b921      	cbnz	r1, 800a58e <_realloc_r+0x16>
 800a584:	4611      	mov	r1, r2
 800a586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a58a:	f7fe bee5 	b.w	8009358 <_malloc_r>
 800a58e:	b92a      	cbnz	r2, 800a59c <_realloc_r+0x24>
 800a590:	f7fe fe7a 	bl	8009288 <_free_r>
 800a594:	4625      	mov	r5, r4
 800a596:	4628      	mov	r0, r5
 800a598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a59c:	f000 f8fa 	bl	800a794 <_malloc_usable_size_r>
 800a5a0:	4284      	cmp	r4, r0
 800a5a2:	4607      	mov	r7, r0
 800a5a4:	d802      	bhi.n	800a5ac <_realloc_r+0x34>
 800a5a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5aa:	d812      	bhi.n	800a5d2 <_realloc_r+0x5a>
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	f7fe fed2 	bl	8009358 <_malloc_r>
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d0ed      	beq.n	800a596 <_realloc_r+0x1e>
 800a5ba:	42bc      	cmp	r4, r7
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4631      	mov	r1, r6
 800a5c0:	bf28      	it	cs
 800a5c2:	463a      	movcs	r2, r7
 800a5c4:	f7fe fe36 	bl	8009234 <memcpy>
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	f7fe fe5c 	bl	8009288 <_free_r>
 800a5d0:	e7e1      	b.n	800a596 <_realloc_r+0x1e>
 800a5d2:	4635      	mov	r5, r6
 800a5d4:	e7df      	b.n	800a596 <_realloc_r+0x1e>

0800a5d6 <_raise_r>:
 800a5d6:	291f      	cmp	r1, #31
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4604      	mov	r4, r0
 800a5dc:	460d      	mov	r5, r1
 800a5de:	d904      	bls.n	800a5ea <_raise_r+0x14>
 800a5e0:	2316      	movs	r3, #22
 800a5e2:	6003      	str	r3, [r0, #0]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5ec:	b112      	cbz	r2, 800a5f4 <_raise_r+0x1e>
 800a5ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5f2:	b94b      	cbnz	r3, 800a608 <_raise_r+0x32>
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f000 f831 	bl	800a65c <_getpid_r>
 800a5fa:	462a      	mov	r2, r5
 800a5fc:	4601      	mov	r1, r0
 800a5fe:	4620      	mov	r0, r4
 800a600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a604:	f000 b818 	b.w	800a638 <_kill_r>
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d00a      	beq.n	800a622 <_raise_r+0x4c>
 800a60c:	1c59      	adds	r1, r3, #1
 800a60e:	d103      	bne.n	800a618 <_raise_r+0x42>
 800a610:	2316      	movs	r3, #22
 800a612:	6003      	str	r3, [r0, #0]
 800a614:	2001      	movs	r0, #1
 800a616:	e7e7      	b.n	800a5e8 <_raise_r+0x12>
 800a618:	2400      	movs	r4, #0
 800a61a:	4628      	mov	r0, r5
 800a61c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a620:	4798      	blx	r3
 800a622:	2000      	movs	r0, #0
 800a624:	e7e0      	b.n	800a5e8 <_raise_r+0x12>
	...

0800a628 <raise>:
 800a628:	4b02      	ldr	r3, [pc, #8]	; (800a634 <raise+0xc>)
 800a62a:	4601      	mov	r1, r0
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	f7ff bfd2 	b.w	800a5d6 <_raise_r>
 800a632:	bf00      	nop
 800a634:	200000fc 	.word	0x200000fc

0800a638 <_kill_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	2300      	movs	r3, #0
 800a63c:	4d06      	ldr	r5, [pc, #24]	; (800a658 <_kill_r+0x20>)
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f7fa fdf2 	bl	800522e <_kill>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d102      	bne.n	800a654 <_kill_r+0x1c>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	b103      	cbz	r3, 800a654 <_kill_r+0x1c>
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	bd38      	pop	{r3, r4, r5, pc}
 800a656:	bf00      	nop
 800a658:	20003718 	.word	0x20003718

0800a65c <_getpid_r>:
 800a65c:	f7fa bde0 	b.w	8005220 <_getpid>

0800a660 <__sread>:
 800a660:	b510      	push	{r4, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a668:	f000 f89c 	bl	800a7a4 <_read_r>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	bfab      	itete	ge
 800a670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a672:	89a3      	ldrhlt	r3, [r4, #12]
 800a674:	181b      	addge	r3, r3, r0
 800a676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a67a:	bfac      	ite	ge
 800a67c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a67e:	81a3      	strhlt	r3, [r4, #12]
 800a680:	bd10      	pop	{r4, pc}

0800a682 <__swrite>:
 800a682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a686:	461f      	mov	r7, r3
 800a688:	898b      	ldrh	r3, [r1, #12]
 800a68a:	4605      	mov	r5, r0
 800a68c:	05db      	lsls	r3, r3, #23
 800a68e:	460c      	mov	r4, r1
 800a690:	4616      	mov	r6, r2
 800a692:	d505      	bpl.n	800a6a0 <__swrite+0x1e>
 800a694:	2302      	movs	r3, #2
 800a696:	2200      	movs	r2, #0
 800a698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69c:	f000 f868 	bl	800a770 <_lseek_r>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	4632      	mov	r2, r6
 800a6a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	463b      	mov	r3, r7
 800a6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b6:	f000 b817 	b.w	800a6e8 <_write_r>

0800a6ba <__sseek>:
 800a6ba:	b510      	push	{r4, lr}
 800a6bc:	460c      	mov	r4, r1
 800a6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c2:	f000 f855 	bl	800a770 <_lseek_r>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	bf15      	itete	ne
 800a6cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6d6:	81a3      	strheq	r3, [r4, #12]
 800a6d8:	bf18      	it	ne
 800a6da:	81a3      	strhne	r3, [r4, #12]
 800a6dc:	bd10      	pop	{r4, pc}

0800a6de <__sclose>:
 800a6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e2:	f000 b813 	b.w	800a70c <_close_r>
	...

0800a6e8 <_write_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4d05      	ldr	r5, [pc, #20]	; (800a708 <_write_r+0x20>)
 800a6f4:	602a      	str	r2, [r5, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f7fa fdd0 	bl	800529c <_write>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_write_r+0x1e>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_write_r+0x1e>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	20003718 	.word	0x20003718

0800a70c <_close_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	2300      	movs	r3, #0
 800a710:	4d05      	ldr	r5, [pc, #20]	; (800a728 <_close_r+0x1c>)
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	f7fa fddc 	bl	80052d4 <_close>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_close_r+0x1a>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_close_r+0x1a>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	20003718 	.word	0x20003718

0800a72c <_fstat_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	2300      	movs	r3, #0
 800a730:	4d06      	ldr	r5, [pc, #24]	; (800a74c <_fstat_r+0x20>)
 800a732:	4604      	mov	r4, r0
 800a734:	4608      	mov	r0, r1
 800a736:	4611      	mov	r1, r2
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	f7fa fdd6 	bl	80052ea <_fstat>
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	d102      	bne.n	800a748 <_fstat_r+0x1c>
 800a742:	682b      	ldr	r3, [r5, #0]
 800a744:	b103      	cbz	r3, 800a748 <_fstat_r+0x1c>
 800a746:	6023      	str	r3, [r4, #0]
 800a748:	bd38      	pop	{r3, r4, r5, pc}
 800a74a:	bf00      	nop
 800a74c:	20003718 	.word	0x20003718

0800a750 <_isatty_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	2300      	movs	r3, #0
 800a754:	4d05      	ldr	r5, [pc, #20]	; (800a76c <_isatty_r+0x1c>)
 800a756:	4604      	mov	r4, r0
 800a758:	4608      	mov	r0, r1
 800a75a:	602b      	str	r3, [r5, #0]
 800a75c:	f7fa fdd4 	bl	8005308 <_isatty>
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	d102      	bne.n	800a76a <_isatty_r+0x1a>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	b103      	cbz	r3, 800a76a <_isatty_r+0x1a>
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	20003718 	.word	0x20003718

0800a770 <_lseek_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4604      	mov	r4, r0
 800a774:	4608      	mov	r0, r1
 800a776:	4611      	mov	r1, r2
 800a778:	2200      	movs	r2, #0
 800a77a:	4d05      	ldr	r5, [pc, #20]	; (800a790 <_lseek_r+0x20>)
 800a77c:	602a      	str	r2, [r5, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f7fa fdcc 	bl	800531c <_lseek>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_lseek_r+0x1e>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_lseek_r+0x1e>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20003718 	.word	0x20003718

0800a794 <_malloc_usable_size_r>:
 800a794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a798:	1f18      	subs	r0, r3, #4
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bfbc      	itt	lt
 800a79e:	580b      	ldrlt	r3, [r1, r0]
 800a7a0:	18c0      	addlt	r0, r0, r3
 800a7a2:	4770      	bx	lr

0800a7a4 <_read_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4d05      	ldr	r5, [pc, #20]	; (800a7c4 <_read_r+0x20>)
 800a7b0:	602a      	str	r2, [r5, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f7fa fd55 	bl	8005262 <_read>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d102      	bne.n	800a7c2 <_read_r+0x1e>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	b103      	cbz	r3, 800a7c2 <_read_r+0x1e>
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	20003718 	.word	0x20003718

0800a7c8 <floor>:
 800a7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7cc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a7d0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a7d4:	2e13      	cmp	r6, #19
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4607      	mov	r7, r0
 800a7dc:	460c      	mov	r4, r1
 800a7de:	4605      	mov	r5, r0
 800a7e0:	dc33      	bgt.n	800a84a <floor+0x82>
 800a7e2:	2e00      	cmp	r6, #0
 800a7e4:	da14      	bge.n	800a810 <floor+0x48>
 800a7e6:	a334      	add	r3, pc, #208	; (adr r3, 800a8b8 <floor+0xf0>)
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f7f5 fcbe 	bl	800016c <__adddf3>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f7f6 f900 	bl	80009f8 <__aeabi_dcmpgt>
 800a7f8:	b138      	cbz	r0, 800a80a <floor+0x42>
 800a7fa:	2c00      	cmp	r4, #0
 800a7fc:	da58      	bge.n	800a8b0 <floor+0xe8>
 800a7fe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a802:	431d      	orrs	r5, r3
 800a804:	d001      	beq.n	800a80a <floor+0x42>
 800a806:	2500      	movs	r5, #0
 800a808:	4c2d      	ldr	r4, [pc, #180]	; (800a8c0 <floor+0xf8>)
 800a80a:	4623      	mov	r3, r4
 800a80c:	462f      	mov	r7, r5
 800a80e:	e025      	b.n	800a85c <floor+0x94>
 800a810:	4a2c      	ldr	r2, [pc, #176]	; (800a8c4 <floor+0xfc>)
 800a812:	fa42 f806 	asr.w	r8, r2, r6
 800a816:	ea01 0208 	and.w	r2, r1, r8
 800a81a:	4302      	orrs	r2, r0
 800a81c:	d01e      	beq.n	800a85c <floor+0x94>
 800a81e:	a326      	add	r3, pc, #152	; (adr r3, 800a8b8 <floor+0xf0>)
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f7f5 fca2 	bl	800016c <__adddf3>
 800a828:	2200      	movs	r2, #0
 800a82a:	2300      	movs	r3, #0
 800a82c:	f7f6 f8e4 	bl	80009f8 <__aeabi_dcmpgt>
 800a830:	2800      	cmp	r0, #0
 800a832:	d0ea      	beq.n	800a80a <floor+0x42>
 800a834:	2c00      	cmp	r4, #0
 800a836:	bfbe      	ittt	lt
 800a838:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a83c:	fa43 f606 	asrlt.w	r6, r3, r6
 800a840:	19a4      	addlt	r4, r4, r6
 800a842:	2500      	movs	r5, #0
 800a844:	ea24 0408 	bic.w	r4, r4, r8
 800a848:	e7df      	b.n	800a80a <floor+0x42>
 800a84a:	2e33      	cmp	r6, #51	; 0x33
 800a84c:	dd0a      	ble.n	800a864 <floor+0x9c>
 800a84e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a852:	d103      	bne.n	800a85c <floor+0x94>
 800a854:	f7f5 fc8a 	bl	800016c <__adddf3>
 800a858:	4607      	mov	r7, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4638      	mov	r0, r7
 800a85e:	4619      	mov	r1, r3
 800a860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a864:	f04f 32ff 	mov.w	r2, #4294967295
 800a868:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a86c:	fa22 f808 	lsr.w	r8, r2, r8
 800a870:	ea18 0f00 	tst.w	r8, r0
 800a874:	d0f2      	beq.n	800a85c <floor+0x94>
 800a876:	a310      	add	r3, pc, #64	; (adr r3, 800a8b8 <floor+0xf0>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f7f5 fc76 	bl	800016c <__adddf3>
 800a880:	2200      	movs	r2, #0
 800a882:	2300      	movs	r3, #0
 800a884:	f7f6 f8b8 	bl	80009f8 <__aeabi_dcmpgt>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d0be      	beq.n	800a80a <floor+0x42>
 800a88c:	2c00      	cmp	r4, #0
 800a88e:	da02      	bge.n	800a896 <floor+0xce>
 800a890:	2e14      	cmp	r6, #20
 800a892:	d103      	bne.n	800a89c <floor+0xd4>
 800a894:	3401      	adds	r4, #1
 800a896:	ea25 0508 	bic.w	r5, r5, r8
 800a89a:	e7b6      	b.n	800a80a <floor+0x42>
 800a89c:	2301      	movs	r3, #1
 800a89e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a8a2:	fa03 f606 	lsl.w	r6, r3, r6
 800a8a6:	4435      	add	r5, r6
 800a8a8:	42bd      	cmp	r5, r7
 800a8aa:	bf38      	it	cc
 800a8ac:	18e4      	addcc	r4, r4, r3
 800a8ae:	e7f2      	b.n	800a896 <floor+0xce>
 800a8b0:	2500      	movs	r5, #0
 800a8b2:	462c      	mov	r4, r5
 800a8b4:	e7a9      	b.n	800a80a <floor+0x42>
 800a8b6:	bf00      	nop
 800a8b8:	8800759c 	.word	0x8800759c
 800a8bc:	7e37e43c 	.word	0x7e37e43c
 800a8c0:	bff00000 	.word	0xbff00000
 800a8c4:	000fffff 	.word	0x000fffff

0800a8c8 <sqrt>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	460f      	mov	r7, r1
 800a8ce:	f000 f81f 	bl	800a910 <__ieee754_sqrt>
 800a8d2:	4632      	mov	r2, r6
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	460d      	mov	r5, r1
 800a8d8:	463b      	mov	r3, r7
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f6 f895 	bl	8000a0c <__aeabi_dcmpun>
 800a8e2:	b990      	cbnz	r0, 800a90a <sqrt+0x42>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f6 f866 	bl	80009bc <__aeabi_dcmplt>
 800a8f0:	b158      	cbz	r0, 800a90a <sqrt+0x42>
 800a8f2:	f7fe fc65 	bl	80091c0 <__errno>
 800a8f6:	2321      	movs	r3, #33	; 0x21
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	6003      	str	r3, [r0, #0]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4610      	mov	r0, r2
 800a900:	4619      	mov	r1, r3
 800a902:	f7f5 ff13 	bl	800072c <__aeabi_ddiv>
 800a906:	4604      	mov	r4, r0
 800a908:	460d      	mov	r5, r1
 800a90a:	4620      	mov	r0, r4
 800a90c:	4629      	mov	r1, r5
 800a90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a910 <__ieee754_sqrt>:
 800a910:	f8df c158 	ldr.w	ip, [pc, #344]	; 800aa6c <__ieee754_sqrt+0x15c>
 800a914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a918:	ea3c 0c01 	bics.w	ip, ip, r1
 800a91c:	4606      	mov	r6, r0
 800a91e:	460d      	mov	r5, r1
 800a920:	460c      	mov	r4, r1
 800a922:	460a      	mov	r2, r1
 800a924:	4607      	mov	r7, r0
 800a926:	4603      	mov	r3, r0
 800a928:	d10f      	bne.n	800a94a <__ieee754_sqrt+0x3a>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	f7f5 fdd3 	bl	80004d8 <__aeabi_dmul>
 800a932:	4602      	mov	r2, r0
 800a934:	460b      	mov	r3, r1
 800a936:	4630      	mov	r0, r6
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f5 fc17 	bl	800016c <__adddf3>
 800a93e:	4606      	mov	r6, r0
 800a940:	460d      	mov	r5, r1
 800a942:	4630      	mov	r0, r6
 800a944:	4629      	mov	r1, r5
 800a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94a:	2900      	cmp	r1, #0
 800a94c:	dc0e      	bgt.n	800a96c <__ieee754_sqrt+0x5c>
 800a94e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a952:	ea5c 0707 	orrs.w	r7, ip, r7
 800a956:	d0f4      	beq.n	800a942 <__ieee754_sqrt+0x32>
 800a958:	b141      	cbz	r1, 800a96c <__ieee754_sqrt+0x5c>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	f7f5 fc03 	bl	8000168 <__aeabi_dsub>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	f7f5 fee1 	bl	800072c <__aeabi_ddiv>
 800a96a:	e7e8      	b.n	800a93e <__ieee754_sqrt+0x2e>
 800a96c:	1521      	asrs	r1, r4, #20
 800a96e:	d075      	beq.n	800aa5c <__ieee754_sqrt+0x14c>
 800a970:	07cc      	lsls	r4, r1, #31
 800a972:	f04f 0400 	mov.w	r4, #0
 800a976:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a97a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800a97e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a982:	bf5e      	ittt	pl
 800a984:	0fd9      	lsrpl	r1, r3, #31
 800a986:	005b      	lslpl	r3, r3, #1
 800a988:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800a98c:	0fd9      	lsrs	r1, r3, #31
 800a98e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a992:	2516      	movs	r5, #22
 800a994:	4620      	mov	r0, r4
 800a996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a99a:	107f      	asrs	r7, r7, #1
 800a99c:	005b      	lsls	r3, r3, #1
 800a99e:	1846      	adds	r6, r0, r1
 800a9a0:	4296      	cmp	r6, r2
 800a9a2:	bfde      	ittt	le
 800a9a4:	1b92      	suble	r2, r2, r6
 800a9a6:	1870      	addle	r0, r6, r1
 800a9a8:	1864      	addle	r4, r4, r1
 800a9aa:	0052      	lsls	r2, r2, #1
 800a9ac:	3d01      	subs	r5, #1
 800a9ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a9b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a9b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9ba:	d1f0      	bne.n	800a99e <__ieee754_sqrt+0x8e>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	f04f 0e20 	mov.w	lr, #32
 800a9c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a9c6:	4282      	cmp	r2, r0
 800a9c8:	eb06 0c05 	add.w	ip, r6, r5
 800a9cc:	dc02      	bgt.n	800a9d4 <__ieee754_sqrt+0xc4>
 800a9ce:	d113      	bne.n	800a9f8 <__ieee754_sqrt+0xe8>
 800a9d0:	459c      	cmp	ip, r3
 800a9d2:	d811      	bhi.n	800a9f8 <__ieee754_sqrt+0xe8>
 800a9d4:	f1bc 0f00 	cmp.w	ip, #0
 800a9d8:	eb0c 0506 	add.w	r5, ip, r6
 800a9dc:	da43      	bge.n	800aa66 <__ieee754_sqrt+0x156>
 800a9de:	2d00      	cmp	r5, #0
 800a9e0:	db41      	blt.n	800aa66 <__ieee754_sqrt+0x156>
 800a9e2:	f100 0801 	add.w	r8, r0, #1
 800a9e6:	1a12      	subs	r2, r2, r0
 800a9e8:	4640      	mov	r0, r8
 800a9ea:	459c      	cmp	ip, r3
 800a9ec:	bf88      	it	hi
 800a9ee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a9f2:	eba3 030c 	sub.w	r3, r3, ip
 800a9f6:	4431      	add	r1, r6
 800a9f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a9fc:	f1be 0e01 	subs.w	lr, lr, #1
 800aa00:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800aa04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa0c:	d1db      	bne.n	800a9c6 <__ieee754_sqrt+0xb6>
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	d006      	beq.n	800aa20 <__ieee754_sqrt+0x110>
 800aa12:	1c48      	adds	r0, r1, #1
 800aa14:	bf0b      	itete	eq
 800aa16:	4671      	moveq	r1, lr
 800aa18:	3101      	addne	r1, #1
 800aa1a:	3401      	addeq	r4, #1
 800aa1c:	f021 0101 	bicne.w	r1, r1, #1
 800aa20:	1063      	asrs	r3, r4, #1
 800aa22:	0849      	lsrs	r1, r1, #1
 800aa24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aa28:	07e2      	lsls	r2, r4, #31
 800aa2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aa2e:	bf48      	it	mi
 800aa30:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800aa34:	460e      	mov	r6, r1
 800aa36:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aa3a:	e782      	b.n	800a942 <__ieee754_sqrt+0x32>
 800aa3c:	0ada      	lsrs	r2, r3, #11
 800aa3e:	3815      	subs	r0, #21
 800aa40:	055b      	lsls	r3, r3, #21
 800aa42:	2a00      	cmp	r2, #0
 800aa44:	d0fa      	beq.n	800aa3c <__ieee754_sqrt+0x12c>
 800aa46:	02d5      	lsls	r5, r2, #11
 800aa48:	d50a      	bpl.n	800aa60 <__ieee754_sqrt+0x150>
 800aa4a:	f1c1 0420 	rsb	r4, r1, #32
 800aa4e:	fa23 f404 	lsr.w	r4, r3, r4
 800aa52:	1e4d      	subs	r5, r1, #1
 800aa54:	408b      	lsls	r3, r1
 800aa56:	4322      	orrs	r2, r4
 800aa58:	1b41      	subs	r1, r0, r5
 800aa5a:	e789      	b.n	800a970 <__ieee754_sqrt+0x60>
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	e7f0      	b.n	800aa42 <__ieee754_sqrt+0x132>
 800aa60:	0052      	lsls	r2, r2, #1
 800aa62:	3101      	adds	r1, #1
 800aa64:	e7ef      	b.n	800aa46 <__ieee754_sqrt+0x136>
 800aa66:	4680      	mov	r8, r0
 800aa68:	e7bd      	b.n	800a9e6 <__ieee754_sqrt+0xd6>
 800aa6a:	bf00      	nop
 800aa6c:	7ff00000 	.word	0x7ff00000

0800aa70 <_init>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	bf00      	nop
 800aa74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa76:	bc08      	pop	{r3}
 800aa78:	469e      	mov	lr, r3
 800aa7a:	4770      	bx	lr

0800aa7c <_fini>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	bf00      	nop
 800aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa82:	bc08      	pop	{r3}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4770      	bx	lr
