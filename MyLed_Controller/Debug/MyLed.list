
MyLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800776c  0800776c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800776c  0800776c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800776c  0800776c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000060  080077d0  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  080077d0  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd3b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f78  00000000  00000000  0002fe03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00032d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d05  00000000  00000000  00033e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194ee  00000000  00000000  00034b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001400a  00000000  00000000  0004e02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090af7  00000000  00000000  00062035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ca0  00000000  00000000  000f2b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000f77cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080074ac 	.word	0x080074ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080074ac 	.word	0x080074ac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2uiz>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	d20e      	bcs.n	8000726 <__aeabi_f2uiz+0x22>
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30b      	bcc.n	8000726 <__aeabi_f2uiz+0x22>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d409      	bmi.n	800072c <__aeabi_f2uiz+0x28>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	fa23 f002 	lsr.w	r0, r3, r2
 8000724:	4770      	bx	lr
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	4770      	bx	lr
 800072c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000730:	d101      	bne.n	8000736 <__aeabi_f2uiz+0x32>
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	d102      	bne.n	800073c <__aeabi_f2uiz+0x38>
 8000736:	f04f 30ff 	mov.w	r0, #4294967295
 800073a:	4770      	bx	lr
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <ESP_Init>:
uint8_t rxBuffer[RX_BUFFER_SIZE] = {};
uint8_t txBuffer[TX_BUFFER_SIZE] = {};

__weak void ESP_IPD_Callback(uint8_t id, uint16_t len, char* data){}

uint8_t ESP_Init(UART_HandleTypeDef* uart){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	m_uart = uart;
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <ESP_Init+0x20>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
	ESP_Reset();
 8000752:	f000 f851 	bl	80007f8 <ESP_Reset>
	ESP_ATE0();
 8000756:	f000 f807 	bl	8000768 <ESP_ATE0>
	return 1;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000007c 	.word	0x2000007c

08000768 <ESP_ATE0>:

uint8_t ESP_ATE0(){
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af02      	add	r7, sp, #8
	uint8_t returnCode = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	71fb      	strb	r3, [r7, #7]
	uint16_t rxLen = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	80bb      	strh	r3, [r7, #4]
	sprintf((char*)txBuffer, "ATE0\r\n");
 8000776:	491b      	ldr	r1, [pc, #108]	; (80007e4 <ESP_ATE0+0x7c>)
 8000778:	481b      	ldr	r0, [pc, #108]	; (80007e8 <ESP_ATE0+0x80>)
 800077a:	f006 fa6d 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <ESP_ATE0+0x84>)
 8000780:	681c      	ldr	r4, [r3, #0]
 8000782:	4819      	ldr	r0, [pc, #100]	; (80007e8 <ESP_ATE0+0x80>)
 8000784:	f7ff fce2 	bl	800014c <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	4916      	ldr	r1, [pc, #88]	; (80007e8 <ESP_ATE0+0x80>)
 8000790:	4620      	mov	r0, r4
 8000792:	f005 fb29 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 100);
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ESP_ATE0+0x84>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2264      	movs	r2, #100	; 0x64
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a4:	4912      	ldr	r1, [pc, #72]	; (80007f0 <ESP_ATE0+0x88>)
 80007a6:	f005 fbb1 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nOK\r\n")){
 80007aa:	4912      	ldr	r1, [pc, #72]	; (80007f4 <ESP_ATE0+0x8c>)
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <ESP_ATE0+0x88>)
 80007ae:	f006 fa88 	bl	8006cc2 <strstr>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <ESP_ATE0+0x56>
		returnCode = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	e001      	b.n	80007c2 <ESP_ATE0+0x5a>
	} else returnCode = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	71fb      	strb	r3, [r7, #7]
	memset(txBuffer, 0, TX_BUFFER_SIZE);
 80007c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c6:	2100      	movs	r1, #0
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <ESP_ATE0+0x80>)
 80007ca:	f006 fa65 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 80007ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d2:	2100      	movs	r1, #0
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <ESP_ATE0+0x88>)
 80007d6:	f006 fa5f 	bl	8006c98 <memset>
	return returnCode;
 80007da:	79fb      	ldrb	r3, [r7, #7]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	080074c4 	.word	0x080074c4
 80007e8:	20000180 	.word	0x20000180
 80007ec:	2000007c 	.word	0x2000007c
 80007f0:	20000080 	.word	0x20000080
 80007f4:	080074cc 	.word	0x080074cc

080007f8 <ESP_Reset>:
uint8_t ESP_Reset(){
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af02      	add	r7, sp, #8
	uint8_t returnCode = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	71fb      	strb	r3, [r7, #7]
	uint16_t rxLen = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	80bb      	strh	r3, [r7, #4]
	uint8_t receiveCounter = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	71bb      	strb	r3, [r7, #6]

	sprintf((char*)txBuffer, "AT+RST\r\n");
 800080a:	4929      	ldr	r1, [pc, #164]	; (80008b0 <ESP_Reset+0xb8>)
 800080c:	4829      	ldr	r0, [pc, #164]	; (80008b4 <ESP_Reset+0xbc>)
 800080e:	f006 fa23 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <ESP_Reset+0xc0>)
 8000814:	681c      	ldr	r4, [r3, #0]
 8000816:	4827      	ldr	r0, [pc, #156]	; (80008b4 <ESP_Reset+0xbc>)
 8000818:	f7ff fc98 	bl	800014c <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	4924      	ldr	r1, [pc, #144]	; (80008b4 <ESP_Reset+0xbc>)
 8000824:	4620      	mov	r0, r4
 8000826:	f005 fadf 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 100);
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <ESP_Reset+0xc0>)
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2264      	movs	r2, #100	; 0x64
 8000832:	9200      	str	r2, [sp, #0]
 8000834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000838:	4920      	ldr	r1, [pc, #128]	; (80008bc <ESP_Reset+0xc4>)
 800083a:	f005 fb67 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(!strstr((char*)rxBuffer, "\r\nOK\r\n")){
 800083e:	4920      	ldr	r1, [pc, #128]	; (80008c0 <ESP_Reset+0xc8>)
 8000840:	481e      	ldr	r0, [pc, #120]	; (80008bc <ESP_Reset+0xc4>)
 8000842:	f006 fa3e 	bl	8006cc2 <strstr>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d101      	bne.n	8000850 <ESP_Reset+0x58>
		return returnCode;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	e02b      	b.n	80008a8 <ESP_Reset+0xb0>
	}

	receiveAgain:
 8000850:	bf00      	nop
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 500);
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <ESP_Reset+0xc0>)
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800085c:	9200      	str	r2, [sp, #0]
 800085e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000862:	4916      	ldr	r1, [pc, #88]	; (80008bc <ESP_Reset+0xc4>)
 8000864:	f005 fb52 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nready\r\n")){
 8000868:	4916      	ldr	r1, [pc, #88]	; (80008c4 <ESP_Reset+0xcc>)
 800086a:	4814      	ldr	r0, [pc, #80]	; (80008bc <ESP_Reset+0xc4>)
 800086c:	f006 fa29 	bl	8006cc2 <strstr>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <ESP_Reset+0x84>
		returnCode = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	e008      	b.n	800088e <ESP_Reset+0x96>
	} else if(receiveCounter < 10){
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	2b09      	cmp	r3, #9
 8000880:	d803      	bhi.n	800088a <ESP_Reset+0x92>
		receiveCounter++;
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	3301      	adds	r3, #1
 8000886:	71bb      	strb	r3, [r7, #6]
		goto receiveAgain;
 8000888:	e7e3      	b.n	8000852 <ESP_Reset+0x5a>
	} else{
		returnCode = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	71fb      	strb	r3, [r7, #7]
	}
	memset(txBuffer, 0, TX_BUFFER_SIZE);
 800088e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000892:	2100      	movs	r1, #0
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <ESP_Reset+0xbc>)
 8000896:	f006 f9ff 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 800089a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089e:	2100      	movs	r1, #0
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <ESP_Reset+0xc4>)
 80008a2:	f006 f9f9 	bl	8006c98 <memset>
	return returnCode;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	080074d4 	.word	0x080074d4
 80008b4:	20000180 	.word	0x20000180
 80008b8:	2000007c 	.word	0x2000007c
 80008bc:	20000080 	.word	0x20000080
 80008c0:	080074cc 	.word	0x080074cc
 80008c4:	080074e0 	.word	0x080074e0

080008c8 <ESP_AP_Mode>:

uint8_t ESP_AP_Mode(){
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af02      	add	r7, sp, #8
	uint8_t returnCode = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint16_t rxLen = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	80bb      	strh	r3, [r7, #4]

	sprintf((char*)txBuffer, "AT+CWMODE_CUR=2\r\n");
 80008d6:	491c      	ldr	r1, [pc, #112]	; (8000948 <ESP_AP_Mode+0x80>)
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <ESP_AP_Mode+0x84>)
 80008da:	f006 f9bd 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <ESP_AP_Mode+0x88>)
 80008e0:	681c      	ldr	r4, [r3, #0]
 80008e2:	481a      	ldr	r0, [pc, #104]	; (800094c <ESP_AP_Mode+0x84>)
 80008e4:	f7ff fc32 	bl	800014c <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	4917      	ldr	r1, [pc, #92]	; (800094c <ESP_AP_Mode+0x84>)
 80008f0:	4620      	mov	r0, r4
 80008f2:	f005 fa79 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 1000);
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <ESP_AP_Mode+0x88>)
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000900:	9200      	str	r2, [sp, #0]
 8000902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000906:	4913      	ldr	r1, [pc, #76]	; (8000954 <ESP_AP_Mode+0x8c>)
 8000908:	f005 fb00 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nOK\r\n")){
 800090c:	4912      	ldr	r1, [pc, #72]	; (8000958 <ESP_AP_Mode+0x90>)
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <ESP_AP_Mode+0x8c>)
 8000910:	f006 f9d7 	bl	8006cc2 <strstr>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <ESP_AP_Mode+0x58>
		returnCode = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	e001      	b.n	8000924 <ESP_AP_Mode+0x5c>
	} else returnCode = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	71fb      	strb	r3, [r7, #7]
	memset(txBuffer, 0, TX_BUFFER_SIZE);
 8000924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000928:	2100      	movs	r1, #0
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <ESP_AP_Mode+0x84>)
 800092c:	f006 f9b4 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8000930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000934:	2100      	movs	r1, #0
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <ESP_AP_Mode+0x8c>)
 8000938:	f006 f9ae 	bl	8006c98 <memset>
	return returnCode;
 800093c:	79fb      	ldrb	r3, [r7, #7]
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	bf00      	nop
 8000948:	080074ec 	.word	0x080074ec
 800094c:	20000180 	.word	0x20000180
 8000950:	2000007c 	.word	0x2000007c
 8000954:	20000080 	.word	0x20000080
 8000958:	080074cc 	.word	0x080074cc

0800095c <ESP_AP_Config>:

uint8_t ESP_AP_Config(char* ssid, char* pwd, uint8_t chl, uint8_t ecn){
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af02      	add	r7, sp, #8
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	4611      	mov	r1, r2
 8000968:	461a      	mov	r2, r3
 800096a:	460b      	mov	r3, r1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	4613      	mov	r3, r2
 8000970:	71bb      	strb	r3, [r7, #6]
	uint8_t returnCode = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	75fb      	strb	r3, [r7, #23]
	uint16_t rxLen = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	82bb      	strh	r3, [r7, #20]

	sprintf((char*)txBuffer, "AT+CWSAP_CUR=\"%s\",\"%s\",%d,%d\r\n", ssid, pwd, chl, ecn);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	79ba      	ldrb	r2, [r7, #6]
 800097e:	9201      	str	r2, [sp, #4]
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	491c      	ldr	r1, [pc, #112]	; (80009f8 <ESP_AP_Config+0x9c>)
 8000988:	481c      	ldr	r0, [pc, #112]	; (80009fc <ESP_AP_Config+0xa0>)
 800098a:	f006 f965 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <ESP_AP_Config+0xa4>)
 8000990:	681c      	ldr	r4, [r3, #0]
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <ESP_AP_Config+0xa0>)
 8000994:	f7ff fbda 	bl	800014c <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	4917      	ldr	r1, [pc, #92]	; (80009fc <ESP_AP_Config+0xa0>)
 80009a0:	4620      	mov	r0, r4
 80009a2:	f005 fa21 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 1000);
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <ESP_AP_Config+0xa4>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b8:	4912      	ldr	r1, [pc, #72]	; (8000a04 <ESP_AP_Config+0xa8>)
 80009ba:	f005 faa7 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nOK\r\n")){
 80009be:	4912      	ldr	r1, [pc, #72]	; (8000a08 <ESP_AP_Config+0xac>)
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <ESP_AP_Config+0xa8>)
 80009c2:	f006 f97e 	bl	8006cc2 <strstr>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <ESP_AP_Config+0x76>
		returnCode = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	75fb      	strb	r3, [r7, #23]
 80009d0:	e001      	b.n	80009d6 <ESP_AP_Config+0x7a>
	} else returnCode = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	75fb      	strb	r3, [r7, #23]
	memset(txBuffer, 0, TX_BUFFER_SIZE);
 80009d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009da:	2100      	movs	r1, #0
 80009dc:	4807      	ldr	r0, [pc, #28]	; (80009fc <ESP_AP_Config+0xa0>)
 80009de:	f006 f95b 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 80009e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e6:	2100      	movs	r1, #0
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <ESP_AP_Config+0xa8>)
 80009ea:	f006 f955 	bl	8006c98 <memset>
	return returnCode;
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	371c      	adds	r7, #28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	08007500 	.word	0x08007500
 80009fc:	20000180 	.word	0x20000180
 8000a00:	2000007c 	.word	0x2000007c
 8000a04:	20000080 	.word	0x20000080
 8000a08:	080074cc 	.word	0x080074cc

08000a0c <ESP_AP_IP>:

uint8_t ESP_AP_IP(char* ip, char* getaway, char* mask){
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	uint8_t returnCode = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	75fb      	strb	r3, [r7, #23]
	uint16_t rxLen = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	82bb      	strh	r3, [r7, #20]

	sprintf((char*)txBuffer, "AT+CIPAP_CUR=\"%s\",\"%s\",\"%s\"\r\n", ip, getaway, mask);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	491c      	ldr	r1, [pc, #112]	; (8000a9c <ESP_AP_IP+0x90>)
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <ESP_AP_IP+0x94>)
 8000a2c:	f006 f914 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <ESP_AP_IP+0x98>)
 8000a32:	681c      	ldr	r4, [r3, #0]
 8000a34:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <ESP_AP_IP+0x94>)
 8000a36:	f7ff fb89 	bl	800014c <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	4917      	ldr	r1, [pc, #92]	; (8000aa0 <ESP_AP_IP+0x94>)
 8000a42:	4620      	mov	r0, r4
 8000a44:	f005 f9d0 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 1000);
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <ESP_AP_IP+0x98>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a54:	9200      	str	r2, [sp, #0]
 8000a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a5a:	4913      	ldr	r1, [pc, #76]	; (8000aa8 <ESP_AP_IP+0x9c>)
 8000a5c:	f005 fa56 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nOK\r\n")){
 8000a60:	4912      	ldr	r1, [pc, #72]	; (8000aac <ESP_AP_IP+0xa0>)
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <ESP_AP_IP+0x9c>)
 8000a64:	f006 f92d 	bl	8006cc2 <strstr>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <ESP_AP_IP+0x68>
		returnCode = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	75fb      	strb	r3, [r7, #23]
 8000a72:	e001      	b.n	8000a78 <ESP_AP_IP+0x6c>
	} else returnCode = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	75fb      	strb	r3, [r7, #23]
	memset(txBuffer, 0, TX_BUFFER_SIZE);
 8000a78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <ESP_AP_IP+0x94>)
 8000a80:	f006 f90a 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8000a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <ESP_AP_IP+0x9c>)
 8000a8c:	f006 f904 	bl	8006c98 <memset>
	return returnCode;
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	08007520 	.word	0x08007520
 8000aa0:	20000180 	.word	0x20000180
 8000aa4:	2000007c 	.word	0x2000007c
 8000aa8:	20000080 	.word	0x20000080
 8000aac:	080074cc 	.word	0x080074cc

08000ab0 <ESP_STA_Mode>:

uint8_t ESP_STA_Mode(){
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af02      	add	r7, sp, #8
	uint8_t returnCode = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	uint16_t rxLen = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	80bb      	strh	r3, [r7, #4]

	sprintf((char*)txBuffer, "AT+CWMODE_CUR=1\r\n");
 8000abe:	491c      	ldr	r1, [pc, #112]	; (8000b30 <ESP_STA_Mode+0x80>)
 8000ac0:	481c      	ldr	r0, [pc, #112]	; (8000b34 <ESP_STA_Mode+0x84>)
 8000ac2:	f006 f8c9 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <ESP_STA_Mode+0x88>)
 8000ac8:	681c      	ldr	r4, [r3, #0]
 8000aca:	481a      	ldr	r0, [pc, #104]	; (8000b34 <ESP_STA_Mode+0x84>)
 8000acc:	f7ff fb3e 	bl	800014c <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	4917      	ldr	r1, [pc, #92]	; (8000b34 <ESP_STA_Mode+0x84>)
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f005 f985 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 1000);
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <ESP_STA_Mode+0x88>)
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae8:	9200      	str	r2, [sp, #0]
 8000aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aee:	4913      	ldr	r1, [pc, #76]	; (8000b3c <ESP_STA_Mode+0x8c>)
 8000af0:	f005 fa0c 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nOK\r\n")){
 8000af4:	4912      	ldr	r1, [pc, #72]	; (8000b40 <ESP_STA_Mode+0x90>)
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <ESP_STA_Mode+0x8c>)
 8000af8:	f006 f8e3 	bl	8006cc2 <strstr>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <ESP_STA_Mode+0x58>
		returnCode = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	e001      	b.n	8000b0c <ESP_STA_Mode+0x5c>
	} else returnCode = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	71fb      	strb	r3, [r7, #7]
	memset(txBuffer, 0, TX_BUFFER_SIZE);
 8000b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b10:	2100      	movs	r1, #0
 8000b12:	4808      	ldr	r0, [pc, #32]	; (8000b34 <ESP_STA_Mode+0x84>)
 8000b14:	f006 f8c0 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8000b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <ESP_STA_Mode+0x8c>)
 8000b20:	f006 f8ba 	bl	8006c98 <memset>
	return returnCode;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	08007540 	.word	0x08007540
 8000b34:	20000180 	.word	0x20000180
 8000b38:	2000007c 	.word	0x2000007c
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	080074cc 	.word	0x080074cc

08000b44 <ESP_STA_IP>:

uint8_t ESP_STA_IP(char* ip, char* getaway, char* mask){
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	uint8_t returnCode = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	75fb      	strb	r3, [r7, #23]
	uint16_t rxLen = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	82bb      	strh	r3, [r7, #20]

	sprintf((char*)txBuffer, "AT+CIPSTA_CUR=\"%s\",\"%s\",\"%s\"\r\n", ip, getaway, mask);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	491c      	ldr	r1, [pc, #112]	; (8000bd4 <ESP_STA_IP+0x90>)
 8000b62:	481d      	ldr	r0, [pc, #116]	; (8000bd8 <ESP_STA_IP+0x94>)
 8000b64:	f006 f878 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <ESP_STA_IP+0x98>)
 8000b6a:	681c      	ldr	r4, [r3, #0]
 8000b6c:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <ESP_STA_IP+0x94>)
 8000b6e:	f7ff faed 	bl	800014c <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	4917      	ldr	r1, [pc, #92]	; (8000bd8 <ESP_STA_IP+0x94>)
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f005 f934 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 1000);
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <ESP_STA_IP+0x98>)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b8c:	9200      	str	r2, [sp, #0]
 8000b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b92:	4913      	ldr	r1, [pc, #76]	; (8000be0 <ESP_STA_IP+0x9c>)
 8000b94:	f005 f9ba 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nOK\r\n")){
 8000b98:	4912      	ldr	r1, [pc, #72]	; (8000be4 <ESP_STA_IP+0xa0>)
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <ESP_STA_IP+0x9c>)
 8000b9c:	f006 f891 	bl	8006cc2 <strstr>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <ESP_STA_IP+0x68>
		returnCode = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	75fb      	strb	r3, [r7, #23]
 8000baa:	e001      	b.n	8000bb0 <ESP_STA_IP+0x6c>
	} else returnCode = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	75fb      	strb	r3, [r7, #23]
	memset(txBuffer, 0, TX_BUFFER_SIZE);
 8000bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <ESP_STA_IP+0x94>)
 8000bb8:	f006 f86e 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8000bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <ESP_STA_IP+0x9c>)
 8000bc4:	f006 f868 	bl	8006c98 <memset>
	return returnCode;
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08007554 	.word	0x08007554
 8000bd8:	20000180 	.word	0x20000180
 8000bdc:	2000007c 	.word	0x2000007c
 8000be0:	20000080 	.word	0x20000080
 8000be4:	080074cc 	.word	0x080074cc

08000be8 <ESP_ConnectToAP>:
uint8_t ESP_ConnectToAP(char* ssid, char* pwd){
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	uint8_t receiveCounter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]
	uint8_t returnCode = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73bb      	strb	r3, [r7, #14]
	uint16_t rxLen = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	81bb      	strh	r3, [r7, #12]

	sprintf((char*)txBuffer, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, pwd);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4925      	ldr	r1, [pc, #148]	; (8000c98 <ESP_ConnectToAP+0xb0>)
 8000c04:	4825      	ldr	r0, [pc, #148]	; (8000c9c <ESP_ConnectToAP+0xb4>)
 8000c06:	f006 f827 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <ESP_ConnectToAP+0xb8>)
 8000c0c:	681c      	ldr	r4, [r3, #0]
 8000c0e:	4823      	ldr	r0, [pc, #140]	; (8000c9c <ESP_ConnectToAP+0xb4>)
 8000c10:	f7ff fa9c 	bl	800014c <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	4920      	ldr	r1, [pc, #128]	; (8000c9c <ESP_ConnectToAP+0xb4>)
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f005 f8e3 	bl	8005de8 <HAL_UART_Transmit>

	receiveAgain:
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 15000);
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <ESP_ConnectToAP+0xb8>)
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000c2e:	9200      	str	r2, [sp, #0]
 8000c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c34:	491b      	ldr	r1, [pc, #108]	; (8000ca4 <ESP_ConnectToAP+0xbc>)
 8000c36:	f005 f969 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nOK\r\n")){
 8000c3a:	491b      	ldr	r1, [pc, #108]	; (8000ca8 <ESP_ConnectToAP+0xc0>)
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <ESP_ConnectToAP+0xbc>)
 8000c3e:	f006 f840 	bl	8006cc2 <strstr>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <ESP_ConnectToAP+0x66>
		returnCode = 1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73bb      	strb	r3, [r7, #14]
 8000c4c:	e012      	b.n	8000c74 <ESP_ConnectToAP+0x8c>
	} else if(strstr((char*)rxBuffer, "\r\nFAIL\r\n")){
 8000c4e:	4917      	ldr	r1, [pc, #92]	; (8000cac <ESP_ConnectToAP+0xc4>)
 8000c50:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <ESP_ConnectToAP+0xbc>)
 8000c52:	f006 f836 	bl	8006cc2 <strstr>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <ESP_ConnectToAP+0x7a>
		returnCode = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73bb      	strb	r3, [r7, #14]
 8000c60:	e008      	b.n	8000c74 <ESP_ConnectToAP+0x8c>
	} else if(receiveCounter < 3){
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d803      	bhi.n	8000c70 <ESP_ConnectToAP+0x88>
		receiveCounter++;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
		goto receiveAgain;
 8000c6e:	e7d8      	b.n	8000c22 <ESP_ConnectToAP+0x3a>
	} else{
		returnCode = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73bb      	strb	r3, [r7, #14]
	}

	memset(txBuffer, 0, TX_BUFFER_SIZE);
 8000c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <ESP_ConnectToAP+0xb4>)
 8000c7c:	f006 f80c 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8000c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c84:	2100      	movs	r1, #0
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <ESP_ConnectToAP+0xbc>)
 8000c88:	f006 f806 	bl	8006c98 <memset>
	return returnCode;
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08007574 	.word	0x08007574
 8000c9c:	20000180 	.word	0x20000180
 8000ca0:	2000007c 	.word	0x2000007c
 8000ca4:	20000080 	.word	0x20000080
 8000ca8:	080074cc 	.word	0x080074cc
 8000cac:	08007590 	.word	0x08007590

08000cb0 <ESP_StartTCPServer>:

uint8_t ESP_StartTCPServer(uint16_t port){
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
	uint8_t returnCode = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]
	uint16_t rxLen = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	81bb      	strh	r3, [r7, #12]

	sprintf((char*)txBuffer, "AT+CIPMUX=1\r\n");
 8000cc2:	4930      	ldr	r1, [pc, #192]	; (8000d84 <ESP_StartTCPServer+0xd4>)
 8000cc4:	4830      	ldr	r0, [pc, #192]	; (8000d88 <ESP_StartTCPServer+0xd8>)
 8000cc6:	f005 ffc7 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 8000cca:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <ESP_StartTCPServer+0xdc>)
 8000ccc:	681c      	ldr	r4, [r3, #0]
 8000cce:	482e      	ldr	r0, [pc, #184]	; (8000d88 <ESP_StartTCPServer+0xd8>)
 8000cd0:	f7ff fa3c 	bl	800014c <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	492b      	ldr	r1, [pc, #172]	; (8000d88 <ESP_StartTCPServer+0xd8>)
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f005 f883 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 1000);
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <ESP_StartTCPServer+0xdc>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf4:	4926      	ldr	r1, [pc, #152]	; (8000d90 <ESP_StartTCPServer+0xe0>)
 8000cf6:	f005 f909 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(!strstr((char*)rxBuffer, "\r\nOK\r\n")){
 8000cfa:	4926      	ldr	r1, [pc, #152]	; (8000d94 <ESP_StartTCPServer+0xe4>)
 8000cfc:	4824      	ldr	r0, [pc, #144]	; (8000d90 <ESP_StartTCPServer+0xe0>)
 8000cfe:	f005 ffe0 	bl	8006cc2 <strstr>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <ESP_StartTCPServer+0x5c>
		return returnCode;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	e036      	b.n	8000d7a <ESP_StartTCPServer+0xca>
	}

	sprintf((char*)txBuffer, "AT+CIPSERVER=1,%d\r\n", port);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4921      	ldr	r1, [pc, #132]	; (8000d98 <ESP_StartTCPServer+0xe8>)
 8000d12:	481d      	ldr	r0, [pc, #116]	; (8000d88 <ESP_StartTCPServer+0xd8>)
 8000d14:	f005 ffa0 	bl	8006c58 <siprintf>
	HAL_UART_Transmit(m_uart, txBuffer, strlen((char*)txBuffer), 100);
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <ESP_StartTCPServer+0xdc>)
 8000d1a:	681c      	ldr	r4, [r3, #0]
 8000d1c:	481a      	ldr	r0, [pc, #104]	; (8000d88 <ESP_StartTCPServer+0xd8>)
 8000d1e:	f7ff fa15 	bl	800014c <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	2364      	movs	r3, #100	; 0x64
 8000d28:	4917      	ldr	r1, [pc, #92]	; (8000d88 <ESP_StartTCPServer+0xd8>)
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f005 f85c 	bl	8005de8 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle(m_uart, rxBuffer, RX_BUFFER_SIZE, &rxLen, 1000);
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <ESP_StartTCPServer+0xdc>)
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d3c:	9200      	str	r2, [sp, #0]
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	4913      	ldr	r1, [pc, #76]	; (8000d90 <ESP_StartTCPServer+0xe0>)
 8000d44:	f005 f8e2 	bl	8005f0c <HAL_UARTEx_ReceiveToIdle>
	if(strstr((char*)rxBuffer, "\r\nOK\r\n")){
 8000d48:	4912      	ldr	r1, [pc, #72]	; (8000d94 <ESP_StartTCPServer+0xe4>)
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <ESP_StartTCPServer+0xe0>)
 8000d4c:	f005 ffb9 	bl	8006cc2 <strstr>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <ESP_StartTCPServer+0xac>
		returnCode = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e001      	b.n	8000d60 <ESP_StartTCPServer+0xb0>
	} else returnCode = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

	memset(txBuffer, 0, TX_BUFFER_SIZE);
 8000d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d64:	2100      	movs	r1, #0
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <ESP_StartTCPServer+0xd8>)
 8000d68:	f005 ff96 	bl	8006c98 <memset>
	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8000d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d70:	2100      	movs	r1, #0
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <ESP_StartTCPServer+0xe0>)
 8000d74:	f005 ff90 	bl	8006c98 <memset>
	return returnCode;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	0800759c 	.word	0x0800759c
 8000d88:	20000180 	.word	0x20000180
 8000d8c:	2000007c 	.word	0x2000007c
 8000d90:	20000080 	.word	0x20000080
 8000d94:	080074cc 	.word	0x080074cc
 8000d98:	080075ac 	.word	0x080075ac

08000d9c <ESP_EnableCallbacs>:

void ESP_EnableCallbacs(){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	while(HAL_UARTEx_ReceiveToIdle_IT(m_uart, rxBuffer, RX_BUFFER_SIZE) != HAL_OK);
 8000da0:	bf00      	nop
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <ESP_EnableCallbacs+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	4906      	ldr	r1, [pc, #24]	; (8000dc4 <ESP_EnableCallbacs+0x28>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	f005 f98a 	bl	80060c6 <HAL_UARTEx_ReceiveToIdle_IT>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f4      	bne.n	8000da2 <ESP_EnableCallbacs+0x6>
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000007c 	.word	0x2000007c
 8000dc4:	20000080 	.word	0x20000080

08000dc8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
    if(huart == m_uart)
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d136      	bne.n	8000e4c <HAL_UARTEx_RxEventCallback+0x84>
    {
    	char* idpIdx, *idIdx, *lenIdx, *dataIdx;
    	uint8_t id;
    	uint16_t len;
    	idpIdx = strstr((char*)rxBuffer, "+IPD");
 8000dde:	491e      	ldr	r1, [pc, #120]	; (8000e58 <HAL_UARTEx_RxEventCallback+0x90>)
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <HAL_UARTEx_RxEventCallback+0x94>)
 8000de2:	f005 ff6e 	bl	8006cc2 <strstr>
 8000de6:	61f8      	str	r0, [r7, #28]
    	dataIdx = strchr((char*)rxBuffer, ':') + 1;
 8000de8:	213a      	movs	r1, #58	; 0x3a
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <HAL_UARTEx_RxEventCallback+0x94>)
 8000dec:	f005 ff5c 	bl	8006ca8 <strchr>
 8000df0:	4603      	mov	r3, r0
 8000df2:	3301      	adds	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
    	if(idpIdx != NULL){
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d015      	beq.n	8000e28 <HAL_UARTEx_RxEventCallback+0x60>
        	idIdx = idpIdx + 5;
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	3305      	adds	r3, #5
 8000e00:	617b      	str	r3, [r7, #20]
        	lenIdx = idpIdx + 7;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3307      	adds	r3, #7
 8000e06:	613b      	str	r3, [r7, #16]
        	id = atoi(idIdx);
 8000e08:	6978      	ldr	r0, [r7, #20]
 8000e0a:	f005 fdd1 	bl	80069b0 <atoi>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]
        	len = atoi(lenIdx);
 8000e12:	6938      	ldr	r0, [r7, #16]
 8000e14:	f005 fdcc 	bl	80069b0 <atoi>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	81bb      	strh	r3, [r7, #12]
        	ESP_IPD_Callback(id, len, dataIdx);
 8000e1c:	89b9      	ldrh	r1, [r7, #12]
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 f86c 	bl	8001f00 <ESP_IPD_Callback>
    	}

    	memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8000e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <HAL_UARTEx_RxEventCallback+0x94>)
 8000e30:	f005 ff32 	bl	8006c98 <memset>
    	while(HAL_UARTEx_ReceiveToIdle_IT(m_uart, rxBuffer, RX_BUFFER_SIZE) != HAL_OK);
 8000e34:	bf00      	nop
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3e:	4907      	ldr	r1, [pc, #28]	; (8000e5c <HAL_UARTEx_RxEventCallback+0x94>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 f940 	bl	80060c6 <HAL_UARTEx_ReceiveToIdle_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1f4      	bne.n	8000e36 <HAL_UARTEx_RxEventCallback+0x6e>
    }
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000007c 	.word	0x2000007c
 8000e58:	080075c0 	.word	0x080075c0
 8000e5c:	20000080 	.word	0x20000080

08000e60 <FlashPROM_Init>:
#include "FlashPROM.h"

uint16_t BUFFSIZE = 0;

void FlashPROM_Init(uint16_t buffsize){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	BUFFSIZE = buffsize;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <FlashPROM_Init+0x1c>)
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	8013      	strh	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000280 	.word	0x20000280

08000e80 <FlashPROM_Write>:
}
#endif

#ifdef __STM32F1xx_HAL_H

void FlashPROM_Write(void* buff){
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	uint32_t WRITE_ADDR = START_ADDR;
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <FlashPROM_Write+0xa4>)
 8000e8a:	60fb      	str	r3, [r7, #12]
	while(WRITE_ADDR < END_ADDR){
 8000e8c:	e00a      	b.n	8000ea4 <FlashPROM_Write+0x24>
		if(*(__IO uint32_t*)WRITE_ADDR != 0xFFFFFFFF)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e96:	d00a      	beq.n	8000eae <FlashPROM_Write+0x2e>
			WRITE_ADDR += BUFFSIZE;
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <FlashPROM_Write+0xa8>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
	while(WRITE_ADDR < END_ADDR){
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <FlashPROM_Write+0xac>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d9f0      	bls.n	8000e8e <FlashPROM_Write+0xe>
 8000eac:	e000      	b.n	8000eb0 <FlashPROM_Write+0x30>
		else break;
 8000eae:	bf00      	nop
	}

	if((WRITE_ADDR > END_ADDR) || (WRITE_ADDR + BUFFSIZE > END_ADDR)){
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <FlashPROM_Write+0xb0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d207      	bcs.n	8000ec8 <FlashPROM_Write+0x48>
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <FlashPROM_Write+0xa8>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <FlashPROM_Write+0xb0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d303      	bcc.n	8000ed0 <FlashPROM_Write+0x50>
		EraseFlash();
 8000ec8:	f000 f888 	bl	8000fdc <EraseFlash>
		WRITE_ADDR = START_ADDR;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <FlashPROM_Write+0xa4>)
 8000ece:	60fb      	str	r3, [r7, #12]
	}

	HAL_FLASH_Unlock();
 8000ed0:	f002 fe70 	bl	8003bb4 <HAL_FLASH_Unlock>
	for(int i = 0; i < BUFFSIZE / 2; i++){
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	e016      	b.n	8000f08 <FlashPROM_Write+0x88>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, WRITE_ADDR + i * 2, *(uint16_t*)(buff + i * 2));
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	18d1      	adds	r1, r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	461c      	mov	r4, r3
 8000ef6:	4615      	mov	r5, r2
 8000ef8:	4622      	mov	r2, r4
 8000efa:	462b      	mov	r3, r5
 8000efc:	2001      	movs	r0, #1
 8000efe:	f002 fde9 	bl	8003ad4 <HAL_FLASH_Program>
	for(int i = 0; i < BUFFSIZE / 2; i++){
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3301      	adds	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <FlashPROM_Write+0xa8>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	4293      	cmp	r3, r2
 8000f16:	dbe0      	blt.n	8000eda <FlashPROM_Write+0x5a>
	}
	HAL_FLASH_Lock();
 8000f18:	f002 fe72 	bl	8003c00 <HAL_FLASH_Lock>
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bdb0      	pop	{r4, r5, r7, pc}
 8000f24:	08007c00 	.word	0x08007c00
 8000f28:	20000280 	.word	0x20000280
 8000f2c:	08007ffe 	.word	0x08007ffe
 8000f30:	08008000 	.word	0x08008000

08000f34 <FlashPROM_Read>:

void FlashPROM_Read(void* buff){
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	uint32_t READ_ADDR = START_ADDR;
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <FlashPROM_Read+0x98>)
 8000f3e:	60fb      	str	r3, [r7, #12]
	while(READ_ADDR < END_ADDR){
 8000f40:	e00e      	b.n	8000f60 <FlashPROM_Read+0x2c>
		if(*(__IO uint32_t*)(READ_ADDR + BUFFSIZE) != 0xFFFFFFFF)
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <FlashPROM_Read+0x9c>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f52:	d00a      	beq.n	8000f6a <FlashPROM_Read+0x36>
			READ_ADDR += BUFFSIZE;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <FlashPROM_Read+0x9c>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	while(READ_ADDR < END_ADDR){
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <FlashPROM_Read+0xa0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d9ec      	bls.n	8000f42 <FlashPROM_Read+0xe>
 8000f68:	e000      	b.n	8000f6c <FlashPROM_Read+0x38>
		else break;
 8000f6a:	bf00      	nop
	}

	if((READ_ADDR > END_ADDR) || (READ_ADDR + BUFFSIZE > END_ADDR)){
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <FlashPROM_Read+0xa4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d207      	bcs.n	8000f84 <FlashPROM_Read+0x50>
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <FlashPROM_Read+0x9c>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <FlashPROM_Read+0xa4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d301      	bcc.n	8000f88 <FlashPROM_Read+0x54>
		READ_ADDR = START_ADDR;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <FlashPROM_Read+0x98>)
 8000f86:	60fb      	str	r3, [r7, #12]
	}

	for(int i = 0; i < BUFFSIZE / 2; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	e00f      	b.n	8000fae <FlashPROM_Read+0x7a>
		*(uint16_t*)(buff + i * 2) = *(__IO uint32_t*)(READ_ADDR + i * 2);
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < BUFFSIZE / 2; i++)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <FlashPROM_Read+0x9c>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	085b      	lsrs	r3, r3, #1
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	dbe7      	blt.n	8000f8e <FlashPROM_Read+0x5a>
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	08007c00 	.word	0x08007c00
 8000fd0:	20000280 	.word	0x20000280
 8000fd4:	08007ffe 	.word	0x08007ffe
 8000fd8:	08008000 	.word	0x08008000

08000fdc <EraseFlash>:

void EraseFlash(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <EraseFlash+0x38>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = START_ADDR;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <EraseFlash+0x38>)
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <EraseFlash+0x3c>)
 8000fec:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <EraseFlash+0x38>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]

	uint32_t page_error = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]

	HAL_FLASH_Unlock();
 8000ff8:	f002 fddc 	bl	8003bb4 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &page_error);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <EraseFlash+0x38>)
 8001002:	f002 febf 	bl	8003d84 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8001006:	f002 fdfb 	bl	8003c00 <HAL_FLASH_Lock>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000284 	.word	0x20000284
 8001018:	08007c00 	.word	0x08007c00

0800101c <WS2812B_Init>:
#include <WS2812B.h>

unsigned long T;

void WS2812B_Init(WS2812B_t* strip, uint16_t numleds, TIM_HandleTypeDef* htim, uint32_t tim_ch){
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	460b      	mov	r3, r1
 800102a:	817b      	strh	r3, [r7, #10]
	strip->leds = calloc(numleds, sizeof(RGB_t));
 800102c:	897b      	ldrh	r3, [r7, #10]
 800102e:	2104      	movs	r1, #4
 8001030:	4618      	mov	r0, r3
 8001032:	f005 fcc1 	bl	80069b8 <calloc>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	615a      	str	r2, [r3, #20]
	strip->pwm_buff = calloc(numleds * COLORS_BITS + RESET_BITS, sizeof(uint16_t));
 800103e:	897a      	ldrh	r2, [r7, #10]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	3332      	adds	r3, #50	; 0x32
 800104a:	2102      	movs	r1, #2
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fcb3 	bl	80069b8 <calloc>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	60da      	str	r2, [r3, #12]
	strip->htim = htim;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	601a      	str	r2, [r3, #0]
	strip->tim_ch = tim_ch;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	605a      	str	r2, [r3, #4]
	strip->brightness = 127;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	227f      	movs	r2, #127	; 0x7f
 800106a:	749a      	strb	r2, [r3, #18]
	strip->max_numleds = numleds;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	897a      	ldrh	r2, [r7, #10]
 8001070:	811a      	strh	r2, [r3, #8]
	strip->numleds = 60;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	223c      	movs	r2, #60	; 0x3c
 8001076:	815a      	strh	r2, [r3, #10]
	strip->fps = 60;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	223c      	movs	r2, #60	; 0x3c
 800107c:	821a      	strh	r2, [r3, #16]
	strip->onOff = 1;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	74da      	strb	r2, [r3, #19]
	for(int i = 0; i < strip->max_numleds; i++){
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e01e      	b.n	80010c8 <WS2812B_Init+0xac>
		strip->leds[i].R = 255;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	22ff      	movs	r2, #255	; 0xff
 8001096:	701a      	strb	r2, [r3, #0]
		strip->leds[i].G = 0;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	2200      	movs	r2, #0
 80010a4:	705a      	strb	r2, [r3, #1]
		strip->leds[i].B = 0;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	2200      	movs	r2, #0
 80010b2:	709a      	strb	r2, [r3, #2]
		strip->leds[i].brightness = 127;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	227f      	movs	r2, #127	; 0x7f
 80010c0:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < strip->max_numleds; i++){
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	891b      	ldrh	r3, [r3, #8]
 80010cc:	461a      	mov	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	dbda      	blt.n	800108a <WS2812B_Init+0x6e>
	}
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <WS2812B_SetBrightness>:

void WS2812B_SetFPS(WS2812B_t* strip, uint16_t fps){
	strip->fps = fps;
}

void WS2812B_SetBrightness(WS2812B_t* strip, uint8_t brightness){
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	70fb      	strb	r3, [r7, #3]
	strip->brightness = brightness;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < strip->numleds; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	e009      	b.n	800110a <WS2812B_SetBrightness+0x2c>
		strip->leds[i].brightness = brightness;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	78fa      	ldrb	r2, [r7, #3]
 8001102:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < strip->numleds; i++)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	895b      	ldrh	r3, [r3, #10]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4293      	cmp	r3, r2
 8001114:	dbef      	blt.n	80010f6 <WS2812B_SetBrightness+0x18>
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <WS2812B_SetPixelBrightness>:

void WS2812B_SetPixelBrightness(WS2812B_t* strip, uint8_t brightness, uint16_t led_pos){
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	70fb      	strb	r3, [r7, #3]
 800112e:	4613      	mov	r3, r2
 8001130:	803b      	strh	r3, [r7, #0]
	strip->leds[led_pos].brightness = brightness;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	883b      	ldrh	r3, [r7, #0]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	70da      	strb	r2, [r3, #3]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <WS2812B_SetNumLeds>:

void WS2812B_SetPixelBrightnessCRT(WS2812B_t* strip, float brightness, uint16_t led_pos){
	strip->leds[led_pos].brightness = (uint8_t)(crt2(brightness, strip->brightness));
}

void WS2812B_SetNumLeds(WS2812B_t* strip, uint16_t numleds){
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]
	if(numleds <= strip->max_numleds)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	891b      	ldrh	r3, [r3, #8]
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	429a      	cmp	r2, r3
 800115e:	d802      	bhi.n	8001166 <WS2812B_SetNumLeds+0x1c>
		strip->numleds = numleds;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	815a      	strh	r2, [r3, #10]
	WS2812B_SetBrightness(strip, strip->brightness);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7c9b      	ldrb	r3, [r3, #18]
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffb6 	bl	80010de <WS2812B_SetBrightness>
	for(int i = 0; i < strip->max_numleds * COLORS_BITS; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e009      	b.n	800118c <WS2812B_SetNumLeds+0x42>
		strip->pwm_buff[i] = LOW;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	221c      	movs	r2, #28
 8001184:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < strip->max_numleds * COLORS_BITS; i++)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	461a      	mov	r2, r3
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4293      	cmp	r3, r2
 80011a0:	dbea      	blt.n	8001178 <WS2812B_SetNumLeds+0x2e>
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <WS2812B_Show>:

void WS2812B_Show(WS2812B_t* strip){
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - T > 1000/strip->fps){
 80011b4:	f001 fdc4 	bl	8002d40 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <WS2812B_Show+0x70>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	8a12      	ldrh	r2, [r2, #16]
 80011c4:	4611      	mov	r1, r2
 80011c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ca:	fb92 f2f1 	sdiv	r2, r2, r1
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d920      	bls.n	8001214 <WS2812B_Show+0x68>
		HAL_TIM_PWM_Stop_DMA(strip->htim, strip->tim_ch);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4619      	mov	r1, r3
 80011dc:	4610      	mov	r0, r2
 80011de:	f003 ff37 	bl	8005050 <HAL_TIM_PWM_Stop_DMA>
		RGB_to_GRB_PWM(strip);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fc26 	bl	8001a34 <RGB_to_GRB_PWM>
		HAL_TIM_PWM_Start_DMA(strip->htim, strip->tim_ch, (uint32_t*)(strip->pwm_buff), strip->max_numleds * COLORS_BITS + RESET_BITS);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6859      	ldr	r1, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	891b      	ldrh	r3, [r3, #8]
 80011f8:	461c      	mov	r4, r3
 80011fa:	0064      	lsls	r4, r4, #1
 80011fc:	4423      	add	r3, r4
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	b29b      	uxth	r3, r3
 8001202:	3332      	adds	r3, #50	; 0x32
 8001204:	b29b      	uxth	r3, r3
 8001206:	f003 fd89 	bl	8004d1c <HAL_TIM_PWM_Start_DMA>
		T = HAL_GetTick();
 800120a:	f001 fd99 	bl	8002d40 <HAL_GetTick>
 800120e:	4603      	mov	r3, r0
 8001210:	4a02      	ldr	r2, [pc, #8]	; (800121c <WS2812B_Show+0x70>)
 8001212:	6013      	str	r3, [r2, #0]
	}
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	20000294 	.word	0x20000294

08001220 <WS2812B_Off>:

void WS2812B_Off(WS2812B_t* strip){
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - T > 1000/strip->fps){
 8001228:	f001 fd8a 	bl	8002d40 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <WS2812B_Off+0x9c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	8a12      	ldrh	r2, [r2, #16]
 8001238:	4611      	mov	r1, r2
 800123a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800123e:	fb92 f2f1 	sdiv	r2, r2, r1
 8001242:	4293      	cmp	r3, r2
 8001244:	d935      	bls.n	80012b2 <WS2812B_Off+0x92>
		HAL_TIM_PWM_Stop_DMA(strip->htim, strip->tim_ch);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4619      	mov	r1, r3
 8001250:	4610      	mov	r0, r2
 8001252:	f003 fefd 	bl	8005050 <HAL_TIM_PWM_Stop_DMA>
		for(size_t i = 0; i < strip->max_numleds * COLORS_BITS; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e009      	b.n	8001270 <WS2812B_Off+0x50>
			strip->pwm_buff[i] = LOW;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	221c      	movs	r2, #28
 8001268:	801a      	strh	r2, [r3, #0]
		for(size_t i = 0; i < strip->max_numleds * COLORS_BITS; i++)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	891b      	ldrh	r3, [r3, #8]
 8001274:	461a      	mov	r2, r3
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4293      	cmp	r3, r2
 8001284:	d3ea      	bcc.n	800125c <WS2812B_Off+0x3c>
		HAL_TIM_PWM_Start_DMA(strip->htim, strip->tim_ch, (uint32_t*)(strip->pwm_buff), strip->max_numleds * COLORS_BITS + RESET_BITS);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6859      	ldr	r1, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	891b      	ldrh	r3, [r3, #8]
 8001296:	461c      	mov	r4, r3
 8001298:	0064      	lsls	r4, r4, #1
 800129a:	4423      	add	r3, r4
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	3332      	adds	r3, #50	; 0x32
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	f003 fd3a 	bl	8004d1c <HAL_TIM_PWM_Start_DMA>
		T = HAL_GetTick();
 80012a8:	f001 fd4a 	bl	8002d40 <HAL_GetTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a03      	ldr	r2, [pc, #12]	; (80012bc <WS2812B_Off+0x9c>)
 80012b0:	6013      	str	r3, [r2, #0]
	}
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000294 	.word	0x20000294

080012c0 <WS2812B_SetPixelRGB>:
void WS2812B_SetPixelRGB(WS2812B_t* strip, uint8_t R, uint8_t G, uint8_t B, uint16_t led_pos){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4608      	mov	r0, r1
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	70fb      	strb	r3, [r7, #3]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70bb      	strb	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	707b      	strb	r3, [r7, #1]
	strip->leds[led_pos].R = R;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	8a3b      	ldrh	r3, [r7, #16]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	78fa      	ldrb	r2, [r7, #3]
 80012e6:	701a      	strb	r2, [r3, #0]
	strip->leds[led_pos].G = G;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	8a3b      	ldrh	r3, [r7, #16]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	78ba      	ldrb	r2, [r7, #2]
 80012f4:	705a      	strb	r2, [r3, #1]
	strip->leds[led_pos].B = B;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	8a3b      	ldrh	r3, [r7, #16]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	787a      	ldrb	r2, [r7, #1]
 8001302:	709a      	strb	r2, [r3, #2]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <WS2812B_SetPixelHUE>:

void WS2812B_SetPixelHUE(WS2812B_t* strip, uint8_t h, uint16_t led_pos){
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af02      	add	r7, sp, #8
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	70fb      	strb	r3, [r7, #3]
 800131a:	4613      	mov	r3, r2
 800131c:	803b      	strh	r3, [r7, #0]
	uint8_t shift = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
	if(h > 170){
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	2baa      	cmp	r3, #170	; 0xaa
 8001326:	d912      	bls.n	800134e <WS2812B_SetPixelHUE+0x40>
		shift = (h - 170) * 3;
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	461a      	mov	r2, r3
 800132c:	0052      	lsls	r2, r2, #1
 800132e:	4413      	add	r3, r2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3302      	adds	r3, #2
 8001334:	73fb      	strb	r3, [r7, #15]
		WS2812B_SetPixelRGB(strip, shift, 0, ~shift, led_pos);
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	43db      	mvns	r3, r3
 800133a:	b2da      	uxtb	r2, r3
 800133c:	7bf9      	ldrb	r1, [r7, #15]
 800133e:	883b      	ldrh	r3, [r7, #0]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	4613      	mov	r3, r2
 8001344:	2200      	movs	r2, #0
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffba 	bl	80012c0 <WS2812B_SetPixelRGB>
		WS2812B_SetPixelRGB(strip, 0, ~shift, shift, led_pos);
	}else{
		shift = h * 3;
		WS2812B_SetPixelRGB(strip, ~shift, shift, 0, led_pos);
	}
}
 800134c:	e024      	b.n	8001398 <WS2812B_SetPixelHUE+0x8a>
	}else if(h > 85){
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	2b55      	cmp	r3, #85	; 0x55
 8001352:	d912      	bls.n	800137a <WS2812B_SetPixelHUE+0x6c>
		shift = (h - 85) * 3;
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	461a      	mov	r2, r3
 8001358:	0052      	lsls	r2, r2, #1
 800135a:	4413      	add	r3, r2
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3301      	adds	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
		WS2812B_SetPixelRGB(strip, 0, ~shift, shift, led_pos);
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	43db      	mvns	r3, r3
 8001366:	b2da      	uxtb	r2, r3
 8001368:	7bf9      	ldrb	r1, [r7, #15]
 800136a:	883b      	ldrh	r3, [r7, #0]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	460b      	mov	r3, r1
 8001370:	2100      	movs	r1, #0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa4 	bl	80012c0 <WS2812B_SetPixelRGB>
}
 8001378:	e00e      	b.n	8001398 <WS2812B_SetPixelHUE+0x8a>
		shift = h * 3;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	461a      	mov	r2, r3
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	4413      	add	r3, r2
 8001382:	73fb      	strb	r3, [r7, #15]
		WS2812B_SetPixelRGB(strip, ~shift, shift, 0, led_pos);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	43db      	mvns	r3, r3
 8001388:	b2d9      	uxtb	r1, r3
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	883b      	ldrh	r3, [r7, #0]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff94 	bl	80012c0 <WS2812B_SetPixelRGB>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Preset_Rainbow>:

//Presets
void Preset_Rainbow(WS2812B_t *strip, uint16_t begin, uint16_t end, uint8_t mirrored){
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	817b      	strh	r3, [r7, #10]
 80013b2:	460b      	mov	r3, r1
 80013b4:	813b      	strh	r3, [r7, #8]
 80013b6:	4613      	mov	r3, r2
 80013b8:	71fb      	strb	r3, [r7, #7]
	if(mirrored){
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d02c      	beq.n	800141a <Preset_Rainbow+0x7a>
		for(uint16_t i = begin; i <= end; i++) {
 80013c0:	897b      	ldrh	r3, [r7, #10]
 80013c2:	82fb      	strh	r3, [r7, #22]
 80013c4:	e024      	b.n	8001410 <Preset_Rainbow+0x70>
			WS2812B_SetPixelHUE(strip, (uint8_t)(interpolation(0, (end - begin), 0, 255, end - i)), i);
 80013c6:	893a      	ldrh	r2, [r7, #8]
 80013c8:	897b      	ldrh	r3, [r7, #10]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff7f 	bl	80002d0 <__aeabi_i2f>
 80013d2:	4604      	mov	r4, r0
 80013d4:	893a      	ldrh	r2, [r7, #8]
 80013d6:	8afb      	ldrh	r3, [r7, #22]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe ff78 	bl	80002d0 <__aeabi_i2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <Preset_Rainbow+0xd8>)
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4621      	mov	r1, r4
 80013ec:	f04f 0000 	mov.w	r0, #0
 80013f0:	f000 fc2a 	bl	8001c48 <interpolation>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f984 	bl	8000704 <__aeabi_f2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	8afa      	ldrh	r2, [r7, #22]
 8001402:	4619      	mov	r1, r3
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff ff82 	bl	800130e <WS2812B_SetPixelHUE>
		for(uint16_t i = begin; i <= end; i++) {
 800140a:	8afb      	ldrh	r3, [r7, #22]
 800140c:	3301      	adds	r3, #1
 800140e:	82fb      	strh	r3, [r7, #22]
 8001410:	8afa      	ldrh	r2, [r7, #22]
 8001412:	893b      	ldrh	r3, [r7, #8]
 8001414:	429a      	cmp	r2, r3
 8001416:	d9d6      	bls.n	80013c6 <Preset_Rainbow+0x26>
	}else{
		for(uint16_t i = begin; i <= end; i++) {
			WS2812B_SetPixelHUE(strip, (uint8_t)(interpolation(0, (end - begin), 0, 255, i)), i);
		}
	}
}
 8001418:	e029      	b.n	800146e <Preset_Rainbow+0xce>
		for(uint16_t i = begin; i <= end; i++) {
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	82bb      	strh	r3, [r7, #20]
 800141e:	e022      	b.n	8001466 <Preset_Rainbow+0xc6>
			WS2812B_SetPixelHUE(strip, (uint8_t)(interpolation(0, (end - begin), 0, 255, i)), i);
 8001420:	893a      	ldrh	r2, [r7, #8]
 8001422:	897b      	ldrh	r3, [r7, #10]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe ff52 	bl	80002d0 <__aeabi_i2f>
 800142c:	4604      	mov	r4, r0
 800142e:	8abb      	ldrh	r3, [r7, #20]
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe ff49 	bl	80002c8 <__aeabi_ui2f>
 8001436:	4603      	mov	r3, r0
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <Preset_Rainbow+0xd8>)
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4621      	mov	r1, r4
 8001442:	f04f 0000 	mov.w	r0, #0
 8001446:	f000 fbff 	bl	8001c48 <interpolation>
 800144a:	4603      	mov	r3, r0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f959 	bl	8000704 <__aeabi_f2uiz>
 8001452:	4603      	mov	r3, r0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	8aba      	ldrh	r2, [r7, #20]
 8001458:	4619      	mov	r1, r3
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff ff57 	bl	800130e <WS2812B_SetPixelHUE>
		for(uint16_t i = begin; i <= end; i++) {
 8001460:	8abb      	ldrh	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	82bb      	strh	r3, [r7, #20]
 8001466:	8aba      	ldrh	r2, [r7, #20]
 8001468:	893b      	ldrh	r3, [r7, #8]
 800146a:	429a      	cmp	r2, r3
 800146c:	d9d8      	bls.n	8001420 <Preset_Rainbow+0x80>
}
 800146e:	bf00      	nop
 8001470:	371c      	adds	r7, #28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	437f0000 	.word	0x437f0000

0800147c <Preset_HUE>:

void Preset_HUE(WS2812B_t* strip, uint8_t h, uint16_t begin, uint16_t end){
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	4608      	mov	r0, r1
 8001486:	4611      	mov	r1, r2
 8001488:	461a      	mov	r2, r3
 800148a:	4603      	mov	r3, r0
 800148c:	72fb      	strb	r3, [r7, #11]
 800148e:	460b      	mov	r3, r1
 8001490:	813b      	strh	r3, [r7, #8]
 8001492:	4613      	mov	r3, r2
 8001494:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = begin; i <= end; i++){
 8001496:	893b      	ldrh	r3, [r7, #8]
 8001498:	82fb      	strh	r3, [r7, #22]
 800149a:	e008      	b.n	80014ae <Preset_HUE+0x32>
		WS2812B_SetPixelHUE(strip, h, i);
 800149c:	8afa      	ldrh	r2, [r7, #22]
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	4619      	mov	r1, r3
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff ff33 	bl	800130e <WS2812B_SetPixelHUE>
	for(uint16_t i = begin; i <= end; i++){
 80014a8:	8afb      	ldrh	r3, [r7, #22]
 80014aa:	3301      	adds	r3, #1
 80014ac:	82fb      	strh	r3, [r7, #22]
 80014ae:	8afa      	ldrh	r2, [r7, #22]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d9f2      	bls.n	800149c <Preset_HUE+0x20>
	}
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <AnimationInit>:
			WS2812B_SetPixelBrightness(strip, strip->brightness, i);
		}
	}
}
//Animations
void AnimationInit(Animation_t* animation, uint8_t mirrored){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
	animation->mirrored = mirrored;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	701a      	strb	r2, [r3, #0]
	animation->counter = 0;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	811a      	strh	r2, [r3, #8]
	animation->direction = 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	729a      	strb	r2, [r3, #10]
	animation->repeatTime = 0;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <Animation_Loop>:

void Animation_Loop(WS2812B_t *strip, Animation_t* animation, uint16_t begin, uint16_t end, uint16_t delay){
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b088      	sub	sp, #32
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	4611      	mov	r1, r2
 80014fa:	461a      	mov	r2, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	80fb      	strh	r3, [r7, #6]
 8001500:	4613      	mov	r3, r2
 8001502:	80bb      	strh	r3, [r7, #4]
	if (HAL_GetTick() - animation->repeatTime > delay) {
 8001504:	f001 fc1c 	bl	8002d40 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	1ad2      	subs	r2, r2, r3
 8001510:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001512:	429a      	cmp	r2, r3
 8001514:	f240 80f8 	bls.w	8001708 <Animation_Loop+0x21a>
		if (animation->mirrored) {
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d073      	beq.n	8001608 <Animation_Loop+0x11a>
			RGB_t temp;
			temp.R = strip->leds[begin].R;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	753b      	strb	r3, [r7, #20]
			temp.G = strip->leds[begin].G;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	757b      	strb	r3, [r7, #21]
			temp.B = strip->leds[begin].B;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	75bb      	strb	r3, [r7, #22]
			temp.brightness = strip->leds->brightness;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	75fb      	strb	r3, [r7, #23]
			for (int i = begin; i < end; i++) {
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e036      	b.n	80015c6 <Animation_Loop+0xd8>
				strip->leds[i].R = strip->leds[i + 1].R;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	3301      	adds	r3, #1
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	441a      	add	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6959      	ldr	r1, [r3, #20]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	701a      	strb	r2, [r3, #0]
				strip->leds[i].G = strip->leds[i + 1].G;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	441a      	add	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6959      	ldr	r1, [r3, #20]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	7852      	ldrb	r2, [r2, #1]
 800158a:	705a      	strb	r2, [r3, #1]
				strip->leds[i].B = strip->leds[i + 1].B;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	3301      	adds	r3, #1
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	441a      	add	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6959      	ldr	r1, [r3, #20]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	7892      	ldrb	r2, [r2, #2]
 80015a4:	709a      	strb	r2, [r3, #2]
				strip->leds[i].brightness = strip->leds[i + 1].brightness;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	441a      	add	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6959      	ldr	r1, [r3, #20]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	78d2      	ldrb	r2, [r2, #3]
 80015be:	70da      	strb	r2, [r3, #3]
			for (int i = begin; i < end; i++) {
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	3301      	adds	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbc4      	blt.n	8001558 <Animation_Loop+0x6a>
			}
			strip->leds[end].R = temp.R;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	7d3a      	ldrb	r2, [r7, #20]
 80015da:	701a      	strb	r2, [r3, #0]
			strip->leds[end].G = temp.G;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	88bb      	ldrh	r3, [r7, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	7d7a      	ldrb	r2, [r7, #21]
 80015e8:	705a      	strb	r2, [r3, #1]
			strip->leds[end].B = temp.B;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	88bb      	ldrh	r3, [r7, #4]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	7dba      	ldrb	r2, [r7, #22]
 80015f6:	709a      	strb	r2, [r3, #2]
			strip->leds[end].brightness = temp.brightness;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	7dfa      	ldrb	r2, [r7, #23]
 8001604:	70da      	strb	r2, [r3, #3]
 8001606:	e07a      	b.n	80016fe <Animation_Loop+0x210>
		} else{
			RGB_t temp;
			temp.R = strip->leds[end].R;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	88bb      	ldrh	r3, [r7, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	743b      	strb	r3, [r7, #16]
			temp.G = strip->leds[end].G;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	88bb      	ldrh	r3, [r7, #4]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	747b      	strb	r3, [r7, #17]
			temp.B = strip->leds[end].B;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	88bb      	ldrh	r3, [r7, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	789b      	ldrb	r3, [r3, #2]
 8001630:	74bb      	strb	r3, [r7, #18]
			temp.brightness = strip->leds->brightness;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	78db      	ldrb	r3, [r3, #3]
 8001638:	74fb      	strb	r3, [r7, #19]
			for (int i = end; i > begin; i--) {
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	e03e      	b.n	80016be <Animation_Loop+0x1d0>
				strip->leds[i].R = strip->leds[i - 1].R;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800164a:	3b01      	subs	r3, #1
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	441a      	add	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6959      	ldr	r1, [r3, #20]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	701a      	strb	r2, [r3, #0]
				strip->leds[i].G = strip->leds[i - 1].G;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001668:	3b01      	subs	r3, #1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	441a      	add	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6959      	ldr	r1, [r3, #20]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	7852      	ldrb	r2, [r2, #1]
 800167a:	705a      	strb	r2, [r3, #1]
				strip->leds[i].B = strip->leds[i - 1].B;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001686:	3b01      	subs	r3, #1
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	441a      	add	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6959      	ldr	r1, [r3, #20]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	7892      	ldrb	r2, [r2, #2]
 8001698:	709a      	strb	r2, [r3, #2]
				strip->leds[i].brightness = strip->leds[i - 1].brightness;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016a4:	3b01      	subs	r3, #1
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	441a      	add	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6959      	ldr	r1, [r3, #20]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	78d2      	ldrb	r2, [r2, #3]
 80016b6:	70da      	strb	r2, [r3, #3]
			for (int i = end; i > begin; i--) {
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dcbc      	bgt.n	8001640 <Animation_Loop+0x152>
			}
			strip->leds[begin].R = temp.R;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	7c3a      	ldrb	r2, [r7, #16]
 80016d2:	701a      	strb	r2, [r3, #0]
			strip->leds[begin].G = temp.G;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	7c7a      	ldrb	r2, [r7, #17]
 80016e0:	705a      	strb	r2, [r3, #1]
			strip->leds[begin].B = temp.B;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	7cba      	ldrb	r2, [r7, #18]
 80016ee:	709a      	strb	r2, [r3, #2]
			strip->leds[begin].brightness = temp.brightness;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	7cfa      	ldrb	r2, [r7, #19]
 80016fc:	70da      	strb	r2, [r3, #3]
		}
		animation->repeatTime = HAL_GetTick();
 80016fe:	f001 fb1f 	bl	8002d40 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	605a      	str	r2, [r3, #4]
	}
}
 8001708:	bf00      	nop
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <Animation_Fade>:

void Animation_Fade(WS2812B_t *strip, Animation_t* animation, uint16_t begin, uint16_t end, uint16_t delay){
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	4611      	mov	r1, r2
 800171c:	461a      	mov	r2, r3
 800171e:	460b      	mov	r3, r1
 8001720:	80fb      	strh	r3, [r7, #6]
 8001722:	4613      	mov	r3, r2
 8001724:	80bb      	strh	r3, [r7, #4]
	if (HAL_GetTick() - animation->repeatTime > delay){
 8001726:	f001 fb0b 	bl	8002d40 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	1ad2      	subs	r2, r2, r3
 8001732:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001734:	429a      	cmp	r2, r3
 8001736:	f240 8179 	bls.w	8001a2c <Animation_Fade+0x31c>
		float step = (float)strip->brightness / 255;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	7c9b      	ldrb	r3, [r3, #18]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fdc2 	bl	80002c8 <__aeabi_ui2f>
 8001744:	4603      	mov	r3, r0
 8001746:	498f      	ldr	r1, [pc, #572]	; (8001984 <Animation_Fade+0x274>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fec9 	bl	80004e0 <__aeabi_fdiv>
 800174e:	4603      	mov	r3, r0
 8001750:	617b      	str	r3, [r7, #20]
		if(animation->mirrored){
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80bd 	beq.w	80018d6 <Animation_Fade+0x1c6>
			if(animation->direction == 0){
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	7a9b      	ldrb	r3, [r3, #10]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d156      	bne.n	8001812 <Animation_Fade+0x102>
				for(uint16_t i = begin; i <= end; i++){
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	83fb      	strh	r3, [r7, #30]
 8001768:	e02d      	b.n	80017c6 <Animation_Fade+0xb6>
					if(strip->leds[i].brightness >= 0){
						WS2812B_SetPixelBrightness(strip, strip->brightness - (strip->brightness - animation->counter * step), i);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	7c9b      	ldrb	r3, [r3, #18]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fdae 	bl	80002d0 <__aeabi_i2f>
 8001774:	4604      	mov	r4, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	7c9b      	ldrb	r3, [r3, #18]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fda8 	bl	80002d0 <__aeabi_i2f>
 8001780:	4605      	mov	r5, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	891b      	ldrh	r3, [r3, #8]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fda2 	bl	80002d0 <__aeabi_i2f>
 800178c:	4603      	mov	r3, r0
 800178e:	6979      	ldr	r1, [r7, #20]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fdf1 	bl	8000378 <__aeabi_fmul>
 8001796:	4603      	mov	r3, r0
 8001798:	4619      	mov	r1, r3
 800179a:	4628      	mov	r0, r5
 800179c:	f7fe fce2 	bl	8000164 <__aeabi_fsub>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7fe fcdd 	bl	8000164 <__aeabi_fsub>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe ffa9 	bl	8000704 <__aeabi_f2uiz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	8bfa      	ldrh	r2, [r7, #30]
 80017b8:	4619      	mov	r1, r3
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fcb1 	bl	8001122 <WS2812B_SetPixelBrightness>
				for(uint16_t i = begin; i <= end; i++){
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	3301      	adds	r3, #1
 80017c4:	83fb      	strh	r3, [r7, #30]
 80017c6:	8bfa      	ldrh	r2, [r7, #30]
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d9cd      	bls.n	800176a <Animation_Fade+0x5a>
					}
				}
				animation->counter++;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	891b      	ldrh	r3, [r3, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	811a      	strh	r2, [r3, #8]
				if(animation->counter * step >= strip->brightness){
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	891b      	ldrh	r3, [r3, #8]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fd76 	bl	80002d0 <__aeabi_i2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	6979      	ldr	r1, [r7, #20]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fdc5 	bl	8000378 <__aeabi_fmul>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461c      	mov	r4, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	7c9b      	ldrb	r3, [r3, #18]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fd6a 	bl	80002d0 <__aeabi_i2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4619      	mov	r1, r3
 8001800:	4620      	mov	r0, r4
 8001802:	f7fe ff6b 	bl	80006dc <__aeabi_fcmpge>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <Animation_Fade+0x102>
					animation->direction = 1;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2201      	movs	r2, #1
 8001810:	729a      	strb	r2, [r3, #10]
				}
			}
			if(animation->direction == 1){
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	7a9b      	ldrb	r3, [r3, #10]
 8001816:	2b01      	cmp	r3, #1
 8001818:	f040 8103 	bne.w	8001a22 <Animation_Fade+0x312>
				for(uint16_t i = begin; i <= end; i++){
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	83bb      	strh	r3, [r7, #28]
 8001820:	e037      	b.n	8001892 <Animation_Fade+0x182>
					if(strip->leds[i].brightness <= strip->brightness){
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	8bbb      	ldrh	r3, [r7, #28]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	78da      	ldrb	r2, [r3, #3]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	7c9b      	ldrb	r3, [r3, #18]
 8001832:	429a      	cmp	r2, r3
 8001834:	d82a      	bhi.n	800188c <Animation_Fade+0x17c>
						WS2812B_SetPixelBrightness(strip, strip->brightness - (strip->brightness - animation->counter * step), i);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	7c9b      	ldrb	r3, [r3, #18]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fd48 	bl	80002d0 <__aeabi_i2f>
 8001840:	4604      	mov	r4, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	7c9b      	ldrb	r3, [r3, #18]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fd42 	bl	80002d0 <__aeabi_i2f>
 800184c:	4605      	mov	r5, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	891b      	ldrh	r3, [r3, #8]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fd3c 	bl	80002d0 <__aeabi_i2f>
 8001858:	4603      	mov	r3, r0
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fd8b 	bl	8000378 <__aeabi_fmul>
 8001862:	4603      	mov	r3, r0
 8001864:	4619      	mov	r1, r3
 8001866:	4628      	mov	r0, r5
 8001868:	f7fe fc7c 	bl	8000164 <__aeabi_fsub>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4620      	mov	r0, r4
 8001872:	f7fe fc77 	bl	8000164 <__aeabi_fsub>
 8001876:	4603      	mov	r3, r0
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe ff43 	bl	8000704 <__aeabi_f2uiz>
 800187e:	4603      	mov	r3, r0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	8bba      	ldrh	r2, [r7, #28]
 8001884:	4619      	mov	r1, r3
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff fc4b 	bl	8001122 <WS2812B_SetPixelBrightness>
				for(uint16_t i = begin; i <= end; i++){
 800188c:	8bbb      	ldrh	r3, [r7, #28]
 800188e:	3301      	adds	r3, #1
 8001890:	83bb      	strh	r3, [r7, #28]
 8001892:	8bba      	ldrh	r2, [r7, #28]
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d9c3      	bls.n	8001822 <Animation_Fade+0x112>
					}
				}
				animation->counter--;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	891b      	ldrh	r3, [r3, #8]
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	811a      	strh	r2, [r3, #8]
				if(animation->counter * step <= 0){
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	891b      	ldrh	r3, [r3, #8]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fd10 	bl	80002d0 <__aeabi_i2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	6979      	ldr	r1, [r7, #20]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fd5f 	bl	8000378 <__aeabi_fmul>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f04f 0100 	mov.w	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe ff01 	bl	80006c8 <__aeabi_fcmple>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80aa 	beq.w	8001a22 <Animation_Fade+0x312>
					animation->direction = 0;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2200      	movs	r2, #0
 80018d2:	729a      	strb	r2, [r3, #10]
 80018d4:	e0a5      	b.n	8001a22 <Animation_Fade+0x312>
				}
			}
		} else{
			if(animation->direction == 0){
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	7a9b      	ldrb	r3, [r3, #10]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d14b      	bne.n	8001976 <Animation_Fade+0x266>
				for(uint16_t i = begin; i <= end; i++){
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	837b      	strh	r3, [r7, #26]
 80018e2:	e022      	b.n	800192a <Animation_Fade+0x21a>
					if(strip->leds[i].brightness >= 0){
						WS2812B_SetPixelBrightness(strip, strip->brightness - (animation->counter * step), i);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	7c9b      	ldrb	r3, [r3, #18]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fcf1 	bl	80002d0 <__aeabi_i2f>
 80018ee:	4604      	mov	r4, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	891b      	ldrh	r3, [r3, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fceb 	bl	80002d0 <__aeabi_i2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	6979      	ldr	r1, [r7, #20]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fd3a 	bl	8000378 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	4619      	mov	r1, r3
 8001908:	4620      	mov	r0, r4
 800190a:	f7fe fc2b 	bl	8000164 <__aeabi_fsub>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fef7 	bl	8000704 <__aeabi_f2uiz>
 8001916:	4603      	mov	r3, r0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	8b7a      	ldrh	r2, [r7, #26]
 800191c:	4619      	mov	r1, r3
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff fbff 	bl	8001122 <WS2812B_SetPixelBrightness>
				for(uint16_t i = begin; i <= end; i++){
 8001924:	8b7b      	ldrh	r3, [r7, #26]
 8001926:	3301      	adds	r3, #1
 8001928:	837b      	strh	r3, [r7, #26]
 800192a:	8b7a      	ldrh	r2, [r7, #26]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d9d8      	bls.n	80018e4 <Animation_Fade+0x1d4>
					}
				}
				animation->counter++;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	891b      	ldrh	r3, [r3, #8]
 8001936:	3301      	adds	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	811a      	strh	r2, [r3, #8]
				if(animation->counter * step >= strip->brightness){
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	891b      	ldrh	r3, [r3, #8]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fcc4 	bl	80002d0 <__aeabi_i2f>
 8001948:	4603      	mov	r3, r0
 800194a:	6979      	ldr	r1, [r7, #20]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fd13 	bl	8000378 <__aeabi_fmul>
 8001952:	4603      	mov	r3, r0
 8001954:	461c      	mov	r4, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	7c9b      	ldrb	r3, [r3, #18]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fcb8 	bl	80002d0 <__aeabi_i2f>
 8001960:	4603      	mov	r3, r0
 8001962:	4619      	mov	r1, r3
 8001964:	4620      	mov	r0, r4
 8001966:	f7fe feb9 	bl	80006dc <__aeabi_fcmpge>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <Animation_Fade+0x266>
					animation->direction = 1;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2201      	movs	r2, #1
 8001974:	729a      	strb	r2, [r3, #10]
				}
			}
			if(animation->direction == 1){
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	7a9b      	ldrb	r3, [r3, #10]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d151      	bne.n	8001a22 <Animation_Fade+0x312>
				for(uint16_t i = begin; i <= end; i++){
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	833b      	strh	r3, [r7, #24]
 8001982:	e02e      	b.n	80019e2 <Animation_Fade+0x2d2>
 8001984:	437f0000 	.word	0x437f0000
					if(strip->leds[i].brightness <= strip->brightness){
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	8b3b      	ldrh	r3, [r7, #24]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	78da      	ldrb	r2, [r3, #3]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	7c9b      	ldrb	r3, [r3, #18]
 8001998:	429a      	cmp	r2, r3
 800199a:	d81f      	bhi.n	80019dc <Animation_Fade+0x2cc>
						WS2812B_SetPixelBrightness(strip, strip->brightness - (animation->counter * step), i);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	7c9b      	ldrb	r3, [r3, #18]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fc95 	bl	80002d0 <__aeabi_i2f>
 80019a6:	4604      	mov	r4, r0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	891b      	ldrh	r3, [r3, #8]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc8f 	bl	80002d0 <__aeabi_i2f>
 80019b2:	4603      	mov	r3, r0
 80019b4:	6979      	ldr	r1, [r7, #20]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fcde 	bl	8000378 <__aeabi_fmul>
 80019bc:	4603      	mov	r3, r0
 80019be:	4619      	mov	r1, r3
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7fe fbcf 	bl	8000164 <__aeabi_fsub>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fe9b 	bl	8000704 <__aeabi_f2uiz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	8b3a      	ldrh	r2, [r7, #24]
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fba3 	bl	8001122 <WS2812B_SetPixelBrightness>
				for(uint16_t i = begin; i <= end; i++){
 80019dc:	8b3b      	ldrh	r3, [r7, #24]
 80019de:	3301      	adds	r3, #1
 80019e0:	833b      	strh	r3, [r7, #24]
 80019e2:	8b3a      	ldrh	r2, [r7, #24]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d9ce      	bls.n	8001988 <Animation_Fade+0x278>
					}
				}
				animation->counter--;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	891b      	ldrh	r3, [r3, #8]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	811a      	strh	r2, [r3, #8]
				if(animation->counter * step <= 0){
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	891b      	ldrh	r3, [r3, #8]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fc68 	bl	80002d0 <__aeabi_i2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	6979      	ldr	r1, [r7, #20]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fcb7 	bl	8000378 <__aeabi_fmul>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fe59 	bl	80006c8 <__aeabi_fcmple>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <Animation_Fade+0x312>
					animation->direction = 0;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	729a      	strb	r2, [r3, #10]
				}
			}
		}
		animation->repeatTime = HAL_GetTick();
 8001a22:	f001 f98d 	bl	8002d40 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	605a      	str	r2, [r3, #4]
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bdb0      	pop	{r4, r5, r7, pc}

08001a34 <RGB_to_GRB_PWM>:
		}
		animation->repeatTime = HAL_GetTick();
	}
}
//----------------
void RGB_to_GRB_PWM(WS2812B_t* strip){
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < strip->numleds; i++){
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e0f3      	b.n	8001c2a <RGB_to_GRB_PWM+0x1f6>
		uint8_t r = strip->leds[i].R;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	73fb      	strb	r3, [r7, #15]
		r = interpolation(0, 255, 0, strip->leds[i].brightness, r);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	78db      	ldrb	r3, [r3, #3]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fc33 	bl	80002c8 <__aeabi_ui2f>
 8001a62:	4604      	mov	r4, r0
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fc2e 	bl	80002c8 <__aeabi_ui2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4623      	mov	r3, r4
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	4973      	ldr	r1, [pc, #460]	; (8001c44 <RGB_to_GRB_PWM+0x210>)
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f000 f8e4 	bl	8001c48 <interpolation>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fe3e 	bl	8000704 <__aeabi_f2uiz>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
		uint8_t g = strip->leds[i].G;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	73bb      	strb	r3, [r7, #14]
		g = interpolation(0, 255, 0, strip->leds[i].brightness, g);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	78db      	ldrb	r3, [r3, #3]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fc0e 	bl	80002c8 <__aeabi_ui2f>
 8001aac:	4604      	mov	r4, r0
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fc09 	bl	80002c8 <__aeabi_ui2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4623      	mov	r3, r4
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4960      	ldr	r1, [pc, #384]	; (8001c44 <RGB_to_GRB_PWM+0x210>)
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f000 f8bf 	bl	8001c48 <interpolation>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fe19 	bl	8000704 <__aeabi_f2uiz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73bb      	strb	r3, [r7, #14]
		uint8_t b = strip->leds[i].B;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	789b      	ldrb	r3, [r3, #2]
 8001ae2:	737b      	strb	r3, [r7, #13]
		b = interpolation(0, 255, 0, strip->leds[i].brightness, b);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	78db      	ldrb	r3, [r3, #3]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fbe9 	bl	80002c8 <__aeabi_ui2f>
 8001af6:	4604      	mov	r4, r0
 8001af8:	7b7b      	ldrb	r3, [r7, #13]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fbe4 	bl	80002c8 <__aeabi_ui2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4623      	mov	r3, r4
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	494e      	ldr	r1, [pc, #312]	; (8001c44 <RGB_to_GRB_PWM+0x210>)
 8001b0c:	f04f 0000 	mov.w	r0, #0
 8001b10:	f000 f89a 	bl	8001c48 <interpolation>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fdf4 	bl	8000704 <__aeabi_f2uiz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	737b      	strb	r3, [r7, #13]
		for(int j = 0; j < COLOR_BYTE; j++){
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	e07b      	b.n	8001c1e <RGB_to_GRB_PWM+0x1ea>
			if(1 & (g >> (COLOR_BYTE - j - 1)))
 8001b26:	7bba      	ldrb	r2, [r7, #14]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	fa42 f303 	asr.w	r3, r2, r3
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00e      	beq.n	8001b58 <RGB_to_GRB_PWM+0x124>
				strip->pwm_buff[j + (i * COLORS_BITS)] = HIGH;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	440b      	add	r3, r1
 8001b52:	223d      	movs	r2, #61	; 0x3d
 8001b54:	801a      	strh	r2, [r3, #0]
 8001b56:	e00d      	b.n	8001b74 <RGB_to_GRB_PWM+0x140>
			else strip->pwm_buff[j + (i * COLORS_BITS)] = LOW;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68d9      	ldr	r1, [r3, #12]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	461a      	mov	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	440b      	add	r3, r1
 8001b70:	221c      	movs	r2, #28
 8001b72:	801a      	strh	r2, [r3, #0]

			if(1 & (r >> (COLOR_BYTE - j - 1)))
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	f1c3 0307 	rsb	r3, r3, #7
 8001b7c:	fa42 f303 	asr.w	r3, r2, r3
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00f      	beq.n	8001ba8 <RGB_to_GRB_PWM+0x174>
				strip->pwm_buff[j + (i * COLORS_BITS) + 8] = HIGH;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68d9      	ldr	r1, [r3, #12]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	461a      	mov	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3308      	adds	r3, #8
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	440b      	add	r3, r1
 8001ba2:	223d      	movs	r2, #61	; 0x3d
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	e00e      	b.n	8001bc6 <RGB_to_GRB_PWM+0x192>
			else strip->pwm_buff[j + (i * COLORS_BITS) + 8] = LOW;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68d9      	ldr	r1, [r3, #12]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4413      	add	r3, r2
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	440b      	add	r3, r1
 8001bc2:	221c      	movs	r2, #28
 8001bc4:	801a      	strh	r2, [r3, #0]

			if(1 & (b >> (COLOR_BYTE - j - 1)))
 8001bc6:	7b7a      	ldrb	r2, [r7, #13]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	fa42 f303 	asr.w	r3, r2, r3
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00f      	beq.n	8001bfa <RGB_to_GRB_PWM+0x1c6>
				strip->pwm_buff[j + (i * COLORS_BITS) + 16] = HIGH;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68d9      	ldr	r1, [r3, #12]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	461a      	mov	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	3310      	adds	r3, #16
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	440b      	add	r3, r1
 8001bf4:	223d      	movs	r2, #61	; 0x3d
 8001bf6:	801a      	strh	r2, [r3, #0]
 8001bf8:	e00e      	b.n	8001c18 <RGB_to_GRB_PWM+0x1e4>
			else strip->pwm_buff[j + (i * COLORS_BITS) + 16] = LOW;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68d9      	ldr	r1, [r3, #12]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3310      	adds	r3, #16
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	440b      	add	r3, r1
 8001c14:	221c      	movs	r2, #28
 8001c16:	801a      	strh	r2, [r3, #0]
		for(int j = 0; j < COLOR_BYTE; j++){
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b07      	cmp	r3, #7
 8001c22:	dd80      	ble.n	8001b26 <RGB_to_GRB_PWM+0xf2>
	for(int i = 0; i < strip->numleds; i++){
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	895b      	ldrh	r3, [r3, #10]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f6ff af05 	blt.w	8001a42 <RGB_to_GRB_PWM+0xe>
		}
	}
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd90      	pop	{r4, r7, pc}
 8001c42:	bf00      	nop
 8001c44:	437f0000 	.word	0x437f0000

08001c48 <interpolation>:


//x1 = 0; x2 = 255; fx1 = 0;  fx2 = brightness; x = value;
float interpolation(float x1, float x2, float fx1, float fx2, float x){
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
	return (fx1 + (x - x1)*((fx2 - fx1)/(x2 - x1)));
 8001c56:	68f9      	ldr	r1, [r7, #12]
 8001c58:	6a38      	ldr	r0, [r7, #32]
 8001c5a:	f7fe fa83 	bl	8000164 <__aeabi_fsub>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461c      	mov	r4, r3
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	f7fe fa7d 	bl	8000164 <__aeabi_fsub>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	68b8      	ldr	r0, [r7, #8]
 8001c72:	f7fe fa77 	bl	8000164 <__aeabi_fsub>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f7fe fc30 	bl	80004e0 <__aeabi_fdiv>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7fe fb77 	bl	8000378 <__aeabi_fmul>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fa6a 	bl	8000168 <__addsf3>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ca0 <WS2812B_MakeEffect>:
Effects prevEffect = 0;
Effects curEffect = 0;
uint16_t prevNumleds = 0;
uint16_t curNumleds = 0;

void WS2812B_MakeEffect(WS2812B_t *strip, Effects effect, uint16_t delay) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
 8001cac:	4613      	mov	r3, r2
 8001cae:	803b      	strh	r3, [r7, #0]
	curEffect = effect;
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <WS2812B_MakeEffect+0x88>)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	7013      	strb	r3, [r2, #0]
	curNumleds = strip->numleds;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	895a      	ldrh	r2, [r3, #10]
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <WS2812B_MakeEffect+0x8c>)
 8001cbc:	801a      	strh	r2, [r3, #0]
	switch (effect) {
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	2b07      	cmp	r3, #7
 8001cc2:	d825      	bhi.n	8001d10 <WS2812B_MakeEffect+0x70>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <WS2812B_MakeEffect+0x2c>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001d11 	.word	0x08001d11
 8001cd0:	08001ced 	.word	0x08001ced
 8001cd4:	08001d11 	.word	0x08001d11
 8001cd8:	08001cf9 	.word	0x08001cf9
 8001cdc:	08001d11 	.word	0x08001d11
 8001ce0:	08001d11 	.word	0x08001d11
 8001ce4:	08001d11 	.word	0x08001d11
 8001ce8:	08001d05 	.word	0x08001d05
	case EFFECT_NONE:break;
	case EFFECT_RAINBOWLOOP: Effect_RainbowLoop(strip, delay); break;
 8001cec:	883b      	ldrh	r3, [r7, #0]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f821 	bl	8001d38 <Effect_RainbowLoop>
 8001cf6:	e00b      	b.n	8001d10 <WS2812B_MakeEffect+0x70>
	case EFFECT_FADE: Effect_Fade(strip, delay); break;
 8001cf8:	883b      	ldrh	r3, [r7, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f85b 	bl	8001db8 <Effect_Fade>
 8001d02:	e005      	b.n	8001d10 <WS2812B_MakeEffect+0x70>
	case EFFECT_POLICE: Effect_Police(strip, delay); break;
 8001d04:	883b      	ldrh	r3, [r7, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f885 	bl	8001e18 <Effect_Police>
 8001d0e:	bf00      	nop
	}
	prevEffect = effect;
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <WS2812B_MakeEffect+0x90>)
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	7013      	strb	r3, [r2, #0]
	prevNumleds = strip->numleds;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	895a      	ldrh	r2, [r3, #10]
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <WS2812B_MakeEffect+0x94>)
 8001d1c:	801a      	strh	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000299 	.word	0x20000299
 8001d2c:	2000029c 	.word	0x2000029c
 8001d30:	20000298 	.word	0x20000298
 8001d34:	2000029a 	.word	0x2000029a

08001d38 <Effect_RainbowLoop>:

void Effect_RainbowLoop(WS2812B_t *strip, uint16_t delay) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
	static Animation_t loop;
	if (prevEffect != curEffect || curNumleds != prevNumleds) {
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <Effect_RainbowLoop+0x6c>)
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <Effect_RainbowLoop+0x70>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d105      	bne.n	8001d5c <Effect_RainbowLoop+0x24>
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <Effect_RainbowLoop+0x74>)
 8001d52:	881a      	ldrh	r2, [r3, #0]
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <Effect_RainbowLoop+0x78>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d012      	beq.n	8001d82 <Effect_RainbowLoop+0x4a>
		AnimationInit(&loop, 0);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4815      	ldr	r0, [pc, #84]	; (8001db4 <Effect_RainbowLoop+0x7c>)
 8001d60:	f7ff fbae 	bl	80014c0 <AnimationInit>
		Preset_Rainbow(strip, 0, strip->numleds - 1, 0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	895b      	ldrh	r3, [r3, #10]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fb15 	bl	80013a0 <Preset_Rainbow>
		WS2812B_SetBrightness(strip, strip->brightness);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7c9b      	ldrb	r3, [r3, #18]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff f9ae 	bl	80010de <WS2812B_SetBrightness>
	}
	Animation_Loop(strip, &loop, 0, strip->numleds - 1, delay);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	895b      	ldrh	r3, [r3, #10]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <Effect_RainbowLoop+0x7c>)
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fbaa 	bl	80014ee <Animation_Loop>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000298 	.word	0x20000298
 8001da8:	20000299 	.word	0x20000299
 8001dac:	2000029c 	.word	0x2000029c
 8001db0:	2000029a 	.word	0x2000029a
 8001db4:	200002a0 	.word	0x200002a0

08001db8 <Effect_Fade>:

void Effect_Fade(WS2812B_t *strip, uint16_t delay){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
	static Animation_t fade;
	if (prevEffect != curEffect || curNumleds != prevNumleds) {
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <Effect_Fade+0x4c>)
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <Effect_Fade+0x50>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d105      	bne.n	8001ddc <Effect_Fade+0x24>
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <Effect_Fade+0x54>)
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <Effect_Fade+0x58>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d003      	beq.n	8001de4 <Effect_Fade+0x2c>
		AnimationInit(&fade, 0);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	480d      	ldr	r0, [pc, #52]	; (8001e14 <Effect_Fade+0x5c>)
 8001de0:	f7ff fb6e 	bl	80014c0 <AnimationInit>
	}
	Animation_Fade(strip, &fade, 0, strip->numleds - 1, delay);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	895b      	ldrh	r3, [r3, #10]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	2200      	movs	r2, #0
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <Effect_Fade+0x5c>)
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fc8a 	bl	8001710 <Animation_Fade>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000298 	.word	0x20000298
 8001e08:	20000299 	.word	0x20000299
 8001e0c:	2000029c 	.word	0x2000029c
 8001e10:	2000029a 	.word	0x2000029a
 8001e14:	200002ac 	.word	0x200002ac

08001e18 <Effect_Police>:

void Effect_Police(WS2812B_t *strip, uint16_t delay){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
	static Animation_t fade_red, fade_blue;
	if (prevEffect != curEffect || curNumleds != prevNumleds) {
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <Effect_Police+0xa4>)
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <Effect_Police+0xa8>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d105      	bne.n	8001e3c <Effect_Police+0x24>
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <Effect_Police+0xac>)
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <Effect_Police+0xb0>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d01e      	beq.n	8001e7a <Effect_Police+0x62>
		AnimationInit(&fade_red, 0);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4823      	ldr	r0, [pc, #140]	; (8001ecc <Effect_Police+0xb4>)
 8001e40:	f7ff fb3e 	bl	80014c0 <AnimationInit>
		AnimationInit(&fade_blue, 1);
 8001e44:	2101      	movs	r1, #1
 8001e46:	4822      	ldr	r0, [pc, #136]	; (8001ed0 <Effect_Police+0xb8>)
 8001e48:	f7ff fb3a 	bl	80014c0 <AnimationInit>
		Preset_HUE(strip, 0, 0, strip->numleds / 2 - 1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	895b      	ldrh	r3, [r3, #10]
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fb0d 	bl	800147c <Preset_HUE>
		Preset_HUE(strip, 130, strip->numleds / 2, strip->numleds - 1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	895b      	ldrh	r3, [r3, #10]
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	895b      	ldrh	r3, [r3, #10]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2182      	movs	r1, #130	; 0x82
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fb01 	bl	800147c <Preset_HUE>
	}
	Animation_Fade(strip, &fade_red, 0, strip->numleds / 2 - 1, delay);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	895b      	ldrh	r3, [r3, #10]
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	490f      	ldr	r1, [pc, #60]	; (8001ecc <Effect_Police+0xb4>)
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff fc3d 	bl	8001710 <Animation_Fade>
	Animation_Fade(strip, &fade_blue, strip->numleds / 2, strip->numleds - 1, delay);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	895b      	ldrh	r3, [r3, #10]
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	895b      	ldrh	r3, [r3, #10]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <Effect_Police+0xb8>)
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fc2e 	bl	8001710 <Animation_Fade>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000298 	.word	0x20000298
 8001ec0:	20000299 	.word	0x20000299
 8001ec4:	2000029c 	.word	0x2000029c
 8001ec8:	2000029a 	.word	0x2000029a
 8001ecc:	200002b8 	.word	0x200002b8
 8001ed0:	200002c4 	.word	0x200002c4

08001ed4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ee6:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_SystemReset+0x28>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eee:	f3bf 8f4f 	dsb	sy
}
 8001ef2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <__NVIC_SystemReset+0x20>
 8001ef8:	e000ed00 	.word	0xe000ed00
 8001efc:	05fa0004 	.word	0x05fa0004

08001f00 <ESP_IPD_Callback>:

WS2812B_t myled;
uint8_t rxBuff[RX_BUFF_SIZE] = {};
uint8_t dataReceivedFlag = 0;

void ESP_IPD_Callback(uint8_t id, uint16_t len, char* data){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	603a      	str	r2, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	80bb      	strh	r3, [r7, #4]
	if(!dataReceivedFlag){
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <ESP_IPD_Callback+0x3c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <ESP_IPD_Callback+0x34>
		memcpy(rxBuff, data, len);
 8001f18:	88bb      	ldrh	r3, [r7, #4]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	6839      	ldr	r1, [r7, #0]
 8001f1e:	4808      	ldr	r0, [pc, #32]	; (8001f40 <ESP_IPD_Callback+0x40>)
 8001f20:	f004 ff22 	bl	8006d68 <memcpy>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f28:	4806      	ldr	r0, [pc, #24]	; (8001f44 <ESP_IPD_Callback+0x44>)
 8001f2a:	f002 f96f 	bl	800420c <HAL_GPIO_TogglePin>
		dataReceivedFlag = 1;
 8001f2e:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <ESP_IPD_Callback+0x3c>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
	}
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200004e9 	.word	0x200004e9
 8001f40:	200004c8 	.word	0x200004c8
 8001f44:	40011000 	.word	0x40011000

08001f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4e:	f000 fe9f 	bl	8002c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f52:	f000 fa4d 	bl	80023f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f56:	f000 fc05 	bl	8002764 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f5a:	f000 fbdd 	bl	8002718 <MX_DMA_Init>
  MX_TIM1_Init();
 8001f5e:	f000 fae1 	bl	8002524 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001f62:	f000 fbaf 	bl	80026c4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001f66:	f000 fa9f 	bl	80024a8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001f6a:	f000 fb5d 	bl	8002628 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(100);
 8001f6e:	2064      	movs	r0, #100	; 0x64
 8001f70:	f000 fef0 	bl	8002d54 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f7a:	48a3      	ldr	r0, [pc, #652]	; (8002208 <main+0x2c0>)
 8001f7c:	f002 f92e 	bl	80041dc <HAL_GPIO_WritePin>

  FlashPROM_Init(SETTINGS_BUFFSIZE);
 8001f80:	204e      	movs	r0, #78	; 0x4e
 8001f82:	f7fe ff6d 	bl	8000e60 <FlashPROM_Init>
  FlashPROM_Read((void*)&settings);
 8001f86:	48a1      	ldr	r0, [pc, #644]	; (800220c <main+0x2c4>)
 8001f88:	f7fe ffd4 	bl	8000f34 <FlashPROM_Read>
  if(settings.firstWriteKey != FIRST_WRITE_KEY){
 8001f8c:	4b9f      	ldr	r3, [pc, #636]	; (800220c <main+0x2c4>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b0d      	cmp	r3, #13
 8001f92:	d040      	beq.n	8002016 <main+0xce>
	  settings.firstWriteKey = FIRST_WRITE_KEY;
 8001f94:	4b9d      	ldr	r3, [pc, #628]	; (800220c <main+0x2c4>)
 8001f96:	220d      	movs	r2, #13
 8001f98:	701a      	strb	r2, [r3, #0]
	  settings.brightness = 32;
 8001f9a:	4b9c      	ldr	r3, [pc, #624]	; (800220c <main+0x2c4>)
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	705a      	strb	r2, [r3, #1]
	  settings.numleds = 60;
 8001fa0:	4b9a      	ldr	r3, [pc, #616]	; (800220c <main+0x2c4>)
 8001fa2:	223c      	movs	r2, #60	; 0x3c
 8001fa4:	731a      	strb	r2, [r3, #12]
	  settings.effectDelay = 50;
 8001fa6:	4b99      	ldr	r3, [pc, #612]	; (800220c <main+0x2c4>)
 8001fa8:	2232      	movs	r2, #50	; 0x32
 8001faa:	719a      	strb	r2, [r3, #6]
	  settings.colorR = 255;
 8001fac:	4b97      	ldr	r3, [pc, #604]	; (800220c <main+0x2c4>)
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	709a      	strb	r2, [r3, #2]
	  settings.colorG = 0;
 8001fb2:	4b96      	ldr	r3, [pc, #600]	; (800220c <main+0x2c4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	70da      	strb	r2, [r3, #3]
	  settings.colorB = 0;
 8001fb8:	4b94      	ldr	r3, [pc, #592]	; (800220c <main+0x2c4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	711a      	strb	r2, [r3, #4]
	  settings.effect = 0;
 8001fbe:	4b93      	ldr	r3, [pc, #588]	; (800220c <main+0x2c4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	715a      	strb	r2, [r3, #5]
	  settings.effectDelay = 50;
 8001fc4:	4b91      	ldr	r3, [pc, #580]	; (800220c <main+0x2c4>)
 8001fc6:	2232      	movs	r2, #50	; 0x32
 8001fc8:	719a      	strb	r2, [r3, #6]
	  settings.colorMusic = 0;
 8001fca:	4b90      	ldr	r3, [pc, #576]	; (800220c <main+0x2c4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	71da      	strb	r2, [r3, #7]
	  settings.colorMusicDelay = 50;
 8001fd0:	4b8e      	ldr	r3, [pc, #568]	; (800220c <main+0x2c4>)
 8001fd2:	2232      	movs	r2, #50	; 0x32
 8001fd4:	721a      	strb	r2, [r3, #8]
	  settings.colorMusicLowSensivity = 35;
 8001fd6:	4b8d      	ldr	r3, [pc, #564]	; (800220c <main+0x2c4>)
 8001fd8:	2223      	movs	r2, #35	; 0x23
 8001fda:	725a      	strb	r2, [r3, #9]
	  settings.colorMusicMediumSensivity = 35;
 8001fdc:	4b8b      	ldr	r3, [pc, #556]	; (800220c <main+0x2c4>)
 8001fde:	2223      	movs	r2, #35	; 0x23
 8001fe0:	729a      	strb	r2, [r3, #10]
	  settings.colorMusicHighSensivity = 35;
 8001fe2:	4b8a      	ldr	r3, [pc, #552]	; (800220c <main+0x2c4>)
 8001fe4:	2223      	movs	r2, #35	; 0x23
 8001fe6:	72da      	strb	r2, [r3, #11]
	  sprintf((char*)settings.ssidSTA, "none");
 8001fe8:	4989      	ldr	r1, [pc, #548]	; (8002210 <main+0x2c8>)
 8001fea:	488a      	ldr	r0, [pc, #552]	; (8002214 <main+0x2cc>)
 8001fec:	f004 fe34 	bl	8006c58 <siprintf>
	  sprintf((char*)settings.passSTA, "none");
 8001ff0:	4987      	ldr	r1, [pc, #540]	; (8002210 <main+0x2c8>)
 8001ff2:	4889      	ldr	r0, [pc, #548]	; (8002218 <main+0x2d0>)
 8001ff4:	f004 fe30 	bl	8006c58 <siprintf>
	  sprintf((char*)settings.ssidAP, "MyLed");
 8001ff8:	4988      	ldr	r1, [pc, #544]	; (800221c <main+0x2d4>)
 8001ffa:	4889      	ldr	r0, [pc, #548]	; (8002220 <main+0x2d8>)
 8001ffc:	f004 fe2c 	bl	8006c58 <siprintf>
	  sprintf((char*)settings.passAP, "myled1305");
 8002000:	4988      	ldr	r1, [pc, #544]	; (8002224 <main+0x2dc>)
 8002002:	4889      	ldr	r0, [pc, #548]	; (8002228 <main+0x2e0>)
 8002004:	f004 fe28 	bl	8006c58 <siprintf>
	  settings.onOff = 1;
 8002008:	4b80      	ldr	r3, [pc, #512]	; (800220c <main+0x2c4>)
 800200a:	2201      	movs	r2, #1
 800200c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	  FlashPROM_Write((void*)&settings);
 8002010:	487e      	ldr	r0, [pc, #504]	; (800220c <main+0x2c4>)
 8002012:	f7fe ff35 	bl	8000e80 <FlashPROM_Write>
  }

  ESP_Init(&huart1);
 8002016:	4885      	ldr	r0, [pc, #532]	; (800222c <main+0x2e4>)
 8002018:	f7fe fb94 	bl	8000744 <ESP_Init>
  ESP_STA_Mode();
 800201c:	f7fe fd48 	bl	8000ab0 <ESP_STA_Mode>
  ESP_STA_IP("192.168.0.113", "192.168.0.1", "255.255.255.0");
 8002020:	4a83      	ldr	r2, [pc, #524]	; (8002230 <main+0x2e8>)
 8002022:	4984      	ldr	r1, [pc, #528]	; (8002234 <main+0x2ec>)
 8002024:	4884      	ldr	r0, [pc, #528]	; (8002238 <main+0x2f0>)
 8002026:	f7fe fd8d 	bl	8000b44 <ESP_STA_IP>
  if(!ESP_ConnectToAP((char*)settings.ssidSTA, (char*)settings.passSTA))
 800202a:	497b      	ldr	r1, [pc, #492]	; (8002218 <main+0x2d0>)
 800202c:	4879      	ldr	r0, [pc, #484]	; (8002214 <main+0x2cc>)
 800202e:	f7fe fddb 	bl	8000be8 <ESP_ConnectToAP>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10c      	bne.n	8002052 <main+0x10a>
  {
	  ESP_AP_Mode();
 8002038:	f7fe fc46 	bl	80008c8 <ESP_AP_Mode>
	  ESP_AP_Config((char*)settings.ssidAP, (char*)settings.passAP, 1, 2);
 800203c:	2302      	movs	r3, #2
 800203e:	2201      	movs	r2, #1
 8002040:	4979      	ldr	r1, [pc, #484]	; (8002228 <main+0x2e0>)
 8002042:	4877      	ldr	r0, [pc, #476]	; (8002220 <main+0x2d8>)
 8002044:	f7fe fc8a 	bl	800095c <ESP_AP_Config>
	  ESP_AP_IP("192.168.0.113", "192.168.0.1", "255.255.255.0");
 8002048:	4a79      	ldr	r2, [pc, #484]	; (8002230 <main+0x2e8>)
 800204a:	497a      	ldr	r1, [pc, #488]	; (8002234 <main+0x2ec>)
 800204c:	487a      	ldr	r0, [pc, #488]	; (8002238 <main+0x2f0>)
 800204e:	f7fe fcdd 	bl	8000a0c <ESP_AP_IP>
  }
  ESP_StartTCPServer(1305);
 8002052:	f240 5019 	movw	r0, #1305	; 0x519
 8002056:	f7fe fe2b 	bl	8000cb0 <ESP_StartTCPServer>
  ESP_EnableCallbacs();
 800205a:	f7fe fe9f 	bl	8000d9c <ESP_EnableCallbacs>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002064:	4868      	ldr	r0, [pc, #416]	; (8002208 <main+0x2c0>)
 8002066:	f002 f8b9 	bl	80041dc <HAL_GPIO_WritePin>

  WS2812B_Init(&myled, MAX_LEDS, &htim1, TIM_CHANNEL_1);
 800206a:	2300      	movs	r3, #0
 800206c:	4a73      	ldr	r2, [pc, #460]	; (800223c <main+0x2f4>)
 800206e:	21f0      	movs	r1, #240	; 0xf0
 8002070:	4873      	ldr	r0, [pc, #460]	; (8002240 <main+0x2f8>)
 8002072:	f7fe ffd3 	bl	800101c <WS2812B_Init>
  WS2812B_SetBrightness(&myled, settings.brightness);
 8002076:	4b65      	ldr	r3, [pc, #404]	; (800220c <main+0x2c4>)
 8002078:	785b      	ldrb	r3, [r3, #1]
 800207a:	4619      	mov	r1, r3
 800207c:	4870      	ldr	r0, [pc, #448]	; (8002240 <main+0x2f8>)
 800207e:	f7ff f82e 	bl	80010de <WS2812B_SetBrightness>
  WS2812B_SetNumLeds(&myled, settings.numleds);
 8002082:	4b62      	ldr	r3, [pc, #392]	; (800220c <main+0x2c4>)
 8002084:	7b1b      	ldrb	r3, [r3, #12]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4619      	mov	r1, r3
 800208a:	486d      	ldr	r0, [pc, #436]	; (8002240 <main+0x2f8>)
 800208c:	f7ff f85d 	bl	800114a <WS2812B_SetNumLeds>

  memset(rxBuff, 0, RX_BUFF_SIZE);
 8002090:	2221      	movs	r2, #33	; 0x21
 8002092:	2100      	movs	r1, #0
 8002094:	486b      	ldr	r0, [pc, #428]	; (8002244 <main+0x2fc>)
 8002096:	f004 fdff 	bl	8006c98 <memset>

  while (1)
  {
		if(settings.onOff){
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <main+0x2c4>)
 800209c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d026      	beq.n	80020f2 <main+0x1aa>
			WS2812B_MakeEffect(&myled, settings.effect, settings.effectDelay);
 80020a4:	4b59      	ldr	r3, [pc, #356]	; (800220c <main+0x2c4>)
 80020a6:	795b      	ldrb	r3, [r3, #5]
 80020a8:	4a58      	ldr	r2, [pc, #352]	; (800220c <main+0x2c4>)
 80020aa:	7992      	ldrb	r2, [r2, #6]
 80020ac:	b292      	uxth	r2, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	4863      	ldr	r0, [pc, #396]	; (8002240 <main+0x2f8>)
 80020b2:	f7ff fdf5 	bl	8001ca0 <WS2812B_MakeEffect>

			if(!settings.effect){
 80020b6:	4b55      	ldr	r3, [pc, #340]	; (800220c <main+0x2c4>)
 80020b8:	795b      	ldrb	r3, [r3, #5]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <main+0x1a2>
				for(size_t i = 0; i < MAX_LEDS; i++){
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e00f      	b.n	80020e4 <main+0x19c>
					WS2812B_SetPixelRGB(&myled, settings.colorR, settings.colorG, settings.colorB, i);
 80020c4:	4b51      	ldr	r3, [pc, #324]	; (800220c <main+0x2c4>)
 80020c6:	7899      	ldrb	r1, [r3, #2]
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <main+0x2c4>)
 80020ca:	78da      	ldrb	r2, [r3, #3]
 80020cc:	4b4f      	ldr	r3, [pc, #316]	; (800220c <main+0x2c4>)
 80020ce:	7918      	ldrb	r0, [r3, #4]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	4603      	mov	r3, r0
 80020d8:	4859      	ldr	r0, [pc, #356]	; (8002240 <main+0x2f8>)
 80020da:	f7ff f8f1 	bl	80012c0 <WS2812B_SetPixelRGB>
				for(size_t i = 0; i < MAX_LEDS; i++){
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3301      	adds	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	2bef      	cmp	r3, #239	; 0xef
 80020e8:	d9ec      	bls.n	80020c4 <main+0x17c>
				}
			}
			WS2812B_Show(&myled);
 80020ea:	4855      	ldr	r0, [pc, #340]	; (8002240 <main+0x2f8>)
 80020ec:	f7ff f85e 	bl	80011ac <WS2812B_Show>
 80020f0:	e002      	b.n	80020f8 <main+0x1b0>
		}else{
			WS2812B_Off(&myled);
 80020f2:	4853      	ldr	r0, [pc, #332]	; (8002240 <main+0x2f8>)
 80020f4:	f7ff f894 	bl	8001220 <WS2812B_Off>
		}
		if(HAL_GetTick() - autosaveTimer > AUTOSAVE_PERIOD && autosaveTimer != 0){
 80020f8:	f000 fe22 	bl	8002d40 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b52      	ldr	r3, [pc, #328]	; (8002248 <main+0x300>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f242 7210 	movw	r2, #10000	; 0x2710
 8002108:	4293      	cmp	r3, r2
 800210a:	d909      	bls.n	8002120 <main+0x1d8>
 800210c:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <main+0x300>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <main+0x1d8>
			FlashPROM_Write((void*)&settings);
 8002114:	483d      	ldr	r0, [pc, #244]	; (800220c <main+0x2c4>)
 8002116:	f7fe feb3 	bl	8000e80 <FlashPROM_Write>
			autosaveTimer = 0;
 800211a:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <main+0x300>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
		}

	  if(dataReceivedFlag){
 8002120:	4b4a      	ldr	r3, [pc, #296]	; (800224c <main+0x304>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0b8      	beq.n	800209a <main+0x152>
		  switch (rxBuff[0])
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <main+0x2fc>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b0a      	cmp	r3, #10
 800212e:	f200 8147 	bhi.w	80023c0 <main+0x478>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <main+0x1f0>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002165 	.word	0x08002165
 800213c:	0800217b 	.word	0x0800217b
 8002140:	080021c7 	.word	0x080021c7
 8002144:	080021d1 	.word	0x080021d1
 8002148:	080021db 	.word	0x080021db
 800214c:	080021e5 	.word	0x080021e5
 8002150:	080021ef 	.word	0x080021ef
 8002154:	08002251 	.word	0x08002251
 8002158:	08002273 	.word	0x08002273
 800215c:	080022dd 	.word	0x080022dd
 8002160:	0800234b 	.word	0x0800234b
		  	{
		  	case SET_BRIGHTNESS:
		  	{
		  		settings.brightness = rxBuff[1];
 8002164:	4b37      	ldr	r3, [pc, #220]	; (8002244 <main+0x2fc>)
 8002166:	785a      	ldrb	r2, [r3, #1]
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <main+0x2c4>)
 800216a:	705a      	strb	r2, [r3, #1]
		  		WS2812B_SetBrightness(&myled, settings.brightness);
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <main+0x2c4>)
 800216e:	785b      	ldrb	r3, [r3, #1]
 8002170:	4619      	mov	r1, r3
 8002172:	4833      	ldr	r0, [pc, #204]	; (8002240 <main+0x2f8>)
 8002174:	f7fe ffb3 	bl	80010de <WS2812B_SetBrightness>
		  		break;
 8002178:	e122      	b.n	80023c0 <main+0x478>
		  	}
		  	case SET_COLOR:
		  	{
		  		settings.colorR = rxBuff[1];
 800217a:	4b32      	ldr	r3, [pc, #200]	; (8002244 <main+0x2fc>)
 800217c:	785a      	ldrb	r2, [r3, #1]
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <main+0x2c4>)
 8002180:	709a      	strb	r2, [r3, #2]
		  		settings.colorG = rxBuff[2];
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <main+0x2fc>)
 8002184:	789a      	ldrb	r2, [r3, #2]
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <main+0x2c4>)
 8002188:	70da      	strb	r2, [r3, #3]
		  		settings.colorB = rxBuff[3];
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <main+0x2fc>)
 800218c:	78da      	ldrb	r2, [r3, #3]
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <main+0x2c4>)
 8002190:	711a      	strb	r2, [r3, #4]
		  		for(int i = 0; i < settings.numleds; i++)
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
 8002196:	e00f      	b.n	80021b8 <main+0x270>
		  			WS2812B_SetPixelRGB(&myled, settings.colorR, settings.colorG, settings.colorB, i);
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <main+0x2c4>)
 800219a:	7899      	ldrb	r1, [r3, #2]
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <main+0x2c4>)
 800219e:	78da      	ldrb	r2, [r3, #3]
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <main+0x2c4>)
 80021a2:	7918      	ldrb	r0, [r3, #4]
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	4603      	mov	r3, r0
 80021ac:	4824      	ldr	r0, [pc, #144]	; (8002240 <main+0x2f8>)
 80021ae:	f7ff f887 	bl	80012c0 <WS2812B_SetPixelRGB>
		  		for(int i = 0; i < settings.numleds; i++)
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	3301      	adds	r3, #1
 80021b6:	623b      	str	r3, [r7, #32]
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <main+0x2c4>)
 80021ba:	7b1b      	ldrb	r3, [r3, #12]
 80021bc:	461a      	mov	r2, r3
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	4293      	cmp	r3, r2
 80021c2:	dbe9      	blt.n	8002198 <main+0x250>
		  		break;
 80021c4:	e0fc      	b.n	80023c0 <main+0x478>
		  	}
		  	case SET_EFFECT:
		  	{
		  		settings.effect = rxBuff[1];
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <main+0x2fc>)
 80021c8:	785a      	ldrb	r2, [r3, #1]
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <main+0x2c4>)
 80021cc:	715a      	strb	r2, [r3, #5]
		  		break;
 80021ce:	e0f7      	b.n	80023c0 <main+0x478>
		  	}
		  	case SET_EFFECT_DELAY:
		  	{
		  		settings.effectDelay = rxBuff[1];
 80021d0:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <main+0x2fc>)
 80021d2:	785a      	ldrb	r2, [r3, #1]
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <main+0x2c4>)
 80021d6:	719a      	strb	r2, [r3, #6]
		  		break;
 80021d8:	e0f2      	b.n	80023c0 <main+0x478>
		  	}
		  	case SET_COLOR_MUSIC:
		  	{
		  		settings.colorMusic = rxBuff[1];
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <main+0x2fc>)
 80021dc:	785a      	ldrb	r2, [r3, #1]
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <main+0x2c4>)
 80021e0:	71da      	strb	r2, [r3, #7]
		  		break;
 80021e2:	e0ed      	b.n	80023c0 <main+0x478>
		  	}
		  	case SET_COLOR_MUSIC_DELAY:
		  	{
		  		settings.colorMusicDelay = rxBuff[1];
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <main+0x2fc>)
 80021e6:	785a      	ldrb	r2, [r3, #1]
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <main+0x2c4>)
 80021ea:	721a      	strb	r2, [r3, #8]
		  		break;
 80021ec:	e0e8      	b.n	80023c0 <main+0x478>
		  	}
		  	case SET_COLOR_MUSIC_SENSIVITY:
		  	{
		  		settings.colorMusicLowSensivity = rxBuff[1];
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <main+0x2fc>)
 80021f0:	785a      	ldrb	r2, [r3, #1]
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <main+0x2c4>)
 80021f4:	725a      	strb	r2, [r3, #9]
		  		settings.colorMusicMediumSensivity = rxBuff[2];
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <main+0x2fc>)
 80021f8:	789a      	ldrb	r2, [r3, #2]
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <main+0x2c4>)
 80021fc:	729a      	strb	r2, [r3, #10]
		  		settings.colorMusicHighSensivity = rxBuff[3];
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <main+0x2fc>)
 8002200:	78da      	ldrb	r2, [r3, #3]
 8002202:	4b02      	ldr	r3, [pc, #8]	; (800220c <main+0x2c4>)
 8002204:	72da      	strb	r2, [r3, #11]
		  		break;
 8002206:	e0db      	b.n	80023c0 <main+0x478>
 8002208:	40011000 	.word	0x40011000
 800220c:	20000460 	.word	0x20000460
 8002210:	080075c8 	.word	0x080075c8
 8002214:	2000046d 	.word	0x2000046d
 8002218:	2000047d 	.word	0x2000047d
 800221c:	080075d0 	.word	0x080075d0
 8002220:	2000048d 	.word	0x2000048d
 8002224:	080075d8 	.word	0x080075d8
 8002228:	2000049d 	.word	0x2000049d
 800222c:	200003d8 	.word	0x200003d8
 8002230:	080075e4 	.word	0x080075e4
 8002234:	080075f4 	.word	0x080075f4
 8002238:	08007600 	.word	0x08007600
 800223c:	20000304 	.word	0x20000304
 8002240:	200004b0 	.word	0x200004b0
 8002244:	200004c8 	.word	0x200004c8
 8002248:	200002d0 	.word	0x200002d0
 800224c:	200004e9 	.word	0x200004e9
		  	}
		  	case SET_NUM_LEDS:
		  	{
		  		if(rxBuff[1] <= MAX_LEDS){
 8002250:	4b62      	ldr	r3, [pc, #392]	; (80023dc <main+0x494>)
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	2bf0      	cmp	r3, #240	; 0xf0
 8002256:	f200 80b0 	bhi.w	80023ba <main+0x472>
		  			settings.numleds = rxBuff[1];
 800225a:	4b60      	ldr	r3, [pc, #384]	; (80023dc <main+0x494>)
 800225c:	785a      	ldrb	r2, [r3, #1]
 800225e:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <main+0x498>)
 8002260:	731a      	strb	r2, [r3, #12]
		  			WS2812B_SetNumLeds(&myled, settings.numleds);
 8002262:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <main+0x498>)
 8002264:	7b1b      	ldrb	r3, [r3, #12]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	485e      	ldr	r0, [pc, #376]	; (80023e4 <main+0x49c>)
 800226c:	f7fe ff6d 	bl	800114a <WS2812B_SetNumLeds>
		  		}
		  		break;
 8002270:	e0a3      	b.n	80023ba <main+0x472>
		  	}
		  	case SET_WIFI_SETTENGS:
		  	{
		  		for(int i = 1; i < sizeof(settings.ssidSTA); i++)
 8002272:	2301      	movs	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e00c      	b.n	8002292 <main+0x34a>
		  			settings.ssidSTA[i - 1] = rxBuff[i];
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	3b01      	subs	r3, #1
 800227c:	4957      	ldr	r1, [pc, #348]	; (80023dc <main+0x494>)
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	440a      	add	r2, r1
 8002282:	7811      	ldrb	r1, [r2, #0]
 8002284:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <main+0x498>)
 8002286:	4413      	add	r3, r2
 8002288:	460a      	mov	r2, r1
 800228a:	735a      	strb	r2, [r3, #13]
		  		for(int i = 1; i < sizeof(settings.ssidSTA); i++)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3301      	adds	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d9ef      	bls.n	8002278 <main+0x330>
		  		for(int i = 1; i < sizeof(settings.passSTA); i++)
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e00d      	b.n	80022ba <main+0x372>
		  			settings.passSTA[i - 1] = rxBuff[i + sizeof(settings.ssidSTA)];
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f103 0210 	add.w	r2, r3, #16
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	494c      	ldr	r1, [pc, #304]	; (80023dc <main+0x494>)
 80022aa:	5c89      	ldrb	r1, [r1, r2]
 80022ac:	4a4c      	ldr	r2, [pc, #304]	; (80023e0 <main+0x498>)
 80022ae:	4413      	add	r3, r2
 80022b0:	460a      	mov	r2, r1
 80022b2:	775a      	strb	r2, [r3, #29]
		  		for(int i = 1; i < sizeof(settings.passSTA); i++)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	3301      	adds	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d9ee      	bls.n	800229e <main+0x356>

		  		FlashPROM_Write((void*)&settings);
 80022c0:	4847      	ldr	r0, [pc, #284]	; (80023e0 <main+0x498>)
 80022c2:	f7fe fddd 	bl	8000e80 <FlashPROM_Write>
		  		HAL_Delay(5);
 80022c6:	2005      	movs	r0, #5
 80022c8:	f000 fd44 	bl	8002d54 <HAL_Delay>
 80022cc:	2301      	movs	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f383 8813 	msr	FAULTMASK, r3
}
 80022d6:	bf00      	nop
		  		__set_FAULTMASK(1);
		  		NVIC_SystemReset();
 80022d8:	f7ff fdfc 	bl	8001ed4 <__NVIC_SystemReset>
		  		break;
		  	}
		  	case SET_AP_SETTINGS:
		  	{
		  		for(int i = 1; i < sizeof(settings.ssidAP); i++)
 80022dc:	2301      	movs	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e00d      	b.n	80022fe <main+0x3b6>
		  			settings.ssidAP[i - 1] = rxBuff[i];
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	493d      	ldr	r1, [pc, #244]	; (80023dc <main+0x494>)
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	440a      	add	r2, r1
 80022ec:	7811      	ldrb	r1, [r2, #0]
 80022ee:	4a3c      	ldr	r2, [pc, #240]	; (80023e0 <main+0x498>)
 80022f0:	4413      	add	r3, r2
 80022f2:	460a      	mov	r2, r1
 80022f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		  		for(int i = 1; i < sizeof(settings.ssidAP); i++)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d9ee      	bls.n	80022e2 <main+0x39a>
		  		for(int i = 1; i < sizeof(settings.passAP); i++)
 8002304:	2301      	movs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e00e      	b.n	8002328 <main+0x3e0>
		  			settings.passAP[i - 1] = rxBuff[i + sizeof(settings.ssidAP)];
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f103 0210 	add.w	r2, r3, #16
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	3b01      	subs	r3, #1
 8002314:	4931      	ldr	r1, [pc, #196]	; (80023dc <main+0x494>)
 8002316:	5c89      	ldrb	r1, [r1, r2]
 8002318:	4a31      	ldr	r2, [pc, #196]	; (80023e0 <main+0x498>)
 800231a:	4413      	add	r3, r2
 800231c:	460a      	mov	r2, r1
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		  		for(int i = 1; i < sizeof(settings.passAP); i++)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	3301      	adds	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	d9ed      	bls.n	800230a <main+0x3c2>

		  		FlashPROM_Write((void*)&settings);
 800232e:	482c      	ldr	r0, [pc, #176]	; (80023e0 <main+0x498>)
 8002330:	f7fe fda6 	bl	8000e80 <FlashPROM_Write>
		  		HAL_Delay(5);
 8002334:	2005      	movs	r0, #5
 8002336:	f000 fd0d 	bl	8002d54 <HAL_Delay>
 800233a:	2301      	movs	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f383 8813 	msr	FAULTMASK, r3
}
 8002344:	bf00      	nop
		  		__set_FAULTMASK(1);
		  		NVIC_SystemReset();
 8002346:	f7ff fdc5 	bl	8001ed4 <__NVIC_SystemReset>
		  		break;
		  	}
		  	case SET_ON_OFF:
		  	{
		  		settings.onOff = !settings.onOff;
 800234a:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <main+0x498>)
 800234c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <main+0x498>)
 800235e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		  		if(!settings.onOff){
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <main+0x498>)
 8002364:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002368:	2b00      	cmp	r3, #0
 800236a:	d128      	bne.n	80023be <main+0x476>
		  			for(int i = 0; i < settings.numleds; i++)
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e00b      	b.n	800238a <main+0x442>
		  				WS2812B_SetPixelRGB(&myled, 0, 0, 0, i);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	b29b      	uxth	r3, r3
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	4819      	ldr	r0, [pc, #100]	; (80023e4 <main+0x49c>)
 8002380:	f7fe ff9e 	bl	80012c0 <WS2812B_SetPixelRGB>
		  			for(int i = 0; i < settings.numleds; i++)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <main+0x498>)
 800238c:	7b1b      	ldrb	r3, [r3, #12]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4293      	cmp	r3, r2
 8002394:	dbed      	blt.n	8002372 <main+0x42a>
		  			WS2812B_MakeEffect(&myled, EFFECT_NONE, settings.effectDelay);
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <main+0x498>)
 8002398:	799b      	ldrb	r3, [r3, #6]
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	2100      	movs	r1, #0
 80023a0:	4810      	ldr	r0, [pc, #64]	; (80023e4 <main+0x49c>)
 80023a2:	f7ff fc7d 	bl	8001ca0 <WS2812B_MakeEffect>
		  			WS2812B_Show(&myled);
 80023a6:	480f      	ldr	r0, [pc, #60]	; (80023e4 <main+0x49c>)
 80023a8:	f7fe ff00 	bl	80011ac <WS2812B_Show>
		  			FlashPROM_Write((void*)&settings);
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <main+0x498>)
 80023ae:	f7fe fd67 	bl	8000e80 <FlashPROM_Write>
		  			HAL_Delay(5);
 80023b2:	2005      	movs	r0, #5
 80023b4:	f000 fcce 	bl	8002d54 <HAL_Delay>
		  		}
		  		break;
 80023b8:	e001      	b.n	80023be <main+0x476>
		  		break;
 80023ba:	bf00      	nop
 80023bc:	e000      	b.n	80023c0 <main+0x478>
		  		break;
 80023be:	bf00      	nop
		  	}
		  	}
		  	memset(rxBuff, 0, RX_BUFF_SIZE);
 80023c0:	2221      	movs	r2, #33	; 0x21
 80023c2:	2100      	movs	r1, #0
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <main+0x494>)
 80023c6:	f004 fc67 	bl	8006c98 <memset>
		  	autosaveTimer = HAL_GetTick();
 80023ca:	f000 fcb9 	bl	8002d40 <HAL_GetTick>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <main+0x4a0>)
 80023d2:	6013      	str	r3, [r2, #0]
		  	dataReceivedFlag = 0;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <main+0x4a4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
		if(settings.onOff){
 80023da:	e65e      	b.n	800209a <main+0x152>
 80023dc:	200004c8 	.word	0x200004c8
 80023e0:	20000460 	.word	0x20000460
 80023e4:	200004b0 	.word	0x200004b0
 80023e8:	200002d0 	.word	0x200002d0
 80023ec:	200004e9 	.word	0x200004e9

080023f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b094      	sub	sp, #80	; 0x50
 80023f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fa:	2228      	movs	r2, #40	; 0x28
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 fc4a 	bl	8006c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002420:	2301      	movs	r3, #1
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800242e:	2301      	movs	r3, #1
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002432:	2302      	movs	r3, #2
 8002434:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800243c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002440:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fefa 	bl	8004240 <HAL_RCC_OscConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002452:	f000 f9d3 	bl	80027fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002456:	230f      	movs	r3, #15
 8002458:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800245a:	2302      	movs	r3, #2
 800245c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002466:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2102      	movs	r1, #2
 8002472:	4618      	mov	r0, r3
 8002474:	f002 f966 	bl	8004744 <HAL_RCC_ClockConfig>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800247e:	f000 f9bd 	bl	80027fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002482:	2302      	movs	r3, #2
 8002484:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	4618      	mov	r0, r3
 8002490:	f002 faf0 	bl	8004a74 <HAL_RCCEx_PeriphCLKConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800249a:	f000 f9af 	bl	80027fc <Error_Handler>
  }
}
 800249e:	bf00      	nop
 80024a0:	3750      	adds	r7, #80	; 0x50
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <MX_ADC1_Init+0x74>)
 80024ba:	4a19      	ldr	r2, [pc, #100]	; (8002520 <MX_ADC1_Init+0x78>)
 80024bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <MX_ADC1_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <MX_ADC1_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <MX_ADC1_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <MX_ADC1_Init+0x74>)
 80024d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <MX_ADC1_Init+0x74>)
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_ADC1_Init+0x74>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <MX_ADC1_Init+0x74>)
 80024e6:	f000 fc59 	bl	8002d9c <HAL_ADC_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80024f0:	f000 f984 	bl	80027fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024f8:	2301      	movs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80024fc:	2306      	movs	r3, #6
 80024fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_ADC1_Init+0x74>)
 8002506:	f000 fdf7 	bl	80030f8 <HAL_ADC_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002510:	f000 f974 	bl	80027fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200002d4 	.word	0x200002d4
 8002520:	40012400 	.word	0x40012400

08002524 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b092      	sub	sp, #72	; 0x48
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
 8002544:	615a      	str	r2, [r3, #20]
 8002546:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2220      	movs	r2, #32
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fba2 	bl	8006c98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <MX_TIM1_Init+0xfc>)
 8002556:	4a33      	ldr	r2, [pc, #204]	; (8002624 <MX_TIM1_Init+0x100>)
 8002558:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <MX_TIM1_Init+0xfc>)
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <MX_TIM1_Init+0xfc>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <MX_TIM1_Init+0xfc>)
 8002568:	2259      	movs	r2, #89	; 0x59
 800256a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <MX_TIM1_Init+0xfc>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <MX_TIM1_Init+0xfc>)
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <MX_TIM1_Init+0xfc>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800257e:	4828      	ldr	r0, [pc, #160]	; (8002620 <MX_TIM1_Init+0xfc>)
 8002580:	f002 fb7d 	bl	8004c7e <HAL_TIM_PWM_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800258a:	f000 f937 	bl	80027fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800259a:	4619      	mov	r1, r3
 800259c:	4820      	ldr	r0, [pc, #128]	; (8002620 <MX_TIM1_Init+0xfc>)
 800259e:	f003 fb27 	bl	8005bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80025a8:	f000 f928 	bl	80027fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ac:	2360      	movs	r3, #96	; 0x60
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025cc:	2200      	movs	r2, #0
 80025ce:	4619      	mov	r1, r3
 80025d0:	4813      	ldr	r0, [pc, #76]	; (8002620 <MX_TIM1_Init+0xfc>)
 80025d2:	f002 fdfb 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80025dc:	f000 f90e 	bl	80027fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4807      	ldr	r0, [pc, #28]	; (8002620 <MX_TIM1_Init+0xfc>)
 8002604:	f003 fb52 	bl	8005cac <HAL_TIMEx_ConfigBreakDeadTime>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800260e:	f000 f8f5 	bl	80027fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002612:	4803      	ldr	r0, [pc, #12]	; (8002620 <MX_TIM1_Init+0xfc>)
 8002614:	f000 f9d6 	bl	80029c4 <HAL_TIM_MspPostInit>

}
 8002618:	bf00      	nop
 800261a:	3748      	adds	r7, #72	; 0x48
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000304 	.word	0x20000304
 8002624:	40012c00 	.word	0x40012c00

08002628 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	463b      	mov	r3, r7
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <MX_TIM3_Init+0x94>)
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <MX_TIM3_Init+0x98>)
 8002648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <MX_TIM3_Init+0x94>)
 800264c:	2200      	movs	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <MX_TIM3_Init+0x94>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4500-1;
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <MX_TIM3_Init+0x94>)
 8002658:	f241 1293 	movw	r2, #4499	; 0x1193
 800265c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <MX_TIM3_Init+0x94>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <MX_TIM3_Init+0x94>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800266a:	4814      	ldr	r0, [pc, #80]	; (80026bc <MX_TIM3_Init+0x94>)
 800266c:	f002 fab8 	bl	8004be0 <HAL_TIM_Base_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002676:	f000 f8c1 	bl	80027fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	4619      	mov	r1, r3
 8002686:	480d      	ldr	r0, [pc, #52]	; (80026bc <MX_TIM3_Init+0x94>)
 8002688:	f002 fe5e 	bl	8005348 <HAL_TIM_ConfigClockSource>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002692:	f000 f8b3 	bl	80027fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002696:	2320      	movs	r3, #32
 8002698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800269e:	463b      	mov	r3, r7
 80026a0:	4619      	mov	r1, r3
 80026a2:	4806      	ldr	r0, [pc, #24]	; (80026bc <MX_TIM3_Init+0x94>)
 80026a4:	f003 faa4 	bl	8005bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026ae:	f000 f8a5 	bl	80027fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000034c 	.word	0x2000034c
 80026c0:	40000400 	.word	0x40000400

080026c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <MX_USART1_UART_Init+0x50>)
 80026cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026ea:	220c      	movs	r2, #12
 80026ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_USART1_UART_Init+0x4c>)
 80026fc:	f003 fb27 	bl	8005d4e <HAL_UART_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002706:	f000 f879 	bl	80027fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200003d8 	.word	0x200003d8
 8002714:	40013800 	.word	0x40013800

08002718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <MX_DMA_Init+0x48>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <MX_DMA_Init+0x48>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6153      	str	r3, [r2, #20]
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <MX_DMA_Init+0x48>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	200c      	movs	r0, #12
 800273c:	f000 fef5 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002740:	200c      	movs	r0, #12
 8002742:	f000 ff0e 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	200f      	movs	r0, #15
 800274c:	f000 feed 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002750:	200f      	movs	r0, #15
 8002752:	f000 ff06 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000

08002764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <MX_GPIO_Init+0x90>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <MX_GPIO_Init+0x90>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <MX_GPIO_Init+0x90>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <MX_GPIO_Init+0x90>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <MX_GPIO_Init+0x90>)
 8002796:	f043 0320 	orr.w	r3, r3, #32
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <MX_GPIO_Init+0x90>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <MX_GPIO_Init+0x90>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <MX_GPIO_Init+0x90>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	6193      	str	r3, [r2, #24]
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <MX_GPIO_Init+0x90>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80027c0:	2200      	movs	r2, #0
 80027c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027c6:	480c      	ldr	r0, [pc, #48]	; (80027f8 <MX_GPIO_Init+0x94>)
 80027c8:	f001 fd08 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80027cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2302      	movs	r3, #2
 80027dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 0310 	add.w	r3, r7, #16
 80027e2:	4619      	mov	r1, r3
 80027e4:	4804      	ldr	r0, [pc, #16]	; (80027f8 <MX_GPIO_Init+0x94>)
 80027e6:	f001 fb75 	bl	8003ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027ea:	bf00      	nop
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40011000 	.word	0x40011000

080027fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
}
 8002802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002804:	e7fe      	b.n	8002804 <Error_Handler+0x8>
	...

08002808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_MspInit+0x5c>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_MspInit+0x5c>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6193      	str	r3, [r2, #24]
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_MspInit+0x5c>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_MspInit+0x5c>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <HAL_MspInit+0x5c>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	61d3      	str	r3, [r2, #28]
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <HAL_MspInit+0x5c>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_MspInit+0x60>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_MspInit+0x60>)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40021000 	.word	0x40021000
 8002868:	40010000 	.word	0x40010000

0800286c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_ADC_MspInit+0x7c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d129      	bne.n	80028e0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_ADC_MspInit+0x80>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a16      	ldr	r2, [pc, #88]	; (80028ec <HAL_ADC_MspInit+0x80>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002896:	6193      	str	r3, [r2, #24]
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_ADC_MspInit+0x80>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_ADC_MspInit+0x80>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_ADC_MspInit+0x80>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_ADC_MspInit+0x80>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028bc:	2301      	movs	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c0:	2303      	movs	r3, #3
 80028c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	4619      	mov	r1, r3
 80028ca:	4809      	ldr	r0, [pc, #36]	; (80028f0 <HAL_ADC_MspInit+0x84>)
 80028cc:	f001 fb02 	bl	8003ed4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2100      	movs	r1, #0
 80028d4:	2012      	movs	r0, #18
 80028d6:	f000 fe28 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028da:	2012      	movs	r0, #18
 80028dc:	f000 fe41 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028e0:	bf00      	nop
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40012400 	.word	0x40012400
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010800 	.word	0x40010800

080028f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <HAL_TIM_PWM_MspInit+0x84>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d133      	bne.n	800296e <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_TIM_PWM_MspInit+0x88>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_TIM_PWM_MspInit+0x88>)
 800290c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002910:	6193      	str	r3, [r2, #24]
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_TIM_PWM_MspInit+0x88>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_TIM_PWM_MspInit+0x90>)
 8002922:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 8002926:	2210      	movs	r2, #16
 8002928:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 8002938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800293c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 8002940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002944:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002952:	480b      	ldr	r0, [pc, #44]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 8002954:	f000 fe20 	bl	8003598 <HAL_DMA_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 800295e:	f7ff ff4d 	bl	80027fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a06      	ldr	r2, [pc, #24]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 8002966:	625a      	str	r2, [r3, #36]	; 0x24
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <HAL_TIM_PWM_MspInit+0x8c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40021000 	.word	0x40021000
 8002980:	20000394 	.word	0x20000394
 8002984:	4002001c 	.word	0x4002001c

08002988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_TIM_Base_MspInit+0x34>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10b      	bne.n	80029b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_TIM_Base_MspInit+0x38>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <HAL_TIM_Base_MspInit+0x38>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	61d3      	str	r3, [r2, #28]
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_TIM_Base_MspInit+0x38>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40021000 	.word	0x40021000

080029c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_TIM_MspPostInit+0x5c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d118      	bne.n	8002a16 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_TIM_MspPostInit+0x60>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <HAL_TIM_MspPostInit+0x60>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	6193      	str	r3, [r2, #24]
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_TIM_MspPostInit+0x60>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a06:	2303      	movs	r3, #3
 8002a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f107 0310 	add.w	r3, r7, #16
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <HAL_TIM_MspPostInit+0x64>)
 8002a12:	f001 fa5f 	bl	8003ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010800 	.word	0x40010800

08002a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <HAL_UART_MspInit+0xec>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d160      	bne.n	8002b0e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a4c:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <HAL_UART_MspInit+0xf0>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <HAL_UART_MspInit+0xf0>)
 8002a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a56:	6193      	str	r3, [r2, #24]
 8002a58:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <HAL_UART_MspInit+0xf0>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_UART_MspInit+0xf0>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <HAL_UART_MspInit+0xf0>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6193      	str	r3, [r2, #24]
 8002a70:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_UART_MspInit+0xf0>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a86:	2303      	movs	r3, #3
 8002a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4823      	ldr	r0, [pc, #140]	; (8002b20 <HAL_UART_MspInit+0xf4>)
 8002a92:	f001 fa1f 	bl	8003ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	481d      	ldr	r0, [pc, #116]	; (8002b20 <HAL_UART_MspInit+0xf4>)
 8002aac:	f001 fa12 	bl	8003ed4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_UART_MspInit+0xfc>)
 8002ab4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ad4:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ae0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ae2:	4810      	ldr	r0, [pc, #64]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002ae4:	f000 fd58 	bl	8003598 <HAL_DMA_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002aee:	f7ff fe85 	bl	80027fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
 8002af8:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <HAL_UART_MspInit+0xf8>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	2025      	movs	r0, #37	; 0x25
 8002b04:	f000 fd11 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b08:	2025      	movs	r0, #37	; 0x25
 8002b0a:	f000 fd2a 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010800 	.word	0x40010800
 8002b24:	2000041c 	.word	0x2000041c
 8002b28:	40020058 	.word	0x40020058

08002b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <NMI_Handler+0x4>

08002b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <HardFault_Handler+0x4>

08002b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <MemManage_Handler+0x4>

08002b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b42:	e7fe      	b.n	8002b42 <BusFault_Handler+0x4>

08002b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <UsageFault_Handler+0x4>

08002b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b72:	f000 f8d3 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <DMA1_Channel2_IRQHandler+0x10>)
 8002b82:	f000 fe73 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000394 	.word	0x20000394

08002b90 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <DMA1_Channel5_IRQHandler+0x10>)
 8002b96:	f000 fe69 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000041c 	.word	0x2000041c

08002ba4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <ADC1_2_IRQHandler+0x10>)
 8002baa:	f000 f9cf 	bl	8002f4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200002d4 	.word	0x200002d4

08002bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <USART1_IRQHandler+0x10>)
 8002bbe:	f003 fad1 	bl	8006164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200003d8 	.word	0x200003d8

08002bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <_sbrk+0x5c>)
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <_sbrk+0x60>)
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <_sbrk+0x64>)
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <_sbrk+0x68>)
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <_sbrk+0x64>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d207      	bcs.n	8002c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bfc:	f004 f888 	bl	8006d10 <__errno>
 8002c00:	4603      	mov	r3, r0
 8002c02:	220c      	movs	r2, #12
 8002c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	e009      	b.n	8002c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <_sbrk+0x64>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <_sbrk+0x64>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <_sbrk+0x64>)
 8002c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20005000 	.word	0x20005000
 8002c2c:	00000400 	.word	0x00000400
 8002c30:	200004ec 	.word	0x200004ec
 8002c34:	20000660 	.word	0x20000660

08002c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c44:	480c      	ldr	r0, [pc, #48]	; (8002c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c46:	490d      	ldr	r1, [pc, #52]	; (8002c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c4c:	e002      	b.n	8002c54 <LoopCopyDataInit>

08002c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c52:	3304      	adds	r3, #4

08002c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c58:	d3f9      	bcc.n	8002c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	; (8002c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c60:	e001      	b.n	8002c66 <LoopFillZerobss>

08002c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c64:	3204      	adds	r2, #4

08002c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c68:	d3fb      	bcc.n	8002c62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c6a:	f7ff ffe5 	bl	8002c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c6e:	f004 f855 	bl	8006d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c72:	f7ff f969 	bl	8001f48 <main>
  bx lr
 8002c76:	4770      	bx	lr
  ldr r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002c80:	08007774 	.word	0x08007774
  ldr r2, =_sbss
 8002c84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002c88:	20000660 	.word	0x20000660

08002c8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c8c:	e7fe      	b.n	8002c8c <CAN1_RX1_IRQHandler>
	...

08002c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_Init+0x28>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_Init+0x28>)
 8002c9a:	f043 0310 	orr.w	r3, r3, #16
 8002c9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f000 fc37 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca6:	200f      	movs	r0, #15
 8002ca8:	f000 f808 	bl	8002cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cac:	f7ff fdac 	bl	8002808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000

08002cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_InitTick+0x54>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x58>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fc4f 	bl	800357e <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f000 fc17 	bl	800352a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_InitTick+0x5c>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000008 	.word	0x20000008
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_IncTick+0x1c>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_IncTick+0x20>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <HAL_IncTick+0x20>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	200004f0 	.word	0x200004f0

08002d40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return uwTick;
 8002d44:	4b02      	ldr	r3, [pc, #8]	; (8002d50 <HAL_GetTick+0x10>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	200004f0 	.word	0x200004f0

08002d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d5c:	f7ff fff0 	bl	8002d40 <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d005      	beq.n	8002d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_Delay+0x44>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d7a:	bf00      	nop
 8002d7c:	f7ff ffe0 	bl	8002d40 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d8f7      	bhi.n	8002d7c <HAL_Delay+0x28>
  {
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000008 	.word	0x20000008

08002d9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0be      	b.n	8002f3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff fd46 	bl	800286c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fa81 	bl	80032e8 <ADC_ConversionStop_Disable>
 8002de6:	4603      	mov	r3, r0
 8002de8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 8099 	bne.w	8002f2a <HAL_ADC_Init+0x18e>
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 8095 	bne.w	8002f2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e08:	f023 0302 	bic.w	r3, r3, #2
 8002e0c:	f043 0202 	orr.w	r2, r3, #2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7b1b      	ldrb	r3, [r3, #12]
 8002e22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e34:	d003      	beq.n	8002e3e <HAL_ADC_Init+0xa2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_ADC_Init+0xa8>
 8002e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_Init+0xaa>
 8002e44:	2300      	movs	r3, #0
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7d1b      	ldrb	r3, [r3, #20]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d119      	bne.n	8002e88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	7b1b      	ldrb	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	035a      	lsls	r2, r3, #13
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	e00b      	b.n	8002e88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_ADC_Init+0x1a8>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	d003      	beq.n	8002ec2 <HAL_ADC_Init+0x126>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d104      	bne.n	8002ecc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	051b      	lsls	r3, r3, #20
 8002eca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_ADC_Init+0x1ac>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d10b      	bne.n	8002f08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f06:	e018      	b.n	8002f3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f023 0312 	bic.w	r3, r3, #18
 8002f10:	f043 0210 	orr.w	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f28:	e007      	b.n	8002f3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	ffe1f7fd 	.word	0xffe1f7fd
 8002f48:	ff1f0efe 	.word	0xff1f0efe

08002f4c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d140      	bne.n	8002fe4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d139      	bne.n	8002fe4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f96:	d11d      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d119      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0220 	bic.w	r2, r2, #32
 8002fae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f87c 	bl	80030d2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f06f 0212 	mvn.w	r2, #18
 8002fe2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d14f      	bne.n	8003092 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d148      	bne.n	8003092 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003022:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003026:	d012      	beq.n	800304e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003032:	2b00      	cmp	r3, #0
 8003034:	d125      	bne.n	8003082 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003040:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003044:	d11d      	bne.n	8003082 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d119      	bne.n	8003082 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800305c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d105      	bne.n	8003082 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f971 	bl	800336a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 020c 	mvn.w	r2, #12
 8003090:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d114      	bne.n	80030ca <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10d      	bne.n	80030ca <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f812 	bl	80030e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0201 	mvn.w	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x20>
 8003114:	2302      	movs	r3, #2
 8003116:	e0dc      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x1da>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b06      	cmp	r3, #6
 8003126:	d81c      	bhi.n	8003162 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3b05      	subs	r3, #5
 800313a:	221f      	movs	r2, #31
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	4019      	ands	r1, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b05      	subs	r3, #5
 8003154:	fa00 f203 	lsl.w	r2, r0, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	635a      	str	r2, [r3, #52]	; 0x34
 8003160:	e03c      	b.n	80031dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d81c      	bhi.n	80031a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	3b23      	subs	r3, #35	; 0x23
 800317c:	221f      	movs	r2, #31
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	4019      	ands	r1, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3b23      	subs	r3, #35	; 0x23
 8003196:	fa00 f203 	lsl.w	r2, r0, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
 80031a2:	e01b      	b.n	80031dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	3b41      	subs	r3, #65	; 0x41
 80031b6:	221f      	movs	r2, #31
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	4019      	ands	r1, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b41      	subs	r3, #65	; 0x41
 80031d0:	fa00 f203 	lsl.w	r2, r0, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b09      	cmp	r3, #9
 80031e2:	d91c      	bls.n	800321e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68d9      	ldr	r1, [r3, #12]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	3b1e      	subs	r3, #30
 80031f6:	2207      	movs	r2, #7
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	4019      	ands	r1, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6898      	ldr	r0, [r3, #8]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	3b1e      	subs	r3, #30
 8003210:	fa00 f203 	lsl.w	r2, r0, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	e019      	b.n	8003252 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6919      	ldr	r1, [r3, #16]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	2207      	movs	r2, #7
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	4019      	ands	r1, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6898      	ldr	r0, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	fa00 f203 	lsl.w	r2, r0, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b10      	cmp	r3, #16
 8003258:	d003      	beq.n	8003262 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800325e:	2b11      	cmp	r3, #17
 8003260:	d132      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <HAL_ADC_ConfigChannel+0x1e4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d125      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d126      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003288:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b10      	cmp	r3, #16
 8003290:	d11a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003292:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	0c9a      	lsrs	r2, r3, #18
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032a8:	e002      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f9      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x1b2>
 80032b6:	e007      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40012400 	.word	0x40012400
 80032e0:	20000000 	.word	0x20000000
 80032e4:	431bde83 	.word	0x431bde83

080032e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d12e      	bne.n	8003360 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003312:	f7ff fd15 	bl	8002d40 <HAL_GetTick>
 8003316:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003318:	e01b      	b.n	8003352 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800331a:	f7ff fd11 	bl	8002d40 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d914      	bls.n	8003352 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d10d      	bne.n	8003352 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e007      	b.n	8003362 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d0dc      	beq.n	800331a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <__NVIC_SetPriorityGrouping>:
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ae:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	60d3      	str	r3, [r2, #12]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_GetPriorityGrouping>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <__NVIC_GetPriorityGrouping+0x18>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	f003 0307 	and.w	r3, r3, #7
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_EnableIRQ>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	db0b      	blt.n	800340a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	4906      	ldr	r1, [pc, #24]	; (8003414 <__NVIC_EnableIRQ+0x34>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2001      	movs	r0, #1
 8003402:	fa00 f202 	lsl.w	r2, r0, r2
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff90 	bl	8003418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff2d 	bl	800337c <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff42 	bl	80033c4 <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff90 	bl	800346c <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5f 	bl	8003418 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff35 	bl	80033e0 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e043      	b.n	8003636 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_DMA_Init+0xa8>)
 80035b6:	4413      	add	r3, r2
 80035b8:	4a22      	ldr	r2, [pc, #136]	; (8003644 <HAL_DMA_Init+0xac>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	009a      	lsls	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_DMA_Init+0xb0>)
 80035ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	bffdfff8 	.word	0xbffdfff8
 8003644:	cccccccd 	.word	0xcccccccd
 8003648:	40020000 	.word	0x40020000

0800364c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_DMA_Start_IT+0x20>
 8003668:	2302      	movs	r3, #2
 800366a:	e04a      	b.n	8003702 <HAL_DMA_Start_IT+0xb6>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800367a:	2b01      	cmp	r3, #1
 800367c:	d13a      	bne.n	80036f4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f9e8 	bl	8003a78 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 020e 	orr.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e00f      	b.n	80036e2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0204 	bic.w	r2, r2, #4
 80036d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 020a 	orr.w	r2, r2, #10
 80036e0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e005      	b.n	8003700 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
 80036fe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800371c:	2b02      	cmp	r3, #2
 800371e:	d008      	beq.n	8003732 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2204      	movs	r2, #4
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e020      	b.n	8003774 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 020e 	bic.w	r2, r2, #14
 8003740:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
	...

08003780 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003792:	2b02      	cmp	r3, #2
 8003794:	d005      	beq.n	80037a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e051      	b.n	8003846 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 020e 	bic.w	r2, r2, #14
 80037b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_DMA_Abort_IT+0xd0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d029      	beq.n	8003820 <HAL_DMA_Abort_IT+0xa0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_DMA_Abort_IT+0xd4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_DMA_Abort_IT+0x9c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_DMA_Abort_IT+0xd8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01a      	beq.n	8003816 <HAL_DMA_Abort_IT+0x96>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_DMA_Abort_IT+0xdc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d012      	beq.n	8003810 <HAL_DMA_Abort_IT+0x90>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_DMA_Abort_IT+0xe0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00a      	beq.n	800380a <HAL_DMA_Abort_IT+0x8a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_DMA_Abort_IT+0xe4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d102      	bne.n	8003804 <HAL_DMA_Abort_IT+0x84>
 80037fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003802:	e00e      	b.n	8003822 <HAL_DMA_Abort_IT+0xa2>
 8003804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003808:	e00b      	b.n	8003822 <HAL_DMA_Abort_IT+0xa2>
 800380a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800380e:	e008      	b.n	8003822 <HAL_DMA_Abort_IT+0xa2>
 8003810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003814:	e005      	b.n	8003822 <HAL_DMA_Abort_IT+0xa2>
 8003816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800381a:	e002      	b.n	8003822 <HAL_DMA_Abort_IT+0xa2>
 800381c:	2310      	movs	r3, #16
 800381e:	e000      	b.n	8003822 <HAL_DMA_Abort_IT+0xa2>
 8003820:	2301      	movs	r3, #1
 8003822:	4a11      	ldr	r2, [pc, #68]	; (8003868 <HAL_DMA_Abort_IT+0xe8>)
 8003824:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
    } 
  }
  return status;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40020008 	.word	0x40020008
 8003854:	4002001c 	.word	0x4002001c
 8003858:	40020030 	.word	0x40020030
 800385c:	40020044 	.word	0x40020044
 8003860:	40020058 	.word	0x40020058
 8003864:	4002006c 	.word	0x4002006c
 8003868:	40020000 	.word	0x40020000

0800386c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2204      	movs	r2, #4
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d04f      	beq.n	8003934 <HAL_DMA_IRQHandler+0xc8>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d04a      	beq.n	8003934 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0204 	bic.w	r2, r2, #4
 80038ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a66      	ldr	r2, [pc, #408]	; (8003a5c <HAL_DMA_IRQHandler+0x1f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d029      	beq.n	800391a <HAL_DMA_IRQHandler+0xae>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_DMA_IRQHandler+0x1f4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_IRQHandler+0xaa>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a63      	ldr	r2, [pc, #396]	; (8003a64 <HAL_DMA_IRQHandler+0x1f8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01a      	beq.n	8003910 <HAL_DMA_IRQHandler+0xa4>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a62      	ldr	r2, [pc, #392]	; (8003a68 <HAL_DMA_IRQHandler+0x1fc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d012      	beq.n	800390a <HAL_DMA_IRQHandler+0x9e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a60      	ldr	r2, [pc, #384]	; (8003a6c <HAL_DMA_IRQHandler+0x200>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00a      	beq.n	8003904 <HAL_DMA_IRQHandler+0x98>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a5f      	ldr	r2, [pc, #380]	; (8003a70 <HAL_DMA_IRQHandler+0x204>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d102      	bne.n	80038fe <HAL_DMA_IRQHandler+0x92>
 80038f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038fc:	e00e      	b.n	800391c <HAL_DMA_IRQHandler+0xb0>
 80038fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003902:	e00b      	b.n	800391c <HAL_DMA_IRQHandler+0xb0>
 8003904:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003908:	e008      	b.n	800391c <HAL_DMA_IRQHandler+0xb0>
 800390a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800390e:	e005      	b.n	800391c <HAL_DMA_IRQHandler+0xb0>
 8003910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003914:	e002      	b.n	800391c <HAL_DMA_IRQHandler+0xb0>
 8003916:	2340      	movs	r3, #64	; 0x40
 8003918:	e000      	b.n	800391c <HAL_DMA_IRQHandler+0xb0>
 800391a:	2304      	movs	r3, #4
 800391c:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <HAL_DMA_IRQHandler+0x208>)
 800391e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8094 	beq.w	8003a52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003932:	e08e      	b.n	8003a52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2202      	movs	r2, #2
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d056      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x186>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d051      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 020a 	bic.w	r2, r2, #10
 800396a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a38      	ldr	r2, [pc, #224]	; (8003a5c <HAL_DMA_IRQHandler+0x1f0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d029      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x166>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a37      	ldr	r2, [pc, #220]	; (8003a60 <HAL_DMA_IRQHandler+0x1f4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d022      	beq.n	80039ce <HAL_DMA_IRQHandler+0x162>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a35      	ldr	r2, [pc, #212]	; (8003a64 <HAL_DMA_IRQHandler+0x1f8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01a      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x15c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a34      	ldr	r2, [pc, #208]	; (8003a68 <HAL_DMA_IRQHandler+0x1fc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d012      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x156>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a32      	ldr	r2, [pc, #200]	; (8003a6c <HAL_DMA_IRQHandler+0x200>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00a      	beq.n	80039bc <HAL_DMA_IRQHandler+0x150>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_DMA_IRQHandler+0x204>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d102      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x14a>
 80039b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039b4:	e00e      	b.n	80039d4 <HAL_DMA_IRQHandler+0x168>
 80039b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ba:	e00b      	b.n	80039d4 <HAL_DMA_IRQHandler+0x168>
 80039bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c0:	e008      	b.n	80039d4 <HAL_DMA_IRQHandler+0x168>
 80039c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039c6:	e005      	b.n	80039d4 <HAL_DMA_IRQHandler+0x168>
 80039c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039cc:	e002      	b.n	80039d4 <HAL_DMA_IRQHandler+0x168>
 80039ce:	2320      	movs	r3, #32
 80039d0:	e000      	b.n	80039d4 <HAL_DMA_IRQHandler+0x168>
 80039d2:	2302      	movs	r3, #2
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <HAL_DMA_IRQHandler+0x208>)
 80039d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d034      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039f0:	e02f      	b.n	8003a52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2208      	movs	r2, #8
 80039f8:	409a      	lsls	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d028      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x1e8>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d023      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 020e 	bic.w	r2, r2, #14
 8003a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
    }
  }
  return;
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
}
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40020008 	.word	0x40020008
 8003a60:	4002001c 	.word	0x4002001c
 8003a64:	40020030 	.word	0x40020030
 8003a68:	40020044 	.word	0x40020044
 8003a6c:	40020058 	.word	0x40020058
 8003a70:	4002006c 	.word	0x4002006c
 8003a74:	40020000 	.word	0x40020000

08003a78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f202 	lsl.w	r2, r1, r2
 8003a94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d108      	bne.n	8003ab8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ab6:	e007      	b.n	8003ac8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <HAL_FLASH_Program+0xd8>)
 8003af0:	7e1b      	ldrb	r3, [r3, #24]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_FLASH_Program+0x26>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e054      	b.n	8003ba4 <HAL_FLASH_Program+0xd0>
 8003afa:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <HAL_FLASH_Program+0xd8>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b04:	f000 f8a8 	bl	8003c58 <FLASH_WaitForLastOperation>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d144      	bne.n	8003b9c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d102      	bne.n	8003b1e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	757b      	strb	r3, [r7, #21]
 8003b1c:	e007      	b.n	8003b2e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d102      	bne.n	8003b2a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003b24:	2302      	movs	r3, #2
 8003b26:	757b      	strb	r3, [r7, #21]
 8003b28:	e001      	b.n	8003b2e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75bb      	strb	r3, [r7, #22]
 8003b32:	e02d      	b.n	8003b90 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003b34:	7dbb      	ldrb	r3, [r7, #22]
 8003b36:	005a      	lsls	r2, r3, #1
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	eb02 0c03 	add.w	ip, r2, r3
 8003b3e:	7dbb      	ldrb	r3, [r7, #22]
 8003b40:	0119      	lsls	r1, r3, #4
 8003b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b46:	f1c1 0620 	rsb	r6, r1, #32
 8003b4a:	f1a1 0020 	sub.w	r0, r1, #32
 8003b4e:	fa22 f401 	lsr.w	r4, r2, r1
 8003b52:	fa03 f606 	lsl.w	r6, r3, r6
 8003b56:	4334      	orrs	r4, r6
 8003b58:	fa23 f000 	lsr.w	r0, r3, r0
 8003b5c:	4304      	orrs	r4, r0
 8003b5e:	fa23 f501 	lsr.w	r5, r3, r1
 8003b62:	b2a3      	uxth	r3, r4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4660      	mov	r0, ip
 8003b68:	f000 f85a 	bl	8003c20 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b70:	f000 f872 	bl	8003c58 <FLASH_WaitForLastOperation>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <HAL_FLASH_Program+0xdc>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <HAL_FLASH_Program+0xdc>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003b8a:	7dbb      	ldrb	r3, [r7, #22]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	75bb      	strb	r3, [r7, #22]
 8003b90:	7dba      	ldrb	r2, [r7, #22]
 8003b92:	7d7b      	ldrb	r3, [r7, #21]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3cd      	bcc.n	8003b34 <HAL_FLASH_Program+0x60>
 8003b98:	e000      	b.n	8003b9c <HAL_FLASH_Program+0xc8>
      {
        break;
 8003b9a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_FLASH_Program+0xd8>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	761a      	strb	r2, [r3, #24]

  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bac:	200004f8 	.word	0x200004f8
 8003bb0:	40022000 	.word	0x40022000

08003bb4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <HAL_FLASH_Unlock+0x40>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_FLASH_Unlock+0x40>)
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <HAL_FLASH_Unlock+0x44>)
 8003bce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_FLASH_Unlock+0x40>)
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_FLASH_Unlock+0x48>)
 8003bd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <HAL_FLASH_Unlock+0x40>)
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003be6:	79fb      	ldrb	r3, [r7, #7]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	45670123 	.word	0x45670123
 8003bfc:	cdef89ab 	.word	0xcdef89ab

08003c00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_FLASH_Lock+0x1c>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <HAL_FLASH_Lock+0x1c>)
 8003c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40022000 	.word	0x40022000

08003c20 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <FLASH_Program_HalfWord+0x30>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <FLASH_Program_HalfWord+0x34>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <FLASH_Program_HalfWord+0x34>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	887a      	ldrh	r2, [r7, #2]
 8003c42:	801a      	strh	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	200004f8 	.word	0x200004f8
 8003c54:	40022000 	.word	0x40022000

08003c58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003c60:	f7ff f86e 	bl	8002d40 <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003c66:	e010      	b.n	8003c8a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d00c      	beq.n	8003c8a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <FLASH_WaitForLastOperation+0x2e>
 8003c76:	f7ff f863 	bl	8002d40 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d201      	bcs.n	8003c8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e025      	b.n	8003cd6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <FLASH_WaitForLastOperation+0x88>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e8      	bne.n	8003c68 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <FLASH_WaitForLastOperation+0x88>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <FLASH_WaitForLastOperation+0x88>)
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <FLASH_WaitForLastOperation+0x88>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <FLASH_WaitForLastOperation+0x88>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <FLASH_WaitForLastOperation+0x88>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ccc:	f000 f80a 	bl	8003ce4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40022000 	.word	0x40022000

08003ce4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003cee:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <FLASH_SetErrorCode+0x98>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003cfa:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <FLASH_SetErrorCode+0x9c>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f043 0302 	orr.w	r3, r3, #2
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <FLASH_SetErrorCode+0x9c>)
 8003d04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f043 0310 	orr.w	r3, r3, #16
 8003d0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <FLASH_SetErrorCode+0x98>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003d1a:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <FLASH_SetErrorCode+0x9c>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <FLASH_SetErrorCode+0x9c>)
 8003d24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <FLASH_SetErrorCode+0x98>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <FLASH_SetErrorCode+0x9c>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f043 0304 	orr.w	r3, r3, #4
 8003d42:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <FLASH_SetErrorCode+0x9c>)
 8003d44:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <FLASH_SetErrorCode+0x98>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <FLASH_SetErrorCode+0x98>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f240 1201 	movw	r2, #257	; 0x101
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d106      	bne.n	8003d6a <FLASH_SetErrorCode+0x86>
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <FLASH_SetErrorCode+0x98>)
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	4a06      	ldr	r2, [pc, #24]	; (8003d7c <FLASH_SetErrorCode+0x98>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	61d3      	str	r3, [r2, #28]
}  
 8003d68:	e002      	b.n	8003d70 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <FLASH_SetErrorCode+0x98>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60d3      	str	r3, [r2, #12]
}  
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	200004f8 	.word	0x200004f8

08003d84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d96:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <HAL_FLASHEx_Erase+0xd0>)
 8003d98:	7e1b      	ldrb	r3, [r3, #24]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_FLASHEx_Erase+0x1e>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e053      	b.n	8003e4a <HAL_FLASHEx_Erase+0xc6>
 8003da2:	4b2c      	ldr	r3, [pc, #176]	; (8003e54 <HAL_FLASHEx_Erase+0xd0>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d116      	bne.n	8003dde <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003db0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003db4:	f7ff ff50 	bl	8003c58 <FLASH_WaitForLastOperation>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d141      	bne.n	8003e42 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	f000 f84c 	bl	8003e5c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dc8:	f7ff ff46 	bl	8003c58 <FLASH_WaitForLastOperation>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <HAL_FLASHEx_Erase+0xd4>)
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4a20      	ldr	r2, [pc, #128]	; (8003e58 <HAL_FLASHEx_Erase+0xd4>)
 8003dd6:	f023 0304 	bic.w	r3, r3, #4
 8003dda:	6113      	str	r3, [r2, #16]
 8003ddc:	e031      	b.n	8003e42 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003dde:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de2:	f7ff ff39 	bl	8003c58 <FLASH_WaitForLastOperation>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d12a      	bne.n	8003e42 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f04f 32ff 	mov.w	r2, #4294967295
 8003df2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	e019      	b.n	8003e30 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003dfc:	68b8      	ldr	r0, [r7, #8]
 8003dfe:	f000 f849 	bl	8003e94 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e06:	f7ff ff27 	bl	8003c58 <FLASH_WaitForLastOperation>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_FLASHEx_Erase+0xd4>)
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_FLASHEx_Erase+0xd4>)
 8003e14:	f023 0302 	bic.w	r3, r3, #2
 8003e18:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	601a      	str	r2, [r3, #0]
            break;
 8003e26:	e00c      	b.n	8003e42 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e2e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	029a      	lsls	r2, r3, #10
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3dc      	bcc.n	8003dfc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <HAL_FLASHEx_Erase+0xd0>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	761a      	strb	r2, [r3, #24]

  return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200004f8 	.word	0x200004f8
 8003e58:	40022000 	.word	0x40022000

08003e5c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <FLASH_MassErase+0x30>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <FLASH_MassErase+0x34>)
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <FLASH_MassErase+0x34>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <FLASH_MassErase+0x34>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <FLASH_MassErase+0x34>)
 8003e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e80:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	200004f8 	.word	0x200004f8
 8003e90:	40022000 	.word	0x40022000

08003e94 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <FLASH_PageErase+0x38>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <FLASH_PageErase+0x3c>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <FLASH_PageErase+0x3c>)
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <FLASH_PageErase+0x3c>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <FLASH_PageErase+0x3c>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4a05      	ldr	r2, [pc, #20]	; (8003ed0 <FLASH_PageErase+0x3c>)
 8003eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ebe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	200004f8 	.word	0x200004f8
 8003ed0:	40022000 	.word	0x40022000

08003ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b08b      	sub	sp, #44	; 0x2c
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee6:	e169      	b.n	80041bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ee8:	2201      	movs	r2, #1
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f040 8158 	bne.w	80041b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4a9a      	ldr	r2, [pc, #616]	; (8004174 <HAL_GPIO_Init+0x2a0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d05e      	beq.n	8003fce <HAL_GPIO_Init+0xfa>
 8003f10:	4a98      	ldr	r2, [pc, #608]	; (8004174 <HAL_GPIO_Init+0x2a0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d875      	bhi.n	8004002 <HAL_GPIO_Init+0x12e>
 8003f16:	4a98      	ldr	r2, [pc, #608]	; (8004178 <HAL_GPIO_Init+0x2a4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d058      	beq.n	8003fce <HAL_GPIO_Init+0xfa>
 8003f1c:	4a96      	ldr	r2, [pc, #600]	; (8004178 <HAL_GPIO_Init+0x2a4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d86f      	bhi.n	8004002 <HAL_GPIO_Init+0x12e>
 8003f22:	4a96      	ldr	r2, [pc, #600]	; (800417c <HAL_GPIO_Init+0x2a8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d052      	beq.n	8003fce <HAL_GPIO_Init+0xfa>
 8003f28:	4a94      	ldr	r2, [pc, #592]	; (800417c <HAL_GPIO_Init+0x2a8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d869      	bhi.n	8004002 <HAL_GPIO_Init+0x12e>
 8003f2e:	4a94      	ldr	r2, [pc, #592]	; (8004180 <HAL_GPIO_Init+0x2ac>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04c      	beq.n	8003fce <HAL_GPIO_Init+0xfa>
 8003f34:	4a92      	ldr	r2, [pc, #584]	; (8004180 <HAL_GPIO_Init+0x2ac>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d863      	bhi.n	8004002 <HAL_GPIO_Init+0x12e>
 8003f3a:	4a92      	ldr	r2, [pc, #584]	; (8004184 <HAL_GPIO_Init+0x2b0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d046      	beq.n	8003fce <HAL_GPIO_Init+0xfa>
 8003f40:	4a90      	ldr	r2, [pc, #576]	; (8004184 <HAL_GPIO_Init+0x2b0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d85d      	bhi.n	8004002 <HAL_GPIO_Init+0x12e>
 8003f46:	2b12      	cmp	r3, #18
 8003f48:	d82a      	bhi.n	8003fa0 <HAL_GPIO_Init+0xcc>
 8003f4a:	2b12      	cmp	r3, #18
 8003f4c:	d859      	bhi.n	8004002 <HAL_GPIO_Init+0x12e>
 8003f4e:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <HAL_GPIO_Init+0x80>)
 8003f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f54:	08003fcf 	.word	0x08003fcf
 8003f58:	08003fa9 	.word	0x08003fa9
 8003f5c:	08003fbb 	.word	0x08003fbb
 8003f60:	08003ffd 	.word	0x08003ffd
 8003f64:	08004003 	.word	0x08004003
 8003f68:	08004003 	.word	0x08004003
 8003f6c:	08004003 	.word	0x08004003
 8003f70:	08004003 	.word	0x08004003
 8003f74:	08004003 	.word	0x08004003
 8003f78:	08004003 	.word	0x08004003
 8003f7c:	08004003 	.word	0x08004003
 8003f80:	08004003 	.word	0x08004003
 8003f84:	08004003 	.word	0x08004003
 8003f88:	08004003 	.word	0x08004003
 8003f8c:	08004003 	.word	0x08004003
 8003f90:	08004003 	.word	0x08004003
 8003f94:	08004003 	.word	0x08004003
 8003f98:	08003fb1 	.word	0x08003fb1
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	4a79      	ldr	r2, [pc, #484]	; (8004188 <HAL_GPIO_Init+0x2b4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fa6:	e02c      	b.n	8004002 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	623b      	str	r3, [r7, #32]
          break;
 8003fae:	e029      	b.n	8004004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	623b      	str	r3, [r7, #32]
          break;
 8003fb8:	e024      	b.n	8004004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	623b      	str	r3, [r7, #32]
          break;
 8003fc2:	e01f      	b.n	8004004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	623b      	str	r3, [r7, #32]
          break;
 8003fcc:	e01a      	b.n	8004004 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	623b      	str	r3, [r7, #32]
          break;
 8003fda:	e013      	b.n	8004004 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d105      	bne.n	8003ff0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	611a      	str	r2, [r3, #16]
          break;
 8003fee:	e009      	b.n	8004004 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	615a      	str	r2, [r3, #20]
          break;
 8003ffa:	e003      	b.n	8004004 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	623b      	str	r3, [r7, #32]
          break;
 8004000:	e000      	b.n	8004004 <HAL_GPIO_Init+0x130>
          break;
 8004002:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2bff      	cmp	r3, #255	; 0xff
 8004008:	d801      	bhi.n	800400e <HAL_GPIO_Init+0x13a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	e001      	b.n	8004012 <HAL_GPIO_Init+0x13e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2bff      	cmp	r3, #255	; 0xff
 8004018:	d802      	bhi.n	8004020 <HAL_GPIO_Init+0x14c>
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	e002      	b.n	8004026 <HAL_GPIO_Init+0x152>
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	3b08      	subs	r3, #8
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	210f      	movs	r1, #15
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	401a      	ands	r2, r3
 8004038:	6a39      	ldr	r1, [r7, #32]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	431a      	orrs	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80b1 	beq.w	80041b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004054:	4b4d      	ldr	r3, [pc, #308]	; (800418c <HAL_GPIO_Init+0x2b8>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	4a4c      	ldr	r2, [pc, #304]	; (800418c <HAL_GPIO_Init+0x2b8>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6193      	str	r3, [r2, #24]
 8004060:	4b4a      	ldr	r3, [pc, #296]	; (800418c <HAL_GPIO_Init+0x2b8>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800406c:	4a48      	ldr	r2, [pc, #288]	; (8004190 <HAL_GPIO_Init+0x2bc>)
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	3302      	adds	r3, #2
 8004074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004078:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	220f      	movs	r2, #15
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a40      	ldr	r2, [pc, #256]	; (8004194 <HAL_GPIO_Init+0x2c0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_GPIO_Init+0x1ec>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3f      	ldr	r2, [pc, #252]	; (8004198 <HAL_GPIO_Init+0x2c4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00d      	beq.n	80040bc <HAL_GPIO_Init+0x1e8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3e      	ldr	r2, [pc, #248]	; (800419c <HAL_GPIO_Init+0x2c8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <HAL_GPIO_Init+0x1e4>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3d      	ldr	r2, [pc, #244]	; (80041a0 <HAL_GPIO_Init+0x2cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d101      	bne.n	80040b4 <HAL_GPIO_Init+0x1e0>
 80040b0:	2303      	movs	r3, #3
 80040b2:	e006      	b.n	80040c2 <HAL_GPIO_Init+0x1ee>
 80040b4:	2304      	movs	r3, #4
 80040b6:	e004      	b.n	80040c2 <HAL_GPIO_Init+0x1ee>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e002      	b.n	80040c2 <HAL_GPIO_Init+0x1ee>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_GPIO_Init+0x1ee>
 80040c0:	2300      	movs	r3, #0
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	f002 0203 	and.w	r2, r2, #3
 80040c8:	0092      	lsls	r2, r2, #2
 80040ca:	4093      	lsls	r3, r2
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040d2:	492f      	ldr	r1, [pc, #188]	; (8004190 <HAL_GPIO_Init+0x2bc>)
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	089b      	lsrs	r3, r3, #2
 80040d8:	3302      	adds	r3, #2
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d006      	beq.n	80040fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040ec:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	492c      	ldr	r1, [pc, #176]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040fa:	4b2a      	ldr	r3, [pc, #168]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	43db      	mvns	r3, r3
 8004102:	4928      	ldr	r1, [pc, #160]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 8004104:	4013      	ands	r3, r2
 8004106:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d006      	beq.n	8004122 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004114:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	4922      	ldr	r1, [pc, #136]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
 8004120:	e006      	b.n	8004130 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	43db      	mvns	r3, r3
 800412a:	491e      	ldr	r1, [pc, #120]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 800412c:	4013      	ands	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d006      	beq.n	800414a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	4918      	ldr	r1, [pc, #96]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	608b      	str	r3, [r1, #8]
 8004148:	e006      	b.n	8004158 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800414a:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	43db      	mvns	r3, r3
 8004152:	4914      	ldr	r1, [pc, #80]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 8004154:	4013      	ands	r3, r2
 8004156:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d021      	beq.n	80041a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	490e      	ldr	r1, [pc, #56]	; (80041a4 <HAL_GPIO_Init+0x2d0>)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	60cb      	str	r3, [r1, #12]
 8004170:	e021      	b.n	80041b6 <HAL_GPIO_Init+0x2e2>
 8004172:	bf00      	nop
 8004174:	10320000 	.word	0x10320000
 8004178:	10310000 	.word	0x10310000
 800417c:	10220000 	.word	0x10220000
 8004180:	10210000 	.word	0x10210000
 8004184:	10120000 	.word	0x10120000
 8004188:	10110000 	.word	0x10110000
 800418c:	40021000 	.word	0x40021000
 8004190:	40010000 	.word	0x40010000
 8004194:	40010800 	.word	0x40010800
 8004198:	40010c00 	.word	0x40010c00
 800419c:	40011000 	.word	0x40011000
 80041a0:	40011400 	.word	0x40011400
 80041a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_GPIO_Init+0x304>)
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	4909      	ldr	r1, [pc, #36]	; (80041d8 <HAL_GPIO_Init+0x304>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	3301      	adds	r3, #1
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f47f ae8e 	bne.w	8003ee8 <HAL_GPIO_Init+0x14>
  }
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	372c      	adds	r7, #44	; 0x2c
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr
 80041d8:	40010400 	.word	0x40010400

080041dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
 80041e8:	4613      	mov	r3, r2
 80041ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ec:	787b      	ldrb	r3, [r7, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041f8:	e003      	b.n	8004202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	041a      	lsls	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	611a      	str	r2, [r3, #16]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4013      	ands	r3, r2
 8004224:	041a      	lsls	r2, r3, #16
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	43d9      	mvns	r1, r3
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	400b      	ands	r3, r1
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	611a      	str	r2, [r3, #16]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
	...

08004240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e272      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8087 	beq.w	800436e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004260:	4b92      	ldr	r3, [pc, #584]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b04      	cmp	r3, #4
 800426a:	d00c      	beq.n	8004286 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800426c:	4b8f      	ldr	r3, [pc, #572]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d112      	bne.n	800429e <HAL_RCC_OscConfig+0x5e>
 8004278:	4b8c      	ldr	r3, [pc, #560]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d10b      	bne.n	800429e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004286:	4b89      	ldr	r3, [pc, #548]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d06c      	beq.n	800436c <HAL_RCC_OscConfig+0x12c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d168      	bne.n	800436c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e24c      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_OscConfig+0x76>
 80042a8:	4b80      	ldr	r3, [pc, #512]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a7f      	ldr	r2, [pc, #508]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e02e      	b.n	8004314 <HAL_RCC_OscConfig+0xd4>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x98>
 80042be:	4b7b      	ldr	r3, [pc, #492]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7a      	ldr	r2, [pc, #488]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b78      	ldr	r3, [pc, #480]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a77      	ldr	r2, [pc, #476]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e01d      	b.n	8004314 <HAL_RCC_OscConfig+0xd4>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0xbc>
 80042e2:	4b72      	ldr	r3, [pc, #456]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a71      	ldr	r2, [pc, #452]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a6e      	ldr	r2, [pc, #440]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e00b      	b.n	8004314 <HAL_RCC_OscConfig+0xd4>
 80042fc:	4b6b      	ldr	r3, [pc, #428]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a6a      	ldr	r2, [pc, #424]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a67      	ldr	r2, [pc, #412]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 800430e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004312:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe fd10 	bl	8002d40 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004324:	f7fe fd0c 	bl	8002d40 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	; 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e200      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0xe4>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fe fcfc 	bl	8002d40 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fe fcf8 	bl	8002d40 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1ec      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	4b53      	ldr	r3, [pc, #332]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x10c>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d063      	beq.n	8004442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800437a:	4b4c      	ldr	r3, [pc, #304]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004386:	4b49      	ldr	r3, [pc, #292]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b08      	cmp	r3, #8
 8004390:	d11c      	bne.n	80043cc <HAL_RCC_OscConfig+0x18c>
 8004392:	4b46      	ldr	r3, [pc, #280]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d116      	bne.n	80043cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x176>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1c0      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b6:	4b3d      	ldr	r3, [pc, #244]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4939      	ldr	r1, [pc, #228]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	e03a      	b.n	8004442 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d020      	beq.n	8004416 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d4:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCC_OscConfig+0x270>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043da:	f7fe fcb1 	bl	8002d40 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e2:	f7fe fcad 	bl	8002d40 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e1a1      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f4:	4b2d      	ldr	r3, [pc, #180]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4927      	ldr	r1, [pc, #156]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]
 8004414:	e015      	b.n	8004442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <HAL_RCC_OscConfig+0x270>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fe fc90 	bl	8002d40 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004424:	f7fe fc8c 	bl	8002d40 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e180      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d03a      	beq.n	80044c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d019      	beq.n	800448a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445c:	f7fe fc70 	bl	8002d40 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004464:	f7fe fc6c 	bl	8002d40 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e160      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <HAL_RCC_OscConfig+0x26c>)
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004482:	2001      	movs	r0, #1
 8004484:	f000 fad8 	bl	8004a38 <RCC_Delay>
 8004488:	e01c      	b.n	80044c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004490:	f7fe fc56 	bl	8002d40 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004496:	e00f      	b.n	80044b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004498:	f7fe fc52 	bl	8002d40 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d908      	bls.n	80044b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e146      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000
 80044b0:	42420000 	.word	0x42420000
 80044b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	4b92      	ldr	r3, [pc, #584]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e9      	bne.n	8004498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80a6 	beq.w	800461e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d2:	2300      	movs	r3, #0
 80044d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d6:	4b8b      	ldr	r3, [pc, #556]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e2:	4b88      	ldr	r3, [pc, #544]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4a87      	ldr	r2, [pc, #540]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ec:	61d3      	str	r3, [r2, #28]
 80044ee:	4b85      	ldr	r3, [pc, #532]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b82      	ldr	r3, [pc, #520]	; (8004708 <HAL_RCC_OscConfig+0x4c8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d118      	bne.n	800453c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800450a:	4b7f      	ldr	r3, [pc, #508]	; (8004708 <HAL_RCC_OscConfig+0x4c8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a7e      	ldr	r2, [pc, #504]	; (8004708 <HAL_RCC_OscConfig+0x4c8>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004516:	f7fe fc13 	bl	8002d40 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451e:	f7fe fc0f 	bl	8002d40 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b64      	cmp	r3, #100	; 0x64
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e103      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	4b75      	ldr	r3, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x4c8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x312>
 8004544:	4b6f      	ldr	r3, [pc, #444]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4a6e      	ldr	r2, [pc, #440]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6213      	str	r3, [r2, #32]
 8004550:	e02d      	b.n	80045ae <HAL_RCC_OscConfig+0x36e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x334>
 800455a:	4b6a      	ldr	r3, [pc, #424]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	4a69      	ldr	r2, [pc, #420]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	6213      	str	r3, [r2, #32]
 8004566:	4b67      	ldr	r3, [pc, #412]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4a66      	ldr	r2, [pc, #408]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	6213      	str	r3, [r2, #32]
 8004572:	e01c      	b.n	80045ae <HAL_RCC_OscConfig+0x36e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b05      	cmp	r3, #5
 800457a:	d10c      	bne.n	8004596 <HAL_RCC_OscConfig+0x356>
 800457c:	4b61      	ldr	r3, [pc, #388]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4a60      	ldr	r2, [pc, #384]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004582:	f043 0304 	orr.w	r3, r3, #4
 8004586:	6213      	str	r3, [r2, #32]
 8004588:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4a5d      	ldr	r2, [pc, #372]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	e00b      	b.n	80045ae <HAL_RCC_OscConfig+0x36e>
 8004596:	4b5b      	ldr	r3, [pc, #364]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	4a5a      	ldr	r2, [pc, #360]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	6213      	str	r3, [r2, #32]
 80045a2:	4b58      	ldr	r3, [pc, #352]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	4a57      	ldr	r2, [pc, #348]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d015      	beq.n	80045e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7fe fbc3 	bl	8002d40 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fe fbbf 	bl	8002d40 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0b1      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	4b4b      	ldr	r3, [pc, #300]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ee      	beq.n	80045be <HAL_RCC_OscConfig+0x37e>
 80045e0:	e014      	b.n	800460c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e2:	f7fe fbad 	bl	8002d40 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fe fba9 	bl	8002d40 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e09b      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004600:	4b40      	ldr	r3, [pc, #256]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ee      	bne.n	80045ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004612:	4b3c      	ldr	r3, [pc, #240]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	4a3b      	ldr	r2, [pc, #236]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8087 	beq.w	8004736 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b08      	cmp	r3, #8
 8004632:	d061      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d146      	bne.n	80046ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463c:	4b33      	ldr	r3, [pc, #204]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fe fb7d 	bl	8002d40 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464a:	f7fe fb79 	bl	8002d40 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e06d      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800465c:	4b29      	ldr	r3, [pc, #164]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d108      	bne.n	8004684 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	4921      	ldr	r1, [pc, #132]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004684:	4b1f      	ldr	r3, [pc, #124]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a19      	ldr	r1, [r3, #32]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	430b      	orrs	r3, r1
 8004696:	491b      	ldr	r1, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fe fb4d 	bl	8002d40 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046aa:	f7fe fb49 	bl	8002d40 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e03d      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046bc:	4b11      	ldr	r3, [pc, #68]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x46a>
 80046c8:	e035      	b.n	8004736 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fe fb36 	bl	8002d40 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fe fb32 	bl	8002d40 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e026      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x498>
 80046f6:	e01e      	b.n	8004736 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e019      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
 8004704:	40021000 	.word	0x40021000
 8004708:	40007000 	.word	0x40007000
 800470c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_RCC_OscConfig+0x500>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	429a      	cmp	r2, r3
 8004722:	d106      	bne.n	8004732 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d001      	beq.n	8004736 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000

08004744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0d0      	b.n	80048fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004758:	4b6a      	ldr	r3, [pc, #424]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d910      	bls.n	8004788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b67      	ldr	r3, [pc, #412]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 0207 	bic.w	r2, r3, #7
 800476e:	4965      	ldr	r1, [pc, #404]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b63      	ldr	r3, [pc, #396]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0b8      	b.n	80048fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a0:	4b59      	ldr	r3, [pc, #356]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a58      	ldr	r2, [pc, #352]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b8:	4b53      	ldr	r3, [pc, #332]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a52      	ldr	r2, [pc, #328]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b50      	ldr	r3, [pc, #320]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	494d      	ldr	r1, [pc, #308]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d040      	beq.n	8004864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b47      	ldr	r3, [pc, #284]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d115      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e07f      	b.n	80048fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004802:	4b41      	ldr	r3, [pc, #260]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e073      	b.n	80048fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004812:	4b3d      	ldr	r3, [pc, #244]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e06b      	b.n	80048fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004822:	4b39      	ldr	r3, [pc, #228]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f023 0203 	bic.w	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4936      	ldr	r1, [pc, #216]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004834:	f7fe fa84 	bl	8002d40 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	e00a      	b.n	8004852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800483c:	f7fe fa80 	bl	8002d40 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	; 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e053      	b.n	80048fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 020c 	and.w	r2, r3, #12
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	429a      	cmp	r2, r3
 8004862:	d1eb      	bne.n	800483c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004864:	4b27      	ldr	r3, [pc, #156]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d210      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 0207 	bic.w	r2, r3, #7
 800487a:	4922      	ldr	r1, [pc, #136]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b20      	ldr	r3, [pc, #128]	; (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e032      	b.n	80048fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4916      	ldr	r1, [pc, #88]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	490e      	ldr	r1, [pc, #56]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048d2:	f000 f821 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 80048d6:	4602      	mov	r2, r0
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	490a      	ldr	r1, [pc, #40]	; (800490c <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	5ccb      	ldrb	r3, [r1, r3]
 80048e6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ea:	4a09      	ldr	r2, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1cc>)
 80048ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <HAL_RCC_ClockConfig+0x1d0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe f9e2 	bl	8002cbc <HAL_InitTick>

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40022000 	.word	0x40022000
 8004908:	40021000 	.word	0x40021000
 800490c:	08007620 	.word	0x08007620
 8004910:	20000000 	.word	0x20000000
 8004914:	20000004 	.word	0x20000004

08004918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004918:	b490      	push	{r4, r7}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800491e:	4b29      	ldr	r3, [pc, #164]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004920:	1d3c      	adds	r4, r7, #4
 8004922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004928:	f240 2301 	movw	r3, #513	; 0x201
 800492c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b04      	cmp	r3, #4
 8004950:	d002      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x40>
 8004952:	2b08      	cmp	r3, #8
 8004954:	d003      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x46>
 8004956:	e02b      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800495a:	623b      	str	r3, [r7, #32]
      break;
 800495c:	e02b      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	0c9b      	lsrs	r3, r3, #18
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	3328      	adds	r3, #40	; 0x28
 8004968:	443b      	add	r3, r7
 800496a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800496e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d012      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	0c5b      	lsrs	r3, r3, #17
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	3328      	adds	r3, #40	; 0x28
 8004986:	443b      	add	r3, r7
 8004988:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800498c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004992:	fb03 f202 	mul.w	r2, r3, r2
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	e004      	b.n	80049aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a4:	fb02 f303 	mul.w	r3, r2, r3
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	623b      	str	r3, [r7, #32]
      break;
 80049ae:	e002      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80049b2:	623b      	str	r3, [r7, #32]
      break;
 80049b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b6:	6a3b      	ldr	r3, [r7, #32]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3728      	adds	r7, #40	; 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc90      	pop	{r4, r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	08007610 	.word	0x08007610
 80049c8:	40021000 	.word	0x40021000
 80049cc:	007a1200 	.word	0x007a1200
 80049d0:	003d0900 	.word	0x003d0900

080049d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d8:	4b02      	ldr	r3, [pc, #8]	; (80049e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049da:	681b      	ldr	r3, [r3, #0]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	20000000 	.word	0x20000000

080049e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049ec:	f7ff fff2 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4903      	ldr	r1, [pc, #12]	; (8004a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	08007630 	.word	0x08007630

08004a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a14:	f7ff ffde 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	0adb      	lsrs	r3, r3, #11
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4903      	ldr	r1, [pc, #12]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	08007630 	.word	0x08007630

08004a38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <RCC_Delay+0x34>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <RCC_Delay+0x38>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	0a5b      	lsrs	r3, r3, #9
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a54:	bf00      	nop
  }
  while (Delay --);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1e5a      	subs	r2, r3, #1
 8004a5a:	60fa      	str	r2, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f9      	bne.n	8004a54 <RCC_Delay+0x1c>
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	10624dd3 	.word	0x10624dd3

08004a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d07d      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a94:	4b4f      	ldr	r3, [pc, #316]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10d      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa0:	4b4c      	ldr	r3, [pc, #304]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	4a4b      	ldr	r2, [pc, #300]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	61d3      	str	r3, [r2, #28]
 8004aac:	4b49      	ldr	r3, [pc, #292]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abc:	4b46      	ldr	r3, [pc, #280]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d118      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac8:	4b43      	ldr	r3, [pc, #268]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a42      	ldr	r2, [pc, #264]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad4:	f7fe f934 	bl	8002d40 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ada:	e008      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004adc:	f7fe f930 	bl	8002d40 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e06d      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aee:	4b3a      	ldr	r3, [pc, #232]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004afa:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d02e      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d027      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b18:	4b2e      	ldr	r3, [pc, #184]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b22:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b28:	4b2c      	ldr	r3, [pc, #176]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b2e:	4a29      	ldr	r2, [pc, #164]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d014      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3e:	f7fe f8ff 	bl	8002d40 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fe f8fb 	bl	8002d40 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e036      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ee      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4917      	ldr	r1, [pc, #92]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b98:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	490b      	ldr	r1, [pc, #44]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bb6:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40007000 	.word	0x40007000
 8004bdc:	42420440 	.word	0x42420440

08004be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e041      	b.n	8004c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fd febe 	bl	8002988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 fd42 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e041      	b.n	8004d14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fd fe25 	bl	80028f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f000 fcf3 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_TIM_PWM_Start_DMA+0x28>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e022      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x6e>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d109      	bne.n	8004d5e <HAL_TIM_PWM_Start_DMA+0x42>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	e015      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x6e>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d109      	bne.n	8004d78 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e008      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x6e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e14e      	b.n	8005030 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_TIM_PWM_Start_DMA+0x90>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e022      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d109      	bne.n	8004dc6 <HAL_TIM_PWM_Start_DMA+0xaa>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e015      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d109      	bne.n	8004de0 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e008      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d024      	beq.n	8004e40 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start_DMA+0xea>
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e114      	b.n	8005030 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start_DMA+0xfa>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e14:	e016      	b.n	8004e44 <HAL_TIM_PWM_Start_DMA+0x128>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Start_DMA+0x10a>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e24:	e00e      	b.n	8004e44 <HAL_TIM_PWM_Start_DMA+0x128>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x11a>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	e006      	b.n	8004e44 <HAL_TIM_PWM_Start_DMA+0x128>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e3e:	e001      	b.n	8004e44 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0f5      	b.n	8005030 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	f200 80ae 	bhi.w	8004fa8 <HAL_TIM_PWM_Start_DMA+0x28c>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <HAL_TIM_PWM_Start_DMA+0x138>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e89 	.word	0x08004e89
 8004e58:	08004fa9 	.word	0x08004fa9
 8004e5c:	08004fa9 	.word	0x08004fa9
 8004e60:	08004fa9 	.word	0x08004fa9
 8004e64:	08004ed1 	.word	0x08004ed1
 8004e68:	08004fa9 	.word	0x08004fa9
 8004e6c:	08004fa9 	.word	0x08004fa9
 8004e70:	08004fa9 	.word	0x08004fa9
 8004e74:	08004f19 	.word	0x08004f19
 8004e78:	08004fa9 	.word	0x08004fa9
 8004e7c:	08004fa9 	.word	0x08004fa9
 8004e80:	08004fa9 	.word	0x08004fa9
 8004e84:	08004f61 	.word	0x08004f61
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	4a6a      	ldr	r2, [pc, #424]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004e8e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	4a69      	ldr	r2, [pc, #420]	; (800503c <HAL_TIM_PWM_Start_DMA+0x320>)
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	4a68      	ldr	r2, [pc, #416]	; (8005040 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3334      	adds	r3, #52	; 0x34
 8004eac:	461a      	mov	r2, r3
 8004eae:	887b      	ldrh	r3, [r7, #2]
 8004eb0:	f7fe fbcc 	bl	800364c <HAL_DMA_Start_IT>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e0b8      	b.n	8005030 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ecc:	60da      	str	r2, [r3, #12]
      break;
 8004ece:	e06c      	b.n	8004faa <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	4a58      	ldr	r2, [pc, #352]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	4a57      	ldr	r2, [pc, #348]	; (800503c <HAL_TIM_PWM_Start_DMA+0x320>)
 8004ede:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	4a56      	ldr	r2, [pc, #344]	; (8005040 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3338      	adds	r3, #56	; 0x38
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	887b      	ldrh	r3, [r7, #2]
 8004ef8:	f7fe fba8 	bl	800364c <HAL_DMA_Start_IT>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e094      	b.n	8005030 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f14:	60da      	str	r2, [r3, #12]
      break;
 8004f16:	e048      	b.n	8004faa <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	4a46      	ldr	r2, [pc, #280]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4a45      	ldr	r2, [pc, #276]	; (800503c <HAL_TIM_PWM_Start_DMA+0x320>)
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	4a44      	ldr	r2, [pc, #272]	; (8005040 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	333c      	adds	r3, #60	; 0x3c
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	887b      	ldrh	r3, [r7, #2]
 8004f40:	f7fe fb84 	bl	800364c <HAL_DMA_Start_IT>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e070      	b.n	8005030 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5c:	60da      	str	r2, [r3, #12]
      break;
 8004f5e:	e024      	b.n	8004faa <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	4a34      	ldr	r2, [pc, #208]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	4a33      	ldr	r2, [pc, #204]	; (800503c <HAL_TIM_PWM_Start_DMA+0x320>)
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	4a32      	ldr	r2, [pc, #200]	; (8005040 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3340      	adds	r3, #64	; 0x40
 8004f84:	461a      	mov	r2, r3
 8004f86:	887b      	ldrh	r3, [r7, #2]
 8004f88:	f7fe fb60 	bl	800364c <HAL_DMA_Start_IT>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e04c      	b.n	8005030 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fa4:	60da      	str	r2, [r3, #12]
      break;
 8004fa6:	e000      	b.n	8004faa <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004fa8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fdf8 	bl	8005ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a21      	ldr	r2, [pc, #132]	; (8005044 <HAL_TIM_PWM_Start_DMA+0x328>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d107      	bne.n	8004fd2 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_TIM_PWM_Start_DMA+0x328>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2de>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d009      	beq.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2de>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_TIM_PWM_Start_DMA+0x2de>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a15      	ldr	r2, [pc, #84]	; (800504c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d111      	bne.n	800501e <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b06      	cmp	r3, #6
 800500a:	d010      	beq.n	800502e <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	e007      	b.n	800502e <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	08005599 	.word	0x08005599
 800503c:	08005641 	.word	0x08005641
 8005040:	08005507 	.word	0x08005507
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800

08005050 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	d855      	bhi.n	800510c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8005060:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	0800509d 	.word	0x0800509d
 800506c:	0800510d 	.word	0x0800510d
 8005070:	0800510d 	.word	0x0800510d
 8005074:	0800510d 	.word	0x0800510d
 8005078:	080050b9 	.word	0x080050b9
 800507c:	0800510d 	.word	0x0800510d
 8005080:	0800510d 	.word	0x0800510d
 8005084:	0800510d 	.word	0x0800510d
 8005088:	080050d5 	.word	0x080050d5
 800508c:	0800510d 	.word	0x0800510d
 8005090:	0800510d 	.word	0x0800510d
 8005094:	0800510d 	.word	0x0800510d
 8005098:	080050f1 	.word	0x080050f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe fb65 	bl	8003780 <HAL_DMA_Abort_IT>
      break;
 80050b6:	e02a      	b.n	800510e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe fb57 	bl	8003780 <HAL_DMA_Abort_IT>
      break;
 80050d2:	e01c      	b.n	800510e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fb49 	bl	8003780 <HAL_DMA_Abort_IT>
      break;
 80050ee:	e00e      	b.n	800510e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fb3b 	bl	8003780 <HAL_DMA_Abort_IT>
      break;
 800510a:	e000      	b.n	800510e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800510c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fd46 	bl	8005ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d117      	bne.n	8005156 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10f      	bne.n	8005156 <HAL_TIM_PWM_Stop_DMA+0x106>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	f240 4344 	movw	r3, #1092	; 0x444
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <HAL_TIM_PWM_Stop_DMA+0x106>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <HAL_TIM_PWM_Stop_DMA+0x136>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	f240 4344 	movw	r3, #1092	; 0x444
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d107      	bne.n	8005186 <HAL_TIM_PWM_Stop_DMA+0x136>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Stop_DMA+0x146>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005194:	e013      	b.n	80051be <HAL_TIM_PWM_Stop_DMA+0x16e>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Stop_DMA+0x156>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a4:	e00b      	b.n	80051be <HAL_TIM_PWM_Stop_DMA+0x16e>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Stop_DMA+0x166>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b4:	e003      	b.n	80051be <HAL_TIM_PWM_Stop_DMA+0x16e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40012c00 	.word	0x40012c00

080051cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e0ac      	b.n	8005340 <HAL_TIM_PWM_ConfigChannel+0x174>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	f200 809f 	bhi.w	8005334 <HAL_TIM_PWM_ConfigChannel+0x168>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005335 	.word	0x08005335
 8005204:	08005335 	.word	0x08005335
 8005208:	08005335 	.word	0x08005335
 800520c:	08005271 	.word	0x08005271
 8005210:	08005335 	.word	0x08005335
 8005214:	08005335 	.word	0x08005335
 8005218:	08005335 	.word	0x08005335
 800521c:	080052b3 	.word	0x080052b3
 8005220:	08005335 	.word	0x08005335
 8005224:	08005335 	.word	0x08005335
 8005228:	08005335 	.word	0x08005335
 800522c:	080052f3 	.word	0x080052f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fa98 	bl	800576c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0208 	orr.w	r2, r2, #8
 800524a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0204 	bic.w	r2, r2, #4
 800525a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	619a      	str	r2, [r3, #24]
      break;
 800526e:	e062      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fade 	bl	8005838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6999      	ldr	r1, [r3, #24]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	619a      	str	r2, [r3, #24]
      break;
 80052b0:	e041      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fb27 	bl	800590c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0208 	orr.w	r2, r2, #8
 80052cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0204 	bic.w	r2, r2, #4
 80052dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69d9      	ldr	r1, [r3, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	61da      	str	r2, [r3, #28]
      break;
 80052f0:	e021      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fb71 	bl	80059e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69d9      	ldr	r1, [r3, #28]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	021a      	lsls	r2, r3, #8
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	61da      	str	r2, [r3, #28]
      break;
 8005332:	e000      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIM_ConfigClockSource+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e0b3      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x180>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800537e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005386:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005398:	d03e      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0xd0>
 800539a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539e:	f200 8087 	bhi.w	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a6:	f000 8085 	beq.w	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	d87f      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053b0:	2b70      	cmp	r3, #112	; 0x70
 80053b2:	d01a      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0xa2>
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d87b      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053b8:	2b60      	cmp	r3, #96	; 0x60
 80053ba:	d050      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x116>
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d877      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053c0:	2b50      	cmp	r3, #80	; 0x50
 80053c2:	d03c      	beq.n	800543e <HAL_TIM_ConfigClockSource+0xf6>
 80053c4:	2b50      	cmp	r3, #80	; 0x50
 80053c6:	d873      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d058      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x136>
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d86f      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053d0:	2b30      	cmp	r3, #48	; 0x30
 80053d2:	d064      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x156>
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d86b      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d060      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x156>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d867      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05c      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x156>
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d05a      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053e8:	e062      	b.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6899      	ldr	r1, [r3, #8]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f000 fbb6 	bl	8005b6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800540c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	609a      	str	r2, [r3, #8]
      break;
 8005416:	e04e      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6899      	ldr	r1, [r3, #8]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f000 fb9f 	bl	8005b6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800543a:	609a      	str	r2, [r3, #8]
      break;
 800543c:	e03b      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	461a      	mov	r2, r3
 800544c:	f000 fb16 	bl	8005a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2150      	movs	r1, #80	; 0x50
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fb6d 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 800545c:	e02b      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	461a      	mov	r2, r3
 800546c:	f000 fb34 	bl	8005ad8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2160      	movs	r1, #96	; 0x60
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fb5d 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 800547c:	e01b      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6859      	ldr	r1, [r3, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	461a      	mov	r2, r3
 800548c:	f000 faf6 	bl	8005a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2140      	movs	r1, #64	; 0x40
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fb4d 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 800549c:	e00b      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f000 fb44 	bl	8005b36 <TIM_ITRx_SetConfig>
        break;
 80054ae:	e002      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	429a      	cmp	r2, r3
 800551c:	d107      	bne.n	800552e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800552c:	e02a      	b.n	8005584 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d107      	bne.n	8005548 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2202      	movs	r2, #2
 800553c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005546:	e01d      	b.n	8005584 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	429a      	cmp	r2, r3
 8005550:	d107      	bne.n	8005562 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2204      	movs	r2, #4
 8005556:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005560:	e010      	b.n	8005584 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	429a      	cmp	r2, r3
 800556a:	d107      	bne.n	800557c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2208      	movs	r2, #8
 8005570:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800557a:	e003      	b.n	8005584 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff ffb5 	bl	80054f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d10b      	bne.n	80055c8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d136      	bne.n	800562c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c6:	e031      	b.n	800562c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d10b      	bne.n	80055ea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2202      	movs	r2, #2
 80055d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d125      	bne.n	800562c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e8:	e020      	b.n	800562c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d10b      	bne.n	800560c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2204      	movs	r2, #4
 80055f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d114      	bne.n	800562c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560a:	e00f      	b.n	800562c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d10a      	bne.n	800562c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2208      	movs	r2, #8
 800561a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d103      	bne.n	800562c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff ff4f 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d103      	bne.n	8005660 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	771a      	strb	r2, [r3, #28]
 800565e:	e019      	b.n	8005694 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d103      	bne.n	8005672 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2202      	movs	r2, #2
 800566e:	771a      	strb	r2, [r3, #28]
 8005670:	e010      	b.n	8005694 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	d103      	bne.n	8005684 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2204      	movs	r2, #4
 8005680:	771a      	strb	r2, [r3, #28]
 8005682:	e007      	b.n	8005694 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	429a      	cmp	r2, r3
 800568c:	d102      	bne.n	8005694 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2208      	movs	r2, #8
 8005692:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff ff24 	bl	80054e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a29      	ldr	r2, [pc, #164]	; (8005760 <TIM_Base_SetConfig+0xb8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00b      	beq.n	80056d8 <TIM_Base_SetConfig+0x30>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d007      	beq.n	80056d8 <TIM_Base_SetConfig+0x30>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a26      	ldr	r2, [pc, #152]	; (8005764 <TIM_Base_SetConfig+0xbc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_Base_SetConfig+0x30>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a25      	ldr	r2, [pc, #148]	; (8005768 <TIM_Base_SetConfig+0xc0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d108      	bne.n	80056ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <TIM_Base_SetConfig+0xb8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00b      	beq.n	800570a <TIM_Base_SetConfig+0x62>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f8:	d007      	beq.n	800570a <TIM_Base_SetConfig+0x62>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a19      	ldr	r2, [pc, #100]	; (8005764 <TIM_Base_SetConfig+0xbc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_Base_SetConfig+0x62>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a18      	ldr	r2, [pc, #96]	; (8005768 <TIM_Base_SetConfig+0xc0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d108      	bne.n	800571c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a07      	ldr	r2, [pc, #28]	; (8005760 <TIM_Base_SetConfig+0xb8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d103      	bne.n	8005750 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	615a      	str	r2, [r3, #20]
}
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800

0800576c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0303 	bic.w	r3, r3, #3
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f023 0302 	bic.w	r3, r3, #2
 80057b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <TIM_OC1_SetConfig+0xc8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d10c      	bne.n	80057e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0308 	bic.w	r3, r3, #8
 80057ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f023 0304 	bic.w	r3, r3, #4
 80057e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a13      	ldr	r2, [pc, #76]	; (8005834 <TIM_OC1_SetConfig+0xc8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d111      	bne.n	800580e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	621a      	str	r2, [r3, #32]
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00

08005838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f023 0210 	bic.w	r2, r3, #16
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0320 	bic.w	r3, r3, #32
 8005882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <TIM_OC2_SetConfig+0xd0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d10d      	bne.n	80058b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a14      	ldr	r2, [pc, #80]	; (8005908 <TIM_OC2_SetConfig+0xd0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d113      	bne.n	80058e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr
 8005908:	40012c00 	.word	0x40012c00

0800590c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0303 	bic.w	r3, r3, #3
 8005942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <TIM_OC3_SetConfig+0xd0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d10d      	bne.n	8005986 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a14      	ldr	r2, [pc, #80]	; (80059dc <TIM_OC3_SetConfig+0xd0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d113      	bne.n	80059b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00

080059e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	031b      	lsls	r3, r3, #12
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a0f      	ldr	r2, [pc, #60]	; (8005a78 <TIM_OC4_SetConfig+0x98>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d109      	bne.n	8005a54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	40012c00 	.word	0x40012c00

08005a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f023 0201 	bic.w	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 030a 	bic.w	r3, r3, #10
 8005ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f023 0210 	bic.w	r2, r3, #16
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	031b      	lsls	r3, r3, #12
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f043 0307 	orr.w	r3, r3, #7
 8005b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	609a      	str	r2, [r3, #8]
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	021a      	lsls	r2, r3, #8
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	609a      	str	r2, [r3, #8]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	2201      	movs	r2, #1
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1a      	ldr	r2, [r3, #32]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	401a      	ands	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]
}
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e046      	b.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00e      	beq.n	8005c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c54:	d009      	beq.n	8005c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d10c      	bne.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800

08005cac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e03d      	b.n	8005d44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e03f      	b.n	8005de0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7fc fe59 	bl	8002a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2224      	movs	r2, #36	; 0x24
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fd7e 	bl	8006894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005da6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695a      	ldr	r2, [r3, #20]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005db6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d17c      	bne.n	8005f02 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_UART_Transmit+0x2c>
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e075      	b.n	8005f04 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_UART_Transmit+0x3e>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e06e      	b.n	8005f04 <HAL_UART_Transmit+0x11c>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2221      	movs	r2, #33	; 0x21
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e3c:	f7fc ff80 	bl	8002d40 <HAL_GetTick>
 8005e40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	88fa      	ldrh	r2, [r7, #6]
 8005e46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	d108      	bne.n	8005e6a <HAL_UART_Transmit+0x82>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	61bb      	str	r3, [r7, #24]
 8005e68:	e003      	b.n	8005e72 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e7a:	e02a      	b.n	8005ed2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2200      	movs	r2, #0
 8005e84:	2180      	movs	r1, #128	; 0x80
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fb31 	bl	80064ee <UART_WaitOnFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e036      	b.n	8005f04 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eaa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	3302      	adds	r3, #2
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	e007      	b.n	8005ec4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1cf      	bne.n	8005e7c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2140      	movs	r1, #64	; 0x40
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fb01 	bl	80064ee <UART_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e006      	b.n	8005f04 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
  }
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	f040 80c9 	bne.w	80060bc <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e0c1      	b.n	80060be <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_UARTEx_ReceiveToIdle+0x3c>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e0ba      	b.n	80060be <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2222      	movs	r2, #34	; 0x22
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f64:	f7fc feec 	bl	8002d40 <HAL_GetTick>
 8005f68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	88fa      	ldrh	r2, [r7, #6]
 8005f74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	d108      	bne.n	8005f92 <HAL_UARTEx_ReceiveToIdle+0x86>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	e003      	b.n	8005f9a <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005fa8:	e074      	b.n	8006094 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d114      	bne.n	8005fe2 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e06d      	b.n	80060be <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d13c      	bne.n	800606a <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10c      	bne.n	8006010 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006002:	b29a      	uxth	r2, r3
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	3302      	adds	r3, #2
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e01f      	b.n	8006050 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
           if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006018:	d007      	beq.n	800602a <HAL_UARTEx_ReceiveToIdle+0x11e>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_UARTEx_ReceiveToIdle+0x12c>
           {
             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e008      	b.n	800604a <HAL_UARTEx_ReceiveToIdle+0x13e>
           }
           else
           {
             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006044:	b2da      	uxtb	r2, r3
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	701a      	strb	r2, [r3, #0]
           }

          pdata8bits++;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3301      	adds	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d010      	beq.n	8006094 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006072:	f7fc fe65 	bl	8002d40 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <HAL_UARTEx_ReceiveToIdle+0x17c>
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e014      	b.n	80060be <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d185      	bne.n	8005faa <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	e000      	b.n	80060be <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
  }
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b086      	sub	sp, #24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	4613      	mov	r3, r2
 80060d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d13c      	bne.n	800615a <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e035      	b.n	800615c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e02e      	b.n	800615c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	461a      	mov	r2, r3
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fa35 	bl	8006582 <UART_Start_Receive_IT>
 8006118:	4603      	mov	r3, r0
 800611a:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d119      	bne.n	8006156 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	2b01      	cmp	r3, #1
 8006128:	d113      	bne.n	8006152 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800612a:	2300      	movs	r3, #0
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	613b      	str	r3, [r7, #16]
 800613e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0210 	orr.w	r2, r2, #16
 800614e:	60da      	str	r2, [r3, #12]
 8006150:	e001      	b.n	8006156 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	e000      	b.n	800615c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006184:	2300      	movs	r3, #0
 8006186:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10d      	bne.n	80061b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_UART_IRQHandler+0x52>
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fac7 	bl	8006742 <UART_Receive_IT>
      return;
 80061b4:	e17b      	b.n	80064ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80b1 	beq.w	8006320 <HAL_UART_IRQHandler+0x1bc>
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_UART_IRQHandler+0x70>
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80a6 	beq.w	8006320 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_UART_IRQHandler+0x90>
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	f043 0201 	orr.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_UART_IRQHandler+0xb0>
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	f043 0202 	orr.w	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_UART_IRQHandler+0xd0>
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	f043 0204 	orr.w	r2, r3, #4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00f      	beq.n	800625e <HAL_UART_IRQHandler+0xfa>
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <HAL_UART_IRQHandler+0xee>
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 811e 	beq.w	80064a4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <HAL_UART_IRQHandler+0x11e>
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa60 	bl	8006742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <HAL_UART_IRQHandler+0x146>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d031      	beq.n	800630e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f9a2 	bl	80065f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d023      	beq.n	8006306 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d013      	beq.n	80062fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	4a76      	ldr	r2, [pc, #472]	; (80064b4 <HAL_UART_IRQHandler+0x350>)
 80062dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fd fa4c 	bl	8003780 <HAL_DMA_Abort_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	e00e      	b.n	800631c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8ec 	bl	80064dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	e00a      	b.n	800631c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f8e8 	bl	80064dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	e006      	b.n	800631c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8e4 	bl	80064dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800631a:	e0c3      	b.n	80064a4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	bf00      	nop
    return;
 800631e:	e0c1      	b.n	80064a4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 80a1 	bne.w	800646c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 809b 	beq.w	800646c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8095 	beq.w	800646c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d04e      	beq.n	8006404 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006370:	8a3b      	ldrh	r3, [r7, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8098 	beq.w	80064a8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800637c:	8a3a      	ldrh	r2, [r7, #16]
 800637e:	429a      	cmp	r2, r3
 8006380:	f080 8092 	bcs.w	80064a8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	8a3a      	ldrh	r2, [r7, #16]
 8006388:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b20      	cmp	r3, #32
 8006392:	d02b      	beq.n	80063ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0210 	bic.w	r2, r2, #16
 80063e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fd f98f 	bl	800370a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fa fce3 	bl	8000dc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006402:	e051      	b.n	80064a8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800640c:	b29b      	uxth	r3, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d047      	beq.n	80064ac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800641c:	8a7b      	ldrh	r3, [r7, #18]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d044      	beq.n	80064ac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006430:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0210 	bic.w	r2, r2, #16
 800645e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006460:	8a7b      	ldrh	r3, [r7, #18]
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fa fcaf 	bl	8000dc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800646a:	e01f      	b.n	80064ac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d008      	beq.n	8006488 <HAL_UART_IRQHandler+0x324>
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f8f7 	bl	8006674 <UART_Transmit_IT>
    return;
 8006486:	e012      	b.n	80064ae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <HAL_UART_IRQHandler+0x34a>
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f938 	bl	8006712 <UART_EndTransmit_IT>
    return;
 80064a2:	e004      	b.n	80064ae <HAL_UART_IRQHandler+0x34a>
    return;
 80064a4:	bf00      	nop
 80064a6:	e002      	b.n	80064ae <HAL_UART_IRQHandler+0x34a>
      return;
 80064a8:	bf00      	nop
 80064aa:	e000      	b.n	80064ae <HAL_UART_IRQHandler+0x34a>
      return;
 80064ac:	bf00      	nop
  }
}
 80064ae:	3728      	adds	r7, #40	; 0x28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	0800664d 	.word	0x0800664d

080064b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr

080064ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	603b      	str	r3, [r7, #0]
 80064fa:	4613      	mov	r3, r2
 80064fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fe:	e02c      	b.n	800655a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d028      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d007      	beq.n	800651e <UART_WaitOnFlagUntilTimeout+0x30>
 800650e:	f7fc fc17 	bl	8002d40 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	429a      	cmp	r2, r3
 800651c:	d21d      	bcs.n	800655a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800652c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e00f      	b.n	800657a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4013      	ands	r3, r2
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	bf0c      	ite	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	2300      	movne	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	429a      	cmp	r2, r3
 8006576:	d0c3      	beq.n	8006500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	4613      	mov	r3, r2
 800658e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	88fa      	ldrh	r2, [r7, #6]
 800659a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2222      	movs	r2, #34	; 0x22
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0220 	orr.w	r2, r2, #32
 80065e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800660a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0201 	bic.w	r2, r2, #1
 800661a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	2b01      	cmp	r3, #1
 8006622:	d107      	bne.n	8006634 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0210 	bic.w	r2, r2, #16
 8006632:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff ff38 	bl	80064dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b21      	cmp	r3, #33	; 0x21
 8006686:	d13e      	bne.n	8006706 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006690:	d114      	bne.n	80066bc <UART_Transmit_IT+0x48>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d110      	bne.n	80066bc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	1c9a      	adds	r2, r3, #2
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	621a      	str	r2, [r3, #32]
 80066ba:	e008      	b.n	80066ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	1c59      	adds	r1, r3, #1
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6211      	str	r1, [r2, #32]
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	4619      	mov	r1, r3
 80066dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10f      	bne.n	8006702 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006700:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	e000      	b.n	8006708 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006706:	2302      	movs	r3, #2
  }
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006728:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fec0 	bl	80064b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b086      	sub	sp, #24
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b22      	cmp	r3, #34	; 0x22
 8006754:	f040 8099 	bne.w	800688a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d117      	bne.n	8006792 <UART_Receive_IT+0x50>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d113      	bne.n	8006792 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006772:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006780:	b29a      	uxth	r2, r3
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	1c9a      	adds	r2, r3, #2
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	629a      	str	r2, [r3, #40]	; 0x28
 8006790:	e026      	b.n	80067e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a4:	d007      	beq.n	80067b6 <UART_Receive_IT+0x74>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <UART_Receive_IT+0x82>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	e008      	b.n	80067d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	4619      	mov	r1, r3
 80067ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d148      	bne.n	8006886 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0220 	bic.w	r2, r2, #32
 8006802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	2b01      	cmp	r3, #1
 8006832:	d123      	bne.n	800687c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0210 	bic.w	r2, r2, #16
 8006848:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	2b10      	cmp	r3, #16
 8006856:	d10a      	bne.n	800686e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7fa faa7 	bl	8000dc8 <HAL_UARTEx_RxEventCallback>
 800687a:	e002      	b.n	8006882 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fe24 	bl	80064ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	e002      	b.n	800688c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	e000      	b.n	800688c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800688a:	2302      	movs	r3, #2
  }
}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80068ce:	f023 030c 	bic.w	r3, r3, #12
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	430b      	orrs	r3, r1
 80068da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2c      	ldr	r2, [pc, #176]	; (80069a8 <UART_SetConfig+0x114>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d103      	bne.n	8006904 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068fc:	f7fe f888 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	e002      	b.n	800690a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006904:	f7fe f870 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 8006908:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009a      	lsls	r2, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006920:	4a22      	ldr	r2, [pc, #136]	; (80069ac <UART_SetConfig+0x118>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	0119      	lsls	r1, r3, #4
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009a      	lsls	r2, r3, #2
 8006934:	441a      	add	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006940:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <UART_SetConfig+0x118>)
 8006942:	fba3 0302 	umull	r0, r3, r3, r2
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	2064      	movs	r0, #100	; 0x64
 800694a:	fb00 f303 	mul.w	r3, r0, r3
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	3332      	adds	r3, #50	; 0x32
 8006954:	4a15      	ldr	r2, [pc, #84]	; (80069ac <UART_SetConfig+0x118>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006960:	4419      	add	r1, r3
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009a      	lsls	r2, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	fbb2 f2f3 	udiv	r2, r2, r3
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <UART_SetConfig+0x118>)
 800697a:	fba3 0302 	umull	r0, r3, r3, r2
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	2064      	movs	r0, #100	; 0x64
 8006982:	fb00 f303 	mul.w	r3, r0, r3
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	3332      	adds	r3, #50	; 0x32
 800698c:	4a07      	ldr	r2, [pc, #28]	; (80069ac <UART_SetConfig+0x118>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	f003 020f 	and.w	r2, r3, #15
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	440a      	add	r2, r1
 800699e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40013800 	.word	0x40013800
 80069ac:	51eb851f 	.word	0x51eb851f

080069b0 <atoi>:
 80069b0:	220a      	movs	r2, #10
 80069b2:	2100      	movs	r1, #0
 80069b4:	f000 b946 	b.w	8006c44 <strtol>

080069b8 <calloc>:
 80069b8:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <calloc+0xc>)
 80069ba:	460a      	mov	r2, r1
 80069bc:	4601      	mov	r1, r0
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	f000 b802 	b.w	80069c8 <_calloc_r>
 80069c4:	20000058 	.word	0x20000058

080069c8 <_calloc_r>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	fba1 5402 	umull	r5, r4, r1, r2
 80069ce:	b934      	cbnz	r4, 80069de <_calloc_r+0x16>
 80069d0:	4629      	mov	r1, r5
 80069d2:	f000 f82d 	bl	8006a30 <_malloc_r>
 80069d6:	4606      	mov	r6, r0
 80069d8:	b928      	cbnz	r0, 80069e6 <_calloc_r+0x1e>
 80069da:	4630      	mov	r0, r6
 80069dc:	bd70      	pop	{r4, r5, r6, pc}
 80069de:	220c      	movs	r2, #12
 80069e0:	2600      	movs	r6, #0
 80069e2:	6002      	str	r2, [r0, #0]
 80069e4:	e7f9      	b.n	80069da <_calloc_r+0x12>
 80069e6:	462a      	mov	r2, r5
 80069e8:	4621      	mov	r1, r4
 80069ea:	f000 f955 	bl	8006c98 <memset>
 80069ee:	e7f4      	b.n	80069da <_calloc_r+0x12>

080069f0 <sbrk_aligned>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4e0e      	ldr	r6, [pc, #56]	; (8006a2c <sbrk_aligned+0x3c>)
 80069f4:	460c      	mov	r4, r1
 80069f6:	6831      	ldr	r1, [r6, #0]
 80069f8:	4605      	mov	r5, r0
 80069fa:	b911      	cbnz	r1, 8006a02 <sbrk_aligned+0x12>
 80069fc:	f000 f978 	bl	8006cf0 <_sbrk_r>
 8006a00:	6030      	str	r0, [r6, #0]
 8006a02:	4621      	mov	r1, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 f973 	bl	8006cf0 <_sbrk_r>
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	d00a      	beq.n	8006a24 <sbrk_aligned+0x34>
 8006a0e:	1cc4      	adds	r4, r0, #3
 8006a10:	f024 0403 	bic.w	r4, r4, #3
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	d007      	beq.n	8006a28 <sbrk_aligned+0x38>
 8006a18:	1a21      	subs	r1, r4, r0
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 f968 	bl	8006cf0 <_sbrk_r>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d101      	bne.n	8006a28 <sbrk_aligned+0x38>
 8006a24:	f04f 34ff 	mov.w	r4, #4294967295
 8006a28:	4620      	mov	r0, r4
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	2000051c 	.word	0x2000051c

08006a30 <_malloc_r>:
 8006a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a34:	1ccd      	adds	r5, r1, #3
 8006a36:	f025 0503 	bic.w	r5, r5, #3
 8006a3a:	3508      	adds	r5, #8
 8006a3c:	2d0c      	cmp	r5, #12
 8006a3e:	bf38      	it	cc
 8006a40:	250c      	movcc	r5, #12
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	4607      	mov	r7, r0
 8006a46:	db01      	blt.n	8006a4c <_malloc_r+0x1c>
 8006a48:	42a9      	cmp	r1, r5
 8006a4a:	d905      	bls.n	8006a58 <_malloc_r+0x28>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	2600      	movs	r6, #0
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4630      	mov	r0, r6
 8006a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b2c <_malloc_r+0xfc>
 8006a5c:	f000 f868 	bl	8006b30 <__malloc_lock>
 8006a60:	f8d8 3000 	ldr.w	r3, [r8]
 8006a64:	461c      	mov	r4, r3
 8006a66:	bb5c      	cbnz	r4, 8006ac0 <_malloc_r+0x90>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f7ff ffc0 	bl	80069f0 <sbrk_aligned>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	4604      	mov	r4, r0
 8006a74:	d155      	bne.n	8006b22 <_malloc_r+0xf2>
 8006a76:	f8d8 4000 	ldr.w	r4, [r8]
 8006a7a:	4626      	mov	r6, r4
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	d145      	bne.n	8006b0c <_malloc_r+0xdc>
 8006a80:	2c00      	cmp	r4, #0
 8006a82:	d048      	beq.n	8006b16 <_malloc_r+0xe6>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	4631      	mov	r1, r6
 8006a88:	4638      	mov	r0, r7
 8006a8a:	eb04 0903 	add.w	r9, r4, r3
 8006a8e:	f000 f92f 	bl	8006cf0 <_sbrk_r>
 8006a92:	4581      	cmp	r9, r0
 8006a94:	d13f      	bne.n	8006b16 <_malloc_r+0xe6>
 8006a96:	6821      	ldr	r1, [r4, #0]
 8006a98:	4638      	mov	r0, r7
 8006a9a:	1a6d      	subs	r5, r5, r1
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f7ff ffa7 	bl	80069f0 <sbrk_aligned>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d037      	beq.n	8006b16 <_malloc_r+0xe6>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	442b      	add	r3, r5
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	f8d8 3000 	ldr.w	r3, [r8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d038      	beq.n	8006b26 <_malloc_r+0xf6>
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	42a2      	cmp	r2, r4
 8006ab8:	d12b      	bne.n	8006b12 <_malloc_r+0xe2>
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
 8006abe:	e00f      	b.n	8006ae0 <_malloc_r+0xb0>
 8006ac0:	6822      	ldr	r2, [r4, #0]
 8006ac2:	1b52      	subs	r2, r2, r5
 8006ac4:	d41f      	bmi.n	8006b06 <_malloc_r+0xd6>
 8006ac6:	2a0b      	cmp	r2, #11
 8006ac8:	d917      	bls.n	8006afa <_malloc_r+0xca>
 8006aca:	1961      	adds	r1, r4, r5
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	6025      	str	r5, [r4, #0]
 8006ad0:	bf18      	it	ne
 8006ad2:	6059      	strne	r1, [r3, #4]
 8006ad4:	6863      	ldr	r3, [r4, #4]
 8006ad6:	bf08      	it	eq
 8006ad8:	f8c8 1000 	streq.w	r1, [r8]
 8006adc:	5162      	str	r2, [r4, r5]
 8006ade:	604b      	str	r3, [r1, #4]
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f104 060b 	add.w	r6, r4, #11
 8006ae6:	f000 f829 	bl	8006b3c <__malloc_unlock>
 8006aea:	f026 0607 	bic.w	r6, r6, #7
 8006aee:	1d23      	adds	r3, r4, #4
 8006af0:	1af2      	subs	r2, r6, r3
 8006af2:	d0ae      	beq.n	8006a52 <_malloc_r+0x22>
 8006af4:	1b9b      	subs	r3, r3, r6
 8006af6:	50a3      	str	r3, [r4, r2]
 8006af8:	e7ab      	b.n	8006a52 <_malloc_r+0x22>
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	6862      	ldr	r2, [r4, #4]
 8006afe:	d1dd      	bne.n	8006abc <_malloc_r+0x8c>
 8006b00:	f8c8 2000 	str.w	r2, [r8]
 8006b04:	e7ec      	b.n	8006ae0 <_malloc_r+0xb0>
 8006b06:	4623      	mov	r3, r4
 8006b08:	6864      	ldr	r4, [r4, #4]
 8006b0a:	e7ac      	b.n	8006a66 <_malloc_r+0x36>
 8006b0c:	4634      	mov	r4, r6
 8006b0e:	6876      	ldr	r6, [r6, #4]
 8006b10:	e7b4      	b.n	8006a7c <_malloc_r+0x4c>
 8006b12:	4613      	mov	r3, r2
 8006b14:	e7cc      	b.n	8006ab0 <_malloc_r+0x80>
 8006b16:	230c      	movs	r3, #12
 8006b18:	4638      	mov	r0, r7
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	f000 f80e 	bl	8006b3c <__malloc_unlock>
 8006b20:	e797      	b.n	8006a52 <_malloc_r+0x22>
 8006b22:	6025      	str	r5, [r4, #0]
 8006b24:	e7dc      	b.n	8006ae0 <_malloc_r+0xb0>
 8006b26:	605b      	str	r3, [r3, #4]
 8006b28:	deff      	udf	#255	; 0xff
 8006b2a:	bf00      	nop
 8006b2c:	20000518 	.word	0x20000518

08006b30 <__malloc_lock>:
 8006b30:	4801      	ldr	r0, [pc, #4]	; (8006b38 <__malloc_lock+0x8>)
 8006b32:	f000 b917 	b.w	8006d64 <__retarget_lock_acquire_recursive>
 8006b36:	bf00      	nop
 8006b38:	2000065c 	.word	0x2000065c

08006b3c <__malloc_unlock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	; (8006b44 <__malloc_unlock+0x8>)
 8006b3e:	f000 b912 	b.w	8006d66 <__retarget_lock_release_recursive>
 8006b42:	bf00      	nop
 8006b44:	2000065c 	.word	0x2000065c

08006b48 <_strtol_l.constprop.0>:
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4e:	4686      	mov	lr, r0
 8006b50:	4690      	mov	r8, r2
 8006b52:	d001      	beq.n	8006b58 <_strtol_l.constprop.0+0x10>
 8006b54:	2b24      	cmp	r3, #36	; 0x24
 8006b56:	d906      	bls.n	8006b66 <_strtol_l.constprop.0+0x1e>
 8006b58:	f000 f8da 	bl	8006d10 <__errno>
 8006b5c:	2316      	movs	r3, #22
 8006b5e:	6003      	str	r3, [r0, #0]
 8006b60:	2000      	movs	r0, #0
 8006b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b66:	460d      	mov	r5, r1
 8006b68:	4835      	ldr	r0, [pc, #212]	; (8006c40 <_strtol_l.constprop.0+0xf8>)
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b70:	5d06      	ldrb	r6, [r0, r4]
 8006b72:	f016 0608 	ands.w	r6, r6, #8
 8006b76:	d1f8      	bne.n	8006b6a <_strtol_l.constprop.0+0x22>
 8006b78:	2c2d      	cmp	r4, #45	; 0x2d
 8006b7a:	d12e      	bne.n	8006bda <_strtol_l.constprop.0+0x92>
 8006b7c:	2601      	movs	r6, #1
 8006b7e:	782c      	ldrb	r4, [r5, #0]
 8006b80:	1c95      	adds	r5, r2, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d057      	beq.n	8006c36 <_strtol_l.constprop.0+0xee>
 8006b86:	2b10      	cmp	r3, #16
 8006b88:	d109      	bne.n	8006b9e <_strtol_l.constprop.0+0x56>
 8006b8a:	2c30      	cmp	r4, #48	; 0x30
 8006b8c:	d107      	bne.n	8006b9e <_strtol_l.constprop.0+0x56>
 8006b8e:	782a      	ldrb	r2, [r5, #0]
 8006b90:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006b94:	2a58      	cmp	r2, #88	; 0x58
 8006b96:	d149      	bne.n	8006c2c <_strtol_l.constprop.0+0xe4>
 8006b98:	2310      	movs	r3, #16
 8006b9a:	786c      	ldrb	r4, [r5, #1]
 8006b9c:	3502      	adds	r5, #2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006ba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ba8:	fbbc f9f3 	udiv	r9, ip, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	fb03 ca19 	mls	sl, r3, r9, ip
 8006bb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006bb6:	2f09      	cmp	r7, #9
 8006bb8:	d814      	bhi.n	8006be4 <_strtol_l.constprop.0+0x9c>
 8006bba:	463c      	mov	r4, r7
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	dd20      	ble.n	8006c02 <_strtol_l.constprop.0+0xba>
 8006bc0:	1c57      	adds	r7, r2, #1
 8006bc2:	d007      	beq.n	8006bd4 <_strtol_l.constprop.0+0x8c>
 8006bc4:	4581      	cmp	r9, r0
 8006bc6:	d319      	bcc.n	8006bfc <_strtol_l.constprop.0+0xb4>
 8006bc8:	d101      	bne.n	8006bce <_strtol_l.constprop.0+0x86>
 8006bca:	45a2      	cmp	sl, r4
 8006bcc:	db16      	blt.n	8006bfc <_strtol_l.constprop.0+0xb4>
 8006bce:	2201      	movs	r2, #1
 8006bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8006bd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bd8:	e7eb      	b.n	8006bb2 <_strtol_l.constprop.0+0x6a>
 8006bda:	2c2b      	cmp	r4, #43	; 0x2b
 8006bdc:	bf04      	itt	eq
 8006bde:	782c      	ldrbeq	r4, [r5, #0]
 8006be0:	1c95      	addeq	r5, r2, #2
 8006be2:	e7ce      	b.n	8006b82 <_strtol_l.constprop.0+0x3a>
 8006be4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006be8:	2f19      	cmp	r7, #25
 8006bea:	d801      	bhi.n	8006bf0 <_strtol_l.constprop.0+0xa8>
 8006bec:	3c37      	subs	r4, #55	; 0x37
 8006bee:	e7e5      	b.n	8006bbc <_strtol_l.constprop.0+0x74>
 8006bf0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006bf4:	2f19      	cmp	r7, #25
 8006bf6:	d804      	bhi.n	8006c02 <_strtol_l.constprop.0+0xba>
 8006bf8:	3c57      	subs	r4, #87	; 0x57
 8006bfa:	e7df      	b.n	8006bbc <_strtol_l.constprop.0+0x74>
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006c00:	e7e8      	b.n	8006bd4 <_strtol_l.constprop.0+0x8c>
 8006c02:	1c53      	adds	r3, r2, #1
 8006c04:	d108      	bne.n	8006c18 <_strtol_l.constprop.0+0xd0>
 8006c06:	2322      	movs	r3, #34	; 0x22
 8006c08:	4660      	mov	r0, ip
 8006c0a:	f8ce 3000 	str.w	r3, [lr]
 8006c0e:	f1b8 0f00 	cmp.w	r8, #0
 8006c12:	d0a6      	beq.n	8006b62 <_strtol_l.constprop.0+0x1a>
 8006c14:	1e69      	subs	r1, r5, #1
 8006c16:	e006      	b.n	8006c26 <_strtol_l.constprop.0+0xde>
 8006c18:	b106      	cbz	r6, 8006c1c <_strtol_l.constprop.0+0xd4>
 8006c1a:	4240      	negs	r0, r0
 8006c1c:	f1b8 0f00 	cmp.w	r8, #0
 8006c20:	d09f      	beq.n	8006b62 <_strtol_l.constprop.0+0x1a>
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	d1f6      	bne.n	8006c14 <_strtol_l.constprop.0+0xcc>
 8006c26:	f8c8 1000 	str.w	r1, [r8]
 8006c2a:	e79a      	b.n	8006b62 <_strtol_l.constprop.0+0x1a>
 8006c2c:	2430      	movs	r4, #48	; 0x30
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1b5      	bne.n	8006b9e <_strtol_l.constprop.0+0x56>
 8006c32:	2308      	movs	r3, #8
 8006c34:	e7b3      	b.n	8006b9e <_strtol_l.constprop.0+0x56>
 8006c36:	2c30      	cmp	r4, #48	; 0x30
 8006c38:	d0a9      	beq.n	8006b8e <_strtol_l.constprop.0+0x46>
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	e7af      	b.n	8006b9e <_strtol_l.constprop.0+0x56>
 8006c3e:	bf00      	nop
 8006c40:	08007639 	.word	0x08007639

08006c44 <strtol>:
 8006c44:	4613      	mov	r3, r2
 8006c46:	460a      	mov	r2, r1
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4802      	ldr	r0, [pc, #8]	; (8006c54 <strtol+0x10>)
 8006c4c:	6800      	ldr	r0, [r0, #0]
 8006c4e:	f7ff bf7b 	b.w	8006b48 <_strtol_l.constprop.0>
 8006c52:	bf00      	nop
 8006c54:	20000058 	.word	0x20000058

08006c58 <siprintf>:
 8006c58:	b40e      	push	{r1, r2, r3}
 8006c5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c5e:	b500      	push	{lr}
 8006c60:	b09c      	sub	sp, #112	; 0x70
 8006c62:	ab1d      	add	r3, sp, #116	; 0x74
 8006c64:	9002      	str	r0, [sp, #8]
 8006c66:	9006      	str	r0, [sp, #24]
 8006c68:	9107      	str	r1, [sp, #28]
 8006c6a:	9104      	str	r1, [sp, #16]
 8006c6c:	4808      	ldr	r0, [pc, #32]	; (8006c90 <siprintf+0x38>)
 8006c6e:	4909      	ldr	r1, [pc, #36]	; (8006c94 <siprintf+0x3c>)
 8006c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c74:	9105      	str	r1, [sp, #20]
 8006c76:	6800      	ldr	r0, [r0, #0]
 8006c78:	a902      	add	r1, sp, #8
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	f000 f924 	bl	8006ec8 <_svfiprintf_r>
 8006c80:	2200      	movs	r2, #0
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	b01c      	add	sp, #112	; 0x70
 8006c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c8c:	b003      	add	sp, #12
 8006c8e:	4770      	bx	lr
 8006c90:	20000058 	.word	0x20000058
 8006c94:	ffff0208 	.word	0xffff0208

08006c98 <memset>:
 8006c98:	4603      	mov	r3, r0
 8006c9a:	4402      	add	r2, r0
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d100      	bne.n	8006ca2 <memset+0xa>
 8006ca0:	4770      	bx	lr
 8006ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca6:	e7f9      	b.n	8006c9c <memset+0x4>

08006ca8 <strchr>:
 8006ca8:	4603      	mov	r3, r0
 8006caa:	b2c9      	uxtb	r1, r1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb2:	b112      	cbz	r2, 8006cba <strchr+0x12>
 8006cb4:	428a      	cmp	r2, r1
 8006cb6:	d1f9      	bne.n	8006cac <strchr+0x4>
 8006cb8:	4770      	bx	lr
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	bf18      	it	ne
 8006cbe:	2000      	movne	r0, #0
 8006cc0:	4770      	bx	lr

08006cc2 <strstr>:
 8006cc2:	780a      	ldrb	r2, [r1, #0]
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	b96a      	cbnz	r2, 8006ce4 <strstr+0x22>
 8006cc8:	bd70      	pop	{r4, r5, r6, pc}
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d109      	bne.n	8006ce2 <strstr+0x20>
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f6      	beq.n	8006cc8 <strstr+0x6>
 8006cda:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006cde:	429e      	cmp	r6, r3
 8006ce0:	d0f7      	beq.n	8006cd2 <strstr+0x10>
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	7803      	ldrb	r3, [r0, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1ef      	bne.n	8006cca <strstr+0x8>
 8006cea:	4618      	mov	r0, r3
 8006cec:	e7ec      	b.n	8006cc8 <strstr+0x6>
	...

08006cf0 <_sbrk_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4d05      	ldr	r5, [pc, #20]	; (8006d0c <_sbrk_r+0x1c>)
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fb ff66 	bl	8002bcc <_sbrk>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_sbrk_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_sbrk_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20000658 	.word	0x20000658

08006d10 <__errno>:
 8006d10:	4b01      	ldr	r3, [pc, #4]	; (8006d18 <__errno+0x8>)
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20000058 	.word	0x20000058

08006d1c <__libc_init_array>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	2600      	movs	r6, #0
 8006d20:	4d0c      	ldr	r5, [pc, #48]	; (8006d54 <__libc_init_array+0x38>)
 8006d22:	4c0d      	ldr	r4, [pc, #52]	; (8006d58 <__libc_init_array+0x3c>)
 8006d24:	1b64      	subs	r4, r4, r5
 8006d26:	10a4      	asrs	r4, r4, #2
 8006d28:	42a6      	cmp	r6, r4
 8006d2a:	d109      	bne.n	8006d40 <__libc_init_array+0x24>
 8006d2c:	f000 fbbe 	bl	80074ac <_init>
 8006d30:	2600      	movs	r6, #0
 8006d32:	4d0a      	ldr	r5, [pc, #40]	; (8006d5c <__libc_init_array+0x40>)
 8006d34:	4c0a      	ldr	r4, [pc, #40]	; (8006d60 <__libc_init_array+0x44>)
 8006d36:	1b64      	subs	r4, r4, r5
 8006d38:	10a4      	asrs	r4, r4, #2
 8006d3a:	42a6      	cmp	r6, r4
 8006d3c:	d105      	bne.n	8006d4a <__libc_init_array+0x2e>
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d44:	4798      	blx	r3
 8006d46:	3601      	adds	r6, #1
 8006d48:	e7ee      	b.n	8006d28 <__libc_init_array+0xc>
 8006d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4e:	4798      	blx	r3
 8006d50:	3601      	adds	r6, #1
 8006d52:	e7f2      	b.n	8006d3a <__libc_init_array+0x1e>
 8006d54:	0800776c 	.word	0x0800776c
 8006d58:	0800776c 	.word	0x0800776c
 8006d5c:	0800776c 	.word	0x0800776c
 8006d60:	08007770 	.word	0x08007770

08006d64 <__retarget_lock_acquire_recursive>:
 8006d64:	4770      	bx	lr

08006d66 <__retarget_lock_release_recursive>:
 8006d66:	4770      	bx	lr

08006d68 <memcpy>:
 8006d68:	440a      	add	r2, r1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	4770      	bx	lr
 8006d74:	b510      	push	{r4, lr}
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	4291      	cmp	r1, r2
 8006d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d80:	d1f9      	bne.n	8006d76 <memcpy+0xe>
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <_free_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4605      	mov	r5, r0
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	d040      	beq.n	8006e0e <_free_r+0x8a>
 8006d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d90:	1f0c      	subs	r4, r1, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bfb8      	it	lt
 8006d96:	18e4      	addlt	r4, r4, r3
 8006d98:	f7ff feca 	bl	8006b30 <__malloc_lock>
 8006d9c:	4a1c      	ldr	r2, [pc, #112]	; (8006e10 <_free_r+0x8c>)
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	b933      	cbnz	r3, 8006db0 <_free_r+0x2c>
 8006da2:	6063      	str	r3, [r4, #4]
 8006da4:	6014      	str	r4, [r2, #0]
 8006da6:	4628      	mov	r0, r5
 8006da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dac:	f7ff bec6 	b.w	8006b3c <__malloc_unlock>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d908      	bls.n	8006dc6 <_free_r+0x42>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	1821      	adds	r1, r4, r0
 8006db8:	428b      	cmp	r3, r1
 8006dba:	bf01      	itttt	eq
 8006dbc:	6819      	ldreq	r1, [r3, #0]
 8006dbe:	685b      	ldreq	r3, [r3, #4]
 8006dc0:	1809      	addeq	r1, r1, r0
 8006dc2:	6021      	streq	r1, [r4, #0]
 8006dc4:	e7ed      	b.n	8006da2 <_free_r+0x1e>
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	b10b      	cbz	r3, 8006dd0 <_free_r+0x4c>
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	d9fa      	bls.n	8006dc6 <_free_r+0x42>
 8006dd0:	6811      	ldr	r1, [r2, #0]
 8006dd2:	1850      	adds	r0, r2, r1
 8006dd4:	42a0      	cmp	r0, r4
 8006dd6:	d10b      	bne.n	8006df0 <_free_r+0x6c>
 8006dd8:	6820      	ldr	r0, [r4, #0]
 8006dda:	4401      	add	r1, r0
 8006ddc:	1850      	adds	r0, r2, r1
 8006dde:	4283      	cmp	r3, r0
 8006de0:	6011      	str	r1, [r2, #0]
 8006de2:	d1e0      	bne.n	8006da6 <_free_r+0x22>
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4408      	add	r0, r1
 8006dea:	6010      	str	r0, [r2, #0]
 8006dec:	6053      	str	r3, [r2, #4]
 8006dee:	e7da      	b.n	8006da6 <_free_r+0x22>
 8006df0:	d902      	bls.n	8006df8 <_free_r+0x74>
 8006df2:	230c      	movs	r3, #12
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	e7d6      	b.n	8006da6 <_free_r+0x22>
 8006df8:	6820      	ldr	r0, [r4, #0]
 8006dfa:	1821      	adds	r1, r4, r0
 8006dfc:	428b      	cmp	r3, r1
 8006dfe:	bf01      	itttt	eq
 8006e00:	6819      	ldreq	r1, [r3, #0]
 8006e02:	685b      	ldreq	r3, [r3, #4]
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	6054      	str	r4, [r2, #4]
 8006e0c:	e7cb      	b.n	8006da6 <_free_r+0x22>
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000518 	.word	0x20000518

08006e14 <__ssputs_r>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	461f      	mov	r7, r3
 8006e1a:	688e      	ldr	r6, [r1, #8]
 8006e1c:	4682      	mov	sl, r0
 8006e1e:	42be      	cmp	r6, r7
 8006e20:	460c      	mov	r4, r1
 8006e22:	4690      	mov	r8, r2
 8006e24:	680b      	ldr	r3, [r1, #0]
 8006e26:	d82c      	bhi.n	8006e82 <__ssputs_r+0x6e>
 8006e28:	898a      	ldrh	r2, [r1, #12]
 8006e2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e2e:	d026      	beq.n	8006e7e <__ssputs_r+0x6a>
 8006e30:	6965      	ldr	r5, [r4, #20]
 8006e32:	6909      	ldr	r1, [r1, #16]
 8006e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e38:	eba3 0901 	sub.w	r9, r3, r1
 8006e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e40:	1c7b      	adds	r3, r7, #1
 8006e42:	444b      	add	r3, r9
 8006e44:	106d      	asrs	r5, r5, #1
 8006e46:	429d      	cmp	r5, r3
 8006e48:	bf38      	it	cc
 8006e4a:	461d      	movcc	r5, r3
 8006e4c:	0553      	lsls	r3, r2, #21
 8006e4e:	d527      	bpl.n	8006ea0 <__ssputs_r+0x8c>
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7ff fded 	bl	8006a30 <_malloc_r>
 8006e56:	4606      	mov	r6, r0
 8006e58:	b360      	cbz	r0, 8006eb4 <__ssputs_r+0xa0>
 8006e5a:	464a      	mov	r2, r9
 8006e5c:	6921      	ldr	r1, [r4, #16]
 8006e5e:	f7ff ff83 	bl	8006d68 <memcpy>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	6126      	str	r6, [r4, #16]
 8006e70:	444e      	add	r6, r9
 8006e72:	6026      	str	r6, [r4, #0]
 8006e74:	463e      	mov	r6, r7
 8006e76:	6165      	str	r5, [r4, #20]
 8006e78:	eba5 0509 	sub.w	r5, r5, r9
 8006e7c:	60a5      	str	r5, [r4, #8]
 8006e7e:	42be      	cmp	r6, r7
 8006e80:	d900      	bls.n	8006e84 <__ssputs_r+0x70>
 8006e82:	463e      	mov	r6, r7
 8006e84:	4632      	mov	r2, r6
 8006e86:	4641      	mov	r1, r8
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	f000 faaf 	bl	80073ec <memmove>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	68a3      	ldr	r3, [r4, #8]
 8006e92:	1b9b      	subs	r3, r3, r6
 8006e94:	60a3      	str	r3, [r4, #8]
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	4433      	add	r3, r6
 8006e9a:	6023      	str	r3, [r4, #0]
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	f000 facb 	bl	800743c <_realloc_r>
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d1e0      	bne.n	8006e6e <__ssputs_r+0x5a>
 8006eac:	4650      	mov	r0, sl
 8006eae:	6921      	ldr	r1, [r4, #16]
 8006eb0:	f7ff ff68 	bl	8006d84 <_free_r>
 8006eb4:	230c      	movs	r3, #12
 8006eb6:	f8ca 3000 	str.w	r3, [sl]
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	e7e9      	b.n	8006e9c <__ssputs_r+0x88>

08006ec8 <_svfiprintf_r>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	4698      	mov	r8, r3
 8006ece:	898b      	ldrh	r3, [r1, #12]
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	4614      	mov	r4, r2
 8006ed8:	b09d      	sub	sp, #116	; 0x74
 8006eda:	d50e      	bpl.n	8006efa <_svfiprintf_r+0x32>
 8006edc:	690b      	ldr	r3, [r1, #16]
 8006ede:	b963      	cbnz	r3, 8006efa <_svfiprintf_r+0x32>
 8006ee0:	2140      	movs	r1, #64	; 0x40
 8006ee2:	f7ff fda5 	bl	8006a30 <_malloc_r>
 8006ee6:	6028      	str	r0, [r5, #0]
 8006ee8:	6128      	str	r0, [r5, #16]
 8006eea:	b920      	cbnz	r0, 8006ef6 <_svfiprintf_r+0x2e>
 8006eec:	230c      	movs	r3, #12
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	e0d0      	b.n	8007098 <_svfiprintf_r+0x1d0>
 8006ef6:	2340      	movs	r3, #64	; 0x40
 8006ef8:	616b      	str	r3, [r5, #20]
 8006efa:	2300      	movs	r3, #0
 8006efc:	9309      	str	r3, [sp, #36]	; 0x24
 8006efe:	2320      	movs	r3, #32
 8006f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f04:	2330      	movs	r3, #48	; 0x30
 8006f06:	f04f 0901 	mov.w	r9, #1
 8006f0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f0e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80070b0 <_svfiprintf_r+0x1e8>
 8006f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f16:	4623      	mov	r3, r4
 8006f18:	469a      	mov	sl, r3
 8006f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f1e:	b10a      	cbz	r2, 8006f24 <_svfiprintf_r+0x5c>
 8006f20:	2a25      	cmp	r2, #37	; 0x25
 8006f22:	d1f9      	bne.n	8006f18 <_svfiprintf_r+0x50>
 8006f24:	ebba 0b04 	subs.w	fp, sl, r4
 8006f28:	d00b      	beq.n	8006f42 <_svfiprintf_r+0x7a>
 8006f2a:	465b      	mov	r3, fp
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff ff6f 	bl	8006e14 <__ssputs_r>
 8006f36:	3001      	adds	r0, #1
 8006f38:	f000 80a9 	beq.w	800708e <_svfiprintf_r+0x1c6>
 8006f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f3e:	445a      	add	r2, fp
 8006f40:	9209      	str	r2, [sp, #36]	; 0x24
 8006f42:	f89a 3000 	ldrb.w	r3, [sl]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 80a1 	beq.w	800708e <_svfiprintf_r+0x1c6>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f56:	f10a 0a01 	add.w	sl, sl, #1
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	9307      	str	r3, [sp, #28]
 8006f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f62:	931a      	str	r3, [sp, #104]	; 0x68
 8006f64:	4654      	mov	r4, sl
 8006f66:	2205      	movs	r2, #5
 8006f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6c:	4850      	ldr	r0, [pc, #320]	; (80070b0 <_svfiprintf_r+0x1e8>)
 8006f6e:	f000 fa57 	bl	8007420 <memchr>
 8006f72:	9a04      	ldr	r2, [sp, #16]
 8006f74:	b9d8      	cbnz	r0, 8006fae <_svfiprintf_r+0xe6>
 8006f76:	06d0      	lsls	r0, r2, #27
 8006f78:	bf44      	itt	mi
 8006f7a:	2320      	movmi	r3, #32
 8006f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f80:	0711      	lsls	r1, r2, #28
 8006f82:	bf44      	itt	mi
 8006f84:	232b      	movmi	r3, #43	; 0x2b
 8006f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f90:	d015      	beq.n	8006fbe <_svfiprintf_r+0xf6>
 8006f92:	4654      	mov	r4, sl
 8006f94:	2000      	movs	r0, #0
 8006f96:	f04f 0c0a 	mov.w	ip, #10
 8006f9a:	9a07      	ldr	r2, [sp, #28]
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fa2:	3b30      	subs	r3, #48	; 0x30
 8006fa4:	2b09      	cmp	r3, #9
 8006fa6:	d94d      	bls.n	8007044 <_svfiprintf_r+0x17c>
 8006fa8:	b1b0      	cbz	r0, 8006fd8 <_svfiprintf_r+0x110>
 8006faa:	9207      	str	r2, [sp, #28]
 8006fac:	e014      	b.n	8006fd8 <_svfiprintf_r+0x110>
 8006fae:	eba0 0308 	sub.w	r3, r0, r8
 8006fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	46a2      	mov	sl, r4
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	e7d2      	b.n	8006f64 <_svfiprintf_r+0x9c>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	1d19      	adds	r1, r3, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	9103      	str	r1, [sp, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfbb      	ittet	lt
 8006fca:	425b      	neglt	r3, r3
 8006fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8006fd0:	9307      	strge	r3, [sp, #28]
 8006fd2:	9307      	strlt	r3, [sp, #28]
 8006fd4:	bfb8      	it	lt
 8006fd6:	9204      	strlt	r2, [sp, #16]
 8006fd8:	7823      	ldrb	r3, [r4, #0]
 8006fda:	2b2e      	cmp	r3, #46	; 0x2e
 8006fdc:	d10c      	bne.n	8006ff8 <_svfiprintf_r+0x130>
 8006fde:	7863      	ldrb	r3, [r4, #1]
 8006fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe2:	d134      	bne.n	800704e <_svfiprintf_r+0x186>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	3402      	adds	r4, #2
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	9203      	str	r2, [sp, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bfb8      	it	lt
 8006ff2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ff6:	9305      	str	r3, [sp, #20]
 8006ff8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80070b4 <_svfiprintf_r+0x1ec>
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	4650      	mov	r0, sl
 8007000:	7821      	ldrb	r1, [r4, #0]
 8007002:	f000 fa0d 	bl	8007420 <memchr>
 8007006:	b138      	cbz	r0, 8007018 <_svfiprintf_r+0x150>
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	eba0 000a 	sub.w	r0, r0, sl
 8007010:	4082      	lsls	r2, r0
 8007012:	4313      	orrs	r3, r2
 8007014:	3401      	adds	r4, #1
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701c:	2206      	movs	r2, #6
 800701e:	4826      	ldr	r0, [pc, #152]	; (80070b8 <_svfiprintf_r+0x1f0>)
 8007020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007024:	f000 f9fc 	bl	8007420 <memchr>
 8007028:	2800      	cmp	r0, #0
 800702a:	d038      	beq.n	800709e <_svfiprintf_r+0x1d6>
 800702c:	4b23      	ldr	r3, [pc, #140]	; (80070bc <_svfiprintf_r+0x1f4>)
 800702e:	bb1b      	cbnz	r3, 8007078 <_svfiprintf_r+0x1b0>
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	3307      	adds	r3, #7
 8007034:	f023 0307 	bic.w	r3, r3, #7
 8007038:	3308      	adds	r3, #8
 800703a:	9303      	str	r3, [sp, #12]
 800703c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703e:	4433      	add	r3, r6
 8007040:	9309      	str	r3, [sp, #36]	; 0x24
 8007042:	e768      	b.n	8006f16 <_svfiprintf_r+0x4e>
 8007044:	460c      	mov	r4, r1
 8007046:	2001      	movs	r0, #1
 8007048:	fb0c 3202 	mla	r2, ip, r2, r3
 800704c:	e7a6      	b.n	8006f9c <_svfiprintf_r+0xd4>
 800704e:	2300      	movs	r3, #0
 8007050:	f04f 0c0a 	mov.w	ip, #10
 8007054:	4619      	mov	r1, r3
 8007056:	3401      	adds	r4, #1
 8007058:	9305      	str	r3, [sp, #20]
 800705a:	4620      	mov	r0, r4
 800705c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007060:	3a30      	subs	r2, #48	; 0x30
 8007062:	2a09      	cmp	r2, #9
 8007064:	d903      	bls.n	800706e <_svfiprintf_r+0x1a6>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0c6      	beq.n	8006ff8 <_svfiprintf_r+0x130>
 800706a:	9105      	str	r1, [sp, #20]
 800706c:	e7c4      	b.n	8006ff8 <_svfiprintf_r+0x130>
 800706e:	4604      	mov	r4, r0
 8007070:	2301      	movs	r3, #1
 8007072:	fb0c 2101 	mla	r1, ip, r1, r2
 8007076:	e7f0      	b.n	800705a <_svfiprintf_r+0x192>
 8007078:	ab03      	add	r3, sp, #12
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	462a      	mov	r2, r5
 800707e:	4638      	mov	r0, r7
 8007080:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <_svfiprintf_r+0x1f8>)
 8007082:	a904      	add	r1, sp, #16
 8007084:	f3af 8000 	nop.w
 8007088:	1c42      	adds	r2, r0, #1
 800708a:	4606      	mov	r6, r0
 800708c:	d1d6      	bne.n	800703c <_svfiprintf_r+0x174>
 800708e:	89ab      	ldrh	r3, [r5, #12]
 8007090:	065b      	lsls	r3, r3, #25
 8007092:	f53f af2d 	bmi.w	8006ef0 <_svfiprintf_r+0x28>
 8007096:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007098:	b01d      	add	sp, #116	; 0x74
 800709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709e:	ab03      	add	r3, sp, #12
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	462a      	mov	r2, r5
 80070a4:	4638      	mov	r0, r7
 80070a6:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <_svfiprintf_r+0x1f8>)
 80070a8:	a904      	add	r1, sp, #16
 80070aa:	f000 f87d 	bl	80071a8 <_printf_i>
 80070ae:	e7eb      	b.n	8007088 <_svfiprintf_r+0x1c0>
 80070b0:	08007739 	.word	0x08007739
 80070b4:	0800773f 	.word	0x0800773f
 80070b8:	08007743 	.word	0x08007743
 80070bc:	00000000 	.word	0x00000000
 80070c0:	08006e15 	.word	0x08006e15

080070c4 <_printf_common>:
 80070c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c8:	4616      	mov	r6, r2
 80070ca:	4699      	mov	r9, r3
 80070cc:	688a      	ldr	r2, [r1, #8]
 80070ce:	690b      	ldr	r3, [r1, #16]
 80070d0:	4607      	mov	r7, r0
 80070d2:	4293      	cmp	r3, r2
 80070d4:	bfb8      	it	lt
 80070d6:	4613      	movlt	r3, r2
 80070d8:	6033      	str	r3, [r6, #0]
 80070da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070de:	460c      	mov	r4, r1
 80070e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070e4:	b10a      	cbz	r2, 80070ea <_printf_common+0x26>
 80070e6:	3301      	adds	r3, #1
 80070e8:	6033      	str	r3, [r6, #0]
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	0699      	lsls	r1, r3, #26
 80070ee:	bf42      	ittt	mi
 80070f0:	6833      	ldrmi	r3, [r6, #0]
 80070f2:	3302      	addmi	r3, #2
 80070f4:	6033      	strmi	r3, [r6, #0]
 80070f6:	6825      	ldr	r5, [r4, #0]
 80070f8:	f015 0506 	ands.w	r5, r5, #6
 80070fc:	d106      	bne.n	800710c <_printf_common+0x48>
 80070fe:	f104 0a19 	add.w	sl, r4, #25
 8007102:	68e3      	ldr	r3, [r4, #12]
 8007104:	6832      	ldr	r2, [r6, #0]
 8007106:	1a9b      	subs	r3, r3, r2
 8007108:	42ab      	cmp	r3, r5
 800710a:	dc2b      	bgt.n	8007164 <_printf_common+0xa0>
 800710c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007110:	1e13      	subs	r3, r2, #0
 8007112:	6822      	ldr	r2, [r4, #0]
 8007114:	bf18      	it	ne
 8007116:	2301      	movne	r3, #1
 8007118:	0692      	lsls	r2, r2, #26
 800711a:	d430      	bmi.n	800717e <_printf_common+0xba>
 800711c:	4649      	mov	r1, r9
 800711e:	4638      	mov	r0, r7
 8007120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007124:	47c0      	blx	r8
 8007126:	3001      	adds	r0, #1
 8007128:	d023      	beq.n	8007172 <_printf_common+0xae>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	6922      	ldr	r2, [r4, #16]
 800712e:	f003 0306 	and.w	r3, r3, #6
 8007132:	2b04      	cmp	r3, #4
 8007134:	bf14      	ite	ne
 8007136:	2500      	movne	r5, #0
 8007138:	6833      	ldreq	r3, [r6, #0]
 800713a:	f04f 0600 	mov.w	r6, #0
 800713e:	bf08      	it	eq
 8007140:	68e5      	ldreq	r5, [r4, #12]
 8007142:	f104 041a 	add.w	r4, r4, #26
 8007146:	bf08      	it	eq
 8007148:	1aed      	subeq	r5, r5, r3
 800714a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800714e:	bf08      	it	eq
 8007150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007154:	4293      	cmp	r3, r2
 8007156:	bfc4      	itt	gt
 8007158:	1a9b      	subgt	r3, r3, r2
 800715a:	18ed      	addgt	r5, r5, r3
 800715c:	42b5      	cmp	r5, r6
 800715e:	d11a      	bne.n	8007196 <_printf_common+0xd2>
 8007160:	2000      	movs	r0, #0
 8007162:	e008      	b.n	8007176 <_printf_common+0xb2>
 8007164:	2301      	movs	r3, #1
 8007166:	4652      	mov	r2, sl
 8007168:	4649      	mov	r1, r9
 800716a:	4638      	mov	r0, r7
 800716c:	47c0      	blx	r8
 800716e:	3001      	adds	r0, #1
 8007170:	d103      	bne.n	800717a <_printf_common+0xb6>
 8007172:	f04f 30ff 	mov.w	r0, #4294967295
 8007176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717a:	3501      	adds	r5, #1
 800717c:	e7c1      	b.n	8007102 <_printf_common+0x3e>
 800717e:	2030      	movs	r0, #48	; 0x30
 8007180:	18e1      	adds	r1, r4, r3
 8007182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800718c:	4422      	add	r2, r4
 800718e:	3302      	adds	r3, #2
 8007190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007194:	e7c2      	b.n	800711c <_printf_common+0x58>
 8007196:	2301      	movs	r3, #1
 8007198:	4622      	mov	r2, r4
 800719a:	4649      	mov	r1, r9
 800719c:	4638      	mov	r0, r7
 800719e:	47c0      	blx	r8
 80071a0:	3001      	adds	r0, #1
 80071a2:	d0e6      	beq.n	8007172 <_printf_common+0xae>
 80071a4:	3601      	adds	r6, #1
 80071a6:	e7d9      	b.n	800715c <_printf_common+0x98>

080071a8 <_printf_i>:
 80071a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ac:	7e0f      	ldrb	r7, [r1, #24]
 80071ae:	4691      	mov	r9, r2
 80071b0:	2f78      	cmp	r7, #120	; 0x78
 80071b2:	4680      	mov	r8, r0
 80071b4:	460c      	mov	r4, r1
 80071b6:	469a      	mov	sl, r3
 80071b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071be:	d807      	bhi.n	80071d0 <_printf_i+0x28>
 80071c0:	2f62      	cmp	r7, #98	; 0x62
 80071c2:	d80a      	bhi.n	80071da <_printf_i+0x32>
 80071c4:	2f00      	cmp	r7, #0
 80071c6:	f000 80d5 	beq.w	8007374 <_printf_i+0x1cc>
 80071ca:	2f58      	cmp	r7, #88	; 0x58
 80071cc:	f000 80c1 	beq.w	8007352 <_printf_i+0x1aa>
 80071d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071d8:	e03a      	b.n	8007250 <_printf_i+0xa8>
 80071da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071de:	2b15      	cmp	r3, #21
 80071e0:	d8f6      	bhi.n	80071d0 <_printf_i+0x28>
 80071e2:	a101      	add	r1, pc, #4	; (adr r1, 80071e8 <_printf_i+0x40>)
 80071e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071e8:	08007241 	.word	0x08007241
 80071ec:	08007255 	.word	0x08007255
 80071f0:	080071d1 	.word	0x080071d1
 80071f4:	080071d1 	.word	0x080071d1
 80071f8:	080071d1 	.word	0x080071d1
 80071fc:	080071d1 	.word	0x080071d1
 8007200:	08007255 	.word	0x08007255
 8007204:	080071d1 	.word	0x080071d1
 8007208:	080071d1 	.word	0x080071d1
 800720c:	080071d1 	.word	0x080071d1
 8007210:	080071d1 	.word	0x080071d1
 8007214:	0800735b 	.word	0x0800735b
 8007218:	08007281 	.word	0x08007281
 800721c:	08007315 	.word	0x08007315
 8007220:	080071d1 	.word	0x080071d1
 8007224:	080071d1 	.word	0x080071d1
 8007228:	0800737d 	.word	0x0800737d
 800722c:	080071d1 	.word	0x080071d1
 8007230:	08007281 	.word	0x08007281
 8007234:	080071d1 	.word	0x080071d1
 8007238:	080071d1 	.word	0x080071d1
 800723c:	0800731d 	.word	0x0800731d
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	1d1a      	adds	r2, r3, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	602a      	str	r2, [r5, #0]
 8007248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800724c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007250:	2301      	movs	r3, #1
 8007252:	e0a0      	b.n	8007396 <_printf_i+0x1ee>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	682b      	ldr	r3, [r5, #0]
 8007258:	0607      	lsls	r7, r0, #24
 800725a:	f103 0104 	add.w	r1, r3, #4
 800725e:	6029      	str	r1, [r5, #0]
 8007260:	d501      	bpl.n	8007266 <_printf_i+0xbe>
 8007262:	681e      	ldr	r6, [r3, #0]
 8007264:	e003      	b.n	800726e <_printf_i+0xc6>
 8007266:	0646      	lsls	r6, r0, #25
 8007268:	d5fb      	bpl.n	8007262 <_printf_i+0xba>
 800726a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800726e:	2e00      	cmp	r6, #0
 8007270:	da03      	bge.n	800727a <_printf_i+0xd2>
 8007272:	232d      	movs	r3, #45	; 0x2d
 8007274:	4276      	negs	r6, r6
 8007276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800727a:	230a      	movs	r3, #10
 800727c:	4859      	ldr	r0, [pc, #356]	; (80073e4 <_printf_i+0x23c>)
 800727e:	e012      	b.n	80072a6 <_printf_i+0xfe>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	6820      	ldr	r0, [r4, #0]
 8007284:	1d19      	adds	r1, r3, #4
 8007286:	6029      	str	r1, [r5, #0]
 8007288:	0605      	lsls	r5, r0, #24
 800728a:	d501      	bpl.n	8007290 <_printf_i+0xe8>
 800728c:	681e      	ldr	r6, [r3, #0]
 800728e:	e002      	b.n	8007296 <_printf_i+0xee>
 8007290:	0641      	lsls	r1, r0, #25
 8007292:	d5fb      	bpl.n	800728c <_printf_i+0xe4>
 8007294:	881e      	ldrh	r6, [r3, #0]
 8007296:	2f6f      	cmp	r7, #111	; 0x6f
 8007298:	bf0c      	ite	eq
 800729a:	2308      	moveq	r3, #8
 800729c:	230a      	movne	r3, #10
 800729e:	4851      	ldr	r0, [pc, #324]	; (80073e4 <_printf_i+0x23c>)
 80072a0:	2100      	movs	r1, #0
 80072a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072a6:	6865      	ldr	r5, [r4, #4]
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	bfa8      	it	ge
 80072ac:	6821      	ldrge	r1, [r4, #0]
 80072ae:	60a5      	str	r5, [r4, #8]
 80072b0:	bfa4      	itt	ge
 80072b2:	f021 0104 	bicge.w	r1, r1, #4
 80072b6:	6021      	strge	r1, [r4, #0]
 80072b8:	b90e      	cbnz	r6, 80072be <_printf_i+0x116>
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	d04b      	beq.n	8007356 <_printf_i+0x1ae>
 80072be:	4615      	mov	r5, r2
 80072c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80072c4:	fb03 6711 	mls	r7, r3, r1, r6
 80072c8:	5dc7      	ldrb	r7, [r0, r7]
 80072ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072ce:	4637      	mov	r7, r6
 80072d0:	42bb      	cmp	r3, r7
 80072d2:	460e      	mov	r6, r1
 80072d4:	d9f4      	bls.n	80072c0 <_printf_i+0x118>
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d10b      	bne.n	80072f2 <_printf_i+0x14a>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	07de      	lsls	r6, r3, #31
 80072de:	d508      	bpl.n	80072f2 <_printf_i+0x14a>
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	6861      	ldr	r1, [r4, #4]
 80072e4:	4299      	cmp	r1, r3
 80072e6:	bfde      	ittt	le
 80072e8:	2330      	movle	r3, #48	; 0x30
 80072ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072f2:	1b52      	subs	r2, r2, r5
 80072f4:	6122      	str	r2, [r4, #16]
 80072f6:	464b      	mov	r3, r9
 80072f8:	4621      	mov	r1, r4
 80072fa:	4640      	mov	r0, r8
 80072fc:	f8cd a000 	str.w	sl, [sp]
 8007300:	aa03      	add	r2, sp, #12
 8007302:	f7ff fedf 	bl	80070c4 <_printf_common>
 8007306:	3001      	adds	r0, #1
 8007308:	d14a      	bne.n	80073a0 <_printf_i+0x1f8>
 800730a:	f04f 30ff 	mov.w	r0, #4294967295
 800730e:	b004      	add	sp, #16
 8007310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	f043 0320 	orr.w	r3, r3, #32
 800731a:	6023      	str	r3, [r4, #0]
 800731c:	2778      	movs	r7, #120	; 0x78
 800731e:	4832      	ldr	r0, [pc, #200]	; (80073e8 <_printf_i+0x240>)
 8007320:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	6829      	ldr	r1, [r5, #0]
 8007328:	061f      	lsls	r7, r3, #24
 800732a:	f851 6b04 	ldr.w	r6, [r1], #4
 800732e:	d402      	bmi.n	8007336 <_printf_i+0x18e>
 8007330:	065f      	lsls	r7, r3, #25
 8007332:	bf48      	it	mi
 8007334:	b2b6      	uxthmi	r6, r6
 8007336:	07df      	lsls	r7, r3, #31
 8007338:	bf48      	it	mi
 800733a:	f043 0320 	orrmi.w	r3, r3, #32
 800733e:	6029      	str	r1, [r5, #0]
 8007340:	bf48      	it	mi
 8007342:	6023      	strmi	r3, [r4, #0]
 8007344:	b91e      	cbnz	r6, 800734e <_printf_i+0x1a6>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	f023 0320 	bic.w	r3, r3, #32
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	2310      	movs	r3, #16
 8007350:	e7a6      	b.n	80072a0 <_printf_i+0xf8>
 8007352:	4824      	ldr	r0, [pc, #144]	; (80073e4 <_printf_i+0x23c>)
 8007354:	e7e4      	b.n	8007320 <_printf_i+0x178>
 8007356:	4615      	mov	r5, r2
 8007358:	e7bd      	b.n	80072d6 <_printf_i+0x12e>
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	6826      	ldr	r6, [r4, #0]
 800735e:	1d18      	adds	r0, r3, #4
 8007360:	6961      	ldr	r1, [r4, #20]
 8007362:	6028      	str	r0, [r5, #0]
 8007364:	0635      	lsls	r5, r6, #24
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	d501      	bpl.n	800736e <_printf_i+0x1c6>
 800736a:	6019      	str	r1, [r3, #0]
 800736c:	e002      	b.n	8007374 <_printf_i+0x1cc>
 800736e:	0670      	lsls	r0, r6, #25
 8007370:	d5fb      	bpl.n	800736a <_printf_i+0x1c2>
 8007372:	8019      	strh	r1, [r3, #0]
 8007374:	2300      	movs	r3, #0
 8007376:	4615      	mov	r5, r2
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	e7bc      	b.n	80072f6 <_printf_i+0x14e>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	2100      	movs	r1, #0
 8007380:	1d1a      	adds	r2, r3, #4
 8007382:	602a      	str	r2, [r5, #0]
 8007384:	681d      	ldr	r5, [r3, #0]
 8007386:	6862      	ldr	r2, [r4, #4]
 8007388:	4628      	mov	r0, r5
 800738a:	f000 f849 	bl	8007420 <memchr>
 800738e:	b108      	cbz	r0, 8007394 <_printf_i+0x1ec>
 8007390:	1b40      	subs	r0, r0, r5
 8007392:	6060      	str	r0, [r4, #4]
 8007394:	6863      	ldr	r3, [r4, #4]
 8007396:	6123      	str	r3, [r4, #16]
 8007398:	2300      	movs	r3, #0
 800739a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739e:	e7aa      	b.n	80072f6 <_printf_i+0x14e>
 80073a0:	462a      	mov	r2, r5
 80073a2:	4649      	mov	r1, r9
 80073a4:	4640      	mov	r0, r8
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	47d0      	blx	sl
 80073aa:	3001      	adds	r0, #1
 80073ac:	d0ad      	beq.n	800730a <_printf_i+0x162>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	079b      	lsls	r3, r3, #30
 80073b2:	d413      	bmi.n	80073dc <_printf_i+0x234>
 80073b4:	68e0      	ldr	r0, [r4, #12]
 80073b6:	9b03      	ldr	r3, [sp, #12]
 80073b8:	4298      	cmp	r0, r3
 80073ba:	bfb8      	it	lt
 80073bc:	4618      	movlt	r0, r3
 80073be:	e7a6      	b.n	800730e <_printf_i+0x166>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4632      	mov	r2, r6
 80073c4:	4649      	mov	r1, r9
 80073c6:	4640      	mov	r0, r8
 80073c8:	47d0      	blx	sl
 80073ca:	3001      	adds	r0, #1
 80073cc:	d09d      	beq.n	800730a <_printf_i+0x162>
 80073ce:	3501      	adds	r5, #1
 80073d0:	68e3      	ldr	r3, [r4, #12]
 80073d2:	9903      	ldr	r1, [sp, #12]
 80073d4:	1a5b      	subs	r3, r3, r1
 80073d6:	42ab      	cmp	r3, r5
 80073d8:	dcf2      	bgt.n	80073c0 <_printf_i+0x218>
 80073da:	e7eb      	b.n	80073b4 <_printf_i+0x20c>
 80073dc:	2500      	movs	r5, #0
 80073de:	f104 0619 	add.w	r6, r4, #25
 80073e2:	e7f5      	b.n	80073d0 <_printf_i+0x228>
 80073e4:	0800774a 	.word	0x0800774a
 80073e8:	0800775b 	.word	0x0800775b

080073ec <memmove>:
 80073ec:	4288      	cmp	r0, r1
 80073ee:	b510      	push	{r4, lr}
 80073f0:	eb01 0402 	add.w	r4, r1, r2
 80073f4:	d902      	bls.n	80073fc <memmove+0x10>
 80073f6:	4284      	cmp	r4, r0
 80073f8:	4623      	mov	r3, r4
 80073fa:	d807      	bhi.n	800740c <memmove+0x20>
 80073fc:	1e43      	subs	r3, r0, #1
 80073fe:	42a1      	cmp	r1, r4
 8007400:	d008      	beq.n	8007414 <memmove+0x28>
 8007402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800740a:	e7f8      	b.n	80073fe <memmove+0x12>
 800740c:	4601      	mov	r1, r0
 800740e:	4402      	add	r2, r0
 8007410:	428a      	cmp	r2, r1
 8007412:	d100      	bne.n	8007416 <memmove+0x2a>
 8007414:	bd10      	pop	{r4, pc}
 8007416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800741a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800741e:	e7f7      	b.n	8007410 <memmove+0x24>

08007420 <memchr>:
 8007420:	4603      	mov	r3, r0
 8007422:	b510      	push	{r4, lr}
 8007424:	b2c9      	uxtb	r1, r1
 8007426:	4402      	add	r2, r0
 8007428:	4293      	cmp	r3, r2
 800742a:	4618      	mov	r0, r3
 800742c:	d101      	bne.n	8007432 <memchr+0x12>
 800742e:	2000      	movs	r0, #0
 8007430:	e003      	b.n	800743a <memchr+0x1a>
 8007432:	7804      	ldrb	r4, [r0, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	428c      	cmp	r4, r1
 8007438:	d1f6      	bne.n	8007428 <memchr+0x8>
 800743a:	bd10      	pop	{r4, pc}

0800743c <_realloc_r>:
 800743c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007440:	4680      	mov	r8, r0
 8007442:	4614      	mov	r4, r2
 8007444:	460e      	mov	r6, r1
 8007446:	b921      	cbnz	r1, 8007452 <_realloc_r+0x16>
 8007448:	4611      	mov	r1, r2
 800744a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800744e:	f7ff baef 	b.w	8006a30 <_malloc_r>
 8007452:	b92a      	cbnz	r2, 8007460 <_realloc_r+0x24>
 8007454:	f7ff fc96 	bl	8006d84 <_free_r>
 8007458:	4625      	mov	r5, r4
 800745a:	4628      	mov	r0, r5
 800745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007460:	f000 f81b 	bl	800749a <_malloc_usable_size_r>
 8007464:	4284      	cmp	r4, r0
 8007466:	4607      	mov	r7, r0
 8007468:	d802      	bhi.n	8007470 <_realloc_r+0x34>
 800746a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800746e:	d812      	bhi.n	8007496 <_realloc_r+0x5a>
 8007470:	4621      	mov	r1, r4
 8007472:	4640      	mov	r0, r8
 8007474:	f7ff fadc 	bl	8006a30 <_malloc_r>
 8007478:	4605      	mov	r5, r0
 800747a:	2800      	cmp	r0, #0
 800747c:	d0ed      	beq.n	800745a <_realloc_r+0x1e>
 800747e:	42bc      	cmp	r4, r7
 8007480:	4622      	mov	r2, r4
 8007482:	4631      	mov	r1, r6
 8007484:	bf28      	it	cs
 8007486:	463a      	movcs	r2, r7
 8007488:	f7ff fc6e 	bl	8006d68 <memcpy>
 800748c:	4631      	mov	r1, r6
 800748e:	4640      	mov	r0, r8
 8007490:	f7ff fc78 	bl	8006d84 <_free_r>
 8007494:	e7e1      	b.n	800745a <_realloc_r+0x1e>
 8007496:	4635      	mov	r5, r6
 8007498:	e7df      	b.n	800745a <_realloc_r+0x1e>

0800749a <_malloc_usable_size_r>:
 800749a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749e:	1f18      	subs	r0, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	bfbc      	itt	lt
 80074a4:	580b      	ldrlt	r3, [r1, r0]
 80074a6:	18c0      	addlt	r0, r0, r3
 80074a8:	4770      	bx	lr
	...

080074ac <_init>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr

080074b8 <_fini>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr
